{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+15637e6", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [4]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 9655, "data_time": 0.05973, "stage0_loss_instance_mil": 0.5532, "stage0_bag_acc": 44.73033, "stage0_mean_ious": 0.11704, "stage0_s": 0.0, "stage0_m": 0.02161, "stage0_l": 0.10508, "stage0_h": 0.11197, "stage1_loss_instance_mil": 0.36014, "stage1_bag_acc": 28.71932, "stage1_neg_loss": 0.04933, "stage1_mean_ious": 0.11781, "stage1_s": 0.0, "stage1_m": 0.02221, "stage1_l": 0.10779, "stage1_h": 0.11196, "loss": 0.96267, "grad_norm": 7.41614, "time": 0.88607}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01988, "memory": 9655, "data_time": 0.01263, "stage0_loss_instance_mil": 0.56404, "stage0_bag_acc": 45.9266, "stage0_mean_ious": 0.09135, "stage0_s": 0.00059, "stage0_m": 0.00924, "stage0_l": 0.09049, "stage0_h": 0.08472, "stage1_loss_instance_mil": 0.29421, "stage1_bag_acc": 46.44613, "stage1_neg_loss": 0.02611, "stage1_mean_ious": 0.0888, "stage1_s": 0.0, "stage1_m": 0.00912, "stage1_l": 0.09019, "stage1_h": 0.08183, "loss": 0.88436, "grad_norm": 3.20818, "time": 0.83995}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.02987, "memory": 9655, "data_time": 0.01401, "stage0_loss_instance_mil": 0.58271, "stage0_bag_acc": 37.72885, "stage0_mean_ious": 0.09381, "stage0_s": 0.0, "stage0_m": 0.01198, "stage0_l": 0.08218, "stage0_h": 0.08716, "stage1_loss_instance_mil": 0.25331, "stage1_bag_acc": 36.5359, "stage1_neg_loss": 0.01657, "stage1_mean_ious": 0.09138, "stage1_s": 0.0, "stage1_m": 0.01388, "stage1_l": 0.07909, "stage1_h": 0.08393, "loss": 0.85259, "grad_norm": 2.18675, "time": 0.85321}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.03986, "memory": 9655, "data_time": 0.01324, "stage0_loss_instance_mil": 0.64636, "stage0_bag_acc": 22.49864, "stage0_mean_ious": 0.10313, "stage0_s": 0.0, "stage0_m": 0.01212, "stage0_l": 0.08132, "stage0_h": 0.09906, "stage1_loss_instance_mil": 0.19602, "stage1_bag_acc": 28.68144, "stage1_neg_loss": 0.01505, "stage1_mean_ious": 0.10226, "stage1_s": 0.0, "stage1_m": 0.01368, "stage1_l": 0.08696, "stage1_h": 0.09664, "loss": 0.85743, "grad_norm": 1.26799, "time": 0.88078}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.04985, "memory": 9655, "data_time": 0.01274, "stage0_loss_instance_mil": 0.63057, "stage0_bag_acc": 33.55509, "stage0_mean_ious": 0.08959, "stage0_s": 0.0, "stage0_m": 0.01433, "stage0_l": 0.05869, "stage0_h": 0.08408, "stage1_loss_instance_mil": 0.18621, "stage1_bag_acc": 41.90705, "stage1_neg_loss": 0.01587, "stage1_mean_ious": 0.08832, "stage1_s": 0.0, "stage1_m": 0.01291, "stage1_l": 0.05543, "stage1_h": 0.08376, "loss": 0.83265, "grad_norm": 0.9692, "time": 0.84404}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.05984, "memory": 9655, "data_time": 0.01245, "stage0_loss_instance_mil": 0.63705, "stage0_bag_acc": 26.40876, "stage0_mean_ious": 0.10108, "stage0_s": 0.0, "stage0_m": 0.00488, "stage0_l": 0.09616, "stage0_h": 0.09496, "stage1_loss_instance_mil": 0.18578, "stage1_bag_acc": 24.79753, "stage1_neg_loss": 0.01531, "stage1_mean_ious": 0.09867, "stage1_s": 0.0, "stage1_m": 0.00619, "stage1_l": 0.09419, "stage1_h": 0.09269, "loss": 0.83814, "grad_norm": 0.68604, "time": 0.8517}
{"mode": "val", "epoch": 1, "iter": 300, "lr": 0.05984, "eval_iter_num": 720, "bbox_mAP": 0.054, "bbox_mAP_50": 0.186, "bbox_mAP_75": 0.093, "bbox_mAP_s": 0.037, "bbox_mAP_m": 0.02, "bbox_mAP_l": 0.009, "bbox_mAP_copypaste": "0.054 0.186 0.093 0.037 0.020 0.009"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.06983, "memory": 9655, "data_time": 0.05937, "stage0_loss_instance_mil": 0.63173, "stage0_bag_acc": 27.31499, "stage0_mean_ious": 0.10661, "stage0_s": 0.0, "stage0_m": 0.02158, "stage0_l": 0.08837, "stage0_h": 0.10064, "stage1_loss_instance_mil": 0.19027, "stage1_bag_acc": 25.97552, "stage1_neg_loss": 0.02, "stage1_mean_ious": 0.10128, "stage1_s": 0.0, "stage1_m": 0.02176, "stage1_l": 0.08752, "stage1_h": 0.09472, "loss": 0.84199, "grad_norm": 0.78899, "time": 0.89804}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.07982, "memory": 9655, "data_time": 0.01309, "stage0_loss_instance_mil": 0.59287, "stage0_bag_acc": 37.2059, "stage0_mean_ious": 0.12431, "stage0_s": 0.0, "stage0_m": 0.00928, "stage0_l": 0.11511, "stage0_h": 0.11703, "stage1_loss_instance_mil": 0.20671, "stage1_bag_acc": 50.66738, "stage1_neg_loss": 0.03184, "stage1_mean_ious": 0.11811, "stage1_s": 0.0, "stage1_m": 0.00994, "stage1_l": 0.10927, "stage1_h": 0.1099, "loss": 0.83141, "grad_norm": 1.06115, "time": 0.85696}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.08981, "memory": 9655, "data_time": 0.01256, "stage0_loss_instance_mil": 0.60128, "stage0_bag_acc": 35.17585, "stage0_mean_ious": 0.11206, "stage0_s": 0.0, "stage0_m": 0.02494, "stage0_l": 0.07497, "stage0_h": 0.10977, "stage1_loss_instance_mil": 0.22151, "stage1_bag_acc": 44.42896, "stage1_neg_loss": 0.02355, "stage1_mean_ious": 0.1118, "stage1_s": 0.0, "stage1_m": 0.02495, "stage1_l": 0.07095, "stage1_h": 0.10993, "loss": 0.84634, "grad_norm": 0.75065, "time": 0.82758}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0998, "memory": 9655, "data_time": 0.01232, "stage0_loss_instance_mil": 0.64395, "stage0_bag_acc": 25.30745, "stage0_mean_ious": 0.10689, "stage0_s": 0.0, "stage0_m": 0.01146, "stage0_l": 0.08358, "stage0_h": 0.09879, "stage1_loss_instance_mil": 0.17463, "stage1_bag_acc": 33.25947, "stage1_neg_loss": 0.02076, "stage1_mean_ious": 0.10319, "stage1_s": 0.0, "stage1_m": 0.01321, "stage1_l": 0.07904, "stage1_h": 0.09552, "loss": 0.83935, "grad_norm": 0.6121, "time": 0.83409}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.1, "memory": 9655, "data_time": 0.01287, "stage0_loss_instance_mil": 0.6224, "stage0_bag_acc": 26.6239, "stage0_mean_ious": 0.0999, "stage0_s": 0.0, "stage0_m": 0.00011, "stage0_l": 0.09046, "stage0_h": 0.09369, "stage1_loss_instance_mil": 0.17841, "stage1_bag_acc": 39.80192, "stage1_neg_loss": 0.02523, "stage1_mean_ious": 0.09793, "stage1_s": 0.0, "stage1_m": 0.0, "stage1_l": 0.08743, "stage1_h": 0.09173, "loss": 0.82604, "grad_norm": 0.61777, "time": 0.86274}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.1, "memory": 9655, "data_time": 0.01269, "stage0_loss_instance_mil": 0.54871, "stage0_bag_acc": 42.6456, "stage0_mean_ious": 0.08185, "stage0_s": 0.0, "stage0_m": 0.00917, "stage0_l": 0.08034, "stage0_h": 0.07345, "stage1_loss_instance_mil": 0.22068, "stage1_bag_acc": 51.89655, "stage1_neg_loss": 0.02788, "stage1_mean_ious": 0.07613, "stage1_s": 0.0, "stage1_m": 0.0101, "stage1_l": 0.0762, "stage1_h": 0.06771, "loss": 0.79726, "grad_norm": 0.82212, "time": 0.85365}
{"mode": "val", "epoch": 2, "iter": 300, "lr": 0.1, "eval_iter_num": 720, "bbox_mAP": 0.004, "bbox_mAP_50": 0.015, "bbox_mAP_75": 0.008, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.001, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.004 0.015 0.008 0.003 0.001 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.1, "memory": 9655, "data_time": 0.05946, "stage0_loss_instance_mil": 0.63383, "stage0_bag_acc": 28.27445, "stage0_mean_ious": 0.09128, "stage0_s": 0.0, "stage0_m": 0.00636, "stage0_l": 0.10097, "stage0_h": 0.08182, "stage1_loss_instance_mil": 0.17743, "stage1_bag_acc": 44.43766, "stage1_neg_loss": 0.02937, "stage1_mean_ious": 0.08503, "stage1_s": 0.0, "stage1_m": 0.00528, "stage1_l": 0.09355, "stage1_h": 0.07663, "loss": 0.84062, "grad_norm": 0.89032, "time": 0.89676}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.1, "memory": 9655, "data_time": 0.01391, "stage0_loss_instance_mil": 0.62262, "stage0_bag_acc": 29.06024, "stage0_mean_ious": 0.07302, "stage0_s": 0.0, "stage0_m": 0.0116, "stage0_l": 0.06988, "stage0_h": 0.06704, "stage1_loss_instance_mil": 0.16541, "stage1_bag_acc": 38.34711, "stage1_neg_loss": 0.02813, "stage1_mean_ious": 0.07039, "stage1_s": 0.0, "stage1_m": 0.01301, "stage1_l": 0.07234, "stage1_h": 0.06325, "loss": 0.81616, "grad_norm": 0.6453, "time": 0.8531}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.1, "memory": 9655, "data_time": 0.01367, "stage0_loss_instance_mil": 0.61738, "stage0_bag_acc": 28.3885, "stage0_mean_ious": 0.07766, "stage0_s": 0.0, "stage0_m": 0.00852, "stage0_l": 0.06334, "stage0_h": 0.07298, "stage1_loss_instance_mil": 0.17256, "stage1_bag_acc": 35.46231, "stage1_neg_loss": 0.02171, "stage1_mean_ious": 0.07425, "stage1_s": 0.0, "stage1_m": 0.00894, "stage1_l": 0.06432, "stage1_h": 0.06932, "loss": 0.81165, "grad_norm": 0.51914, "time": 0.8655}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.1, "memory": 9655, "data_time": 0.01294, "stage0_loss_instance_mil": 0.59393, "stage0_bag_acc": 34.07421, "stage0_mean_ious": 0.06886, "stage0_s": 0.0, "stage0_m": 0.01456, "stage0_l": 0.08252, "stage0_h": 0.06089, "stage1_loss_instance_mil": 0.17578, "stage1_bag_acc": 45.9291, "stage1_neg_loss": 0.02563, "stage1_mean_ious": 0.06694, "stage1_s": 0.0, "stage1_m": 0.01382, "stage1_l": 0.07751, "stage1_h": 0.06003, "loss": 0.79533, "grad_norm": 0.62776, "time": 0.83155}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.1, "memory": 9655, "data_time": 0.01271, "stage0_loss_instance_mil": 0.60373, "stage0_bag_acc": 29.51903, "stage0_mean_ious": 0.05274, "stage0_s": 0.0, "stage0_m": 0.02435, "stage0_l": 0.05902, "stage0_h": 0.04249, "stage1_loss_instance_mil": 0.15487, "stage1_bag_acc": 46.15087, "stage1_neg_loss": 0.03484, "stage1_mean_ious": 0.05206, "stage1_s": 0.0, "stage1_m": 0.02535, "stage1_l": 0.05498, "stage1_h": 0.04229, "loss": 0.79344, "grad_norm": 0.59372, "time": 0.84685}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.1, "memory": 9655, "data_time": 0.01357, "stage0_loss_instance_mil": 0.59108, "stage0_bag_acc": 34.71142, "stage0_mean_ious": 0.05165, "stage0_s": 0.0, "stage0_m": 0.00624, "stage0_l": 0.07885, "stage0_h": 0.04088, "stage1_loss_instance_mil": 0.17091, "stage1_bag_acc": 44.50151, "stage1_neg_loss": 0.03048, "stage1_mean_ious": 0.05008, "stage1_s": 0.0, "stage1_m": 0.00569, "stage1_l": 0.07842, "stage1_h": 0.03895, "loss": 0.79248, "grad_norm": 0.63114, "time": 0.87502}
{"mode": "val", "epoch": 3, "iter": 300, "lr": 0.1, "eval_iter_num": 720, "bbox_mAP": 0.001, "bbox_mAP_50": 0.006, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.001, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.006 0.002 0.001 0.001 0.001"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.1, "memory": 9655, "data_time": 0.05929, "stage0_loss_instance_mil": 0.56364, "stage0_bag_acc": 39.61082, "stage0_mean_ious": 0.05939, "stage0_s": 0.0, "stage0_m": 0.01688, "stage0_l": 0.06619, "stage0_h": 0.04923, "stage1_loss_instance_mil": 0.19898, "stage1_bag_acc": 41.71573, "stage1_neg_loss": 0.02814, "stage1_mean_ious": 0.05646, "stage1_s": 0.0, "stage1_m": 0.01693, "stage1_l": 0.06283, "stage1_h": 0.04679, "loss": 0.79076, "grad_norm": 0.66966, "time": 0.87708}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.1, "memory": 9655, "data_time": 0.01312, "stage0_loss_instance_mil": 0.58477, "stage0_bag_acc": 34.08138, "stage0_mean_ious": 0.07927, "stage0_s": 0.0, "stage0_m": 0.04213, "stage0_l": 0.07341, "stage0_h": 0.06895, "stage1_loss_instance_mil": 0.17609, "stage1_bag_acc": 46.99706, "stage1_neg_loss": 0.02963, "stage1_mean_ious": 0.07754, "stage1_s": 0.0, "stage1_m": 0.04151, "stage1_l": 0.0748, "stage1_h": 0.06697, "loss": 0.79049, "grad_norm": 0.63573, "time": 0.85558}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.1, "memory": 9655, "data_time": 0.01296, "stage0_loss_instance_mil": 0.58847, "stage0_bag_acc": 39.74434, "stage0_mean_ious": 0.07224, "stage0_s": 0.0, "stage0_m": 0.02583, "stage0_l": 0.07527, "stage0_h": 0.06311, "stage1_loss_instance_mil": 0.17782, "stage1_bag_acc": 49.80152, "stage1_neg_loss": 0.0322, "stage1_mean_ious": 0.06965, "stage1_s": 0.0, "stage1_m": 0.02287, "stage1_l": 0.07019, "stage1_h": 0.06142, "loss": 0.7985, "grad_norm": 0.71733, "time": 0.86046}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.1, "memory": 9655, "data_time": 0.01252, "stage0_loss_instance_mil": 0.60387, "stage0_bag_acc": 33.44689, "stage0_mean_ious": 0.05145, "stage0_s": 0.00069, "stage0_m": 0.01268, "stage0_l": 0.05961, "stage0_h": 0.04213, "stage1_loss_instance_mil": 0.16661, "stage1_bag_acc": 32.39161, "stage1_neg_loss": 0.03502, "stage1_mean_ious": 0.04842, "stage1_s": 0.00031, "stage1_m": 0.01233, "stage1_l": 0.05876, "stage1_h": 0.03882, "loss": 0.80549, "grad_norm": 0.65915, "time": 0.83137}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.1, "memory": 9655, "data_time": 0.01319, "stage0_loss_instance_mil": 0.60866, "stage0_bag_acc": 33.50781, "stage0_mean_ious": 0.04448, "stage0_s": 0.0, "stage0_m": 0.01585, "stage0_l": 0.07431, "stage0_h": 0.03306, "stage1_loss_instance_mil": 0.17356, "stage1_bag_acc": 31.09865, "stage1_neg_loss": 0.02594, "stage1_mean_ious": 0.04351, "stage1_s": 0.0, "stage1_m": 0.01797, "stage1_l": 0.07769, "stage1_h": 0.03101, "loss": 0.80815, "grad_norm": 0.67564, "time": 0.85935}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.1, "memory": 9655, "data_time": 0.01207, "stage0_loss_instance_mil": 0.58497, "stage0_bag_acc": 38.55778, "stage0_mean_ious": 0.04414, "stage0_s": 0.0, "stage0_m": 0.01813, "stage0_l": 0.07491, "stage0_h": 0.03202, "stage1_loss_instance_mil": 0.16243, "stage1_bag_acc": 36.18916, "stage1_neg_loss": 0.02927, "stage1_mean_ious": 0.04062, "stage1_s": 0.0, "stage1_m": 0.01964, "stage1_l": 0.06864, "stage1_h": 0.02943, "loss": 0.77668, "grad_norm": 0.70448, "time": 0.82012}
