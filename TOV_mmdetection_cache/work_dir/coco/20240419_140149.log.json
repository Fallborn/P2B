{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09878, "stage0_loss_instance_mil": 0.7306, "stage0_bag_acc": 13.4091, "stage0_mean_ious": 0.28092, "stage0_s": 0.0, "stage0_m": 0.03957, "stage0_l": 0.2148, "stage0_h": 0.28576, "stage1_loss_instance_mil": 0.15626, "stage1_bag_acc": 20.21956, "stage1_neg_loss": 0.0027, "stage1_mean_ious": 0.26374, "stage1_s": 0.0, "stage1_m": 0.03882, "stage1_l": 0.21509, "stage1_h": 0.26577, "loss": 0.88956, "grad_norm": 3.47581, "time": 1.76463}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04397, "stage0_loss_instance_mil": 0.583, "stage0_bag_acc": 64.24533, "stage0_mean_ious": 0.36041, "stage0_s": 0.0, "stage0_m": 0.05611, "stage0_l": 0.2612, "stage0_h": 0.37033, "stage1_loss_instance_mil": 0.23871, "stage1_bag_acc": 31.29358, "stage1_neg_loss": 0.00426, "stage1_mean_ious": 0.3323, "stage1_s": 0.0, "stage1_m": 0.05088, "stage1_l": 0.2547, "stage1_h": 0.33803, "loss": 0.82597, "grad_norm": 3.86615, "time": 1.67264}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04229, "stage0_loss_instance_mil": 0.22795, "stage0_bag_acc": 94.2936, "stage0_mean_ious": 0.42323, "stage0_s": 0.0, "stage0_m": 0.04946, "stage0_l": 0.27755, "stage0_h": 0.4374, "stage1_loss_instance_mil": 0.31546, "stage1_bag_acc": 76.69335, "stage1_neg_loss": 0.0679, "stage1_mean_ious": 0.4018, "stage1_s": 0.0, "stage1_m": 0.0494, "stage1_l": 0.28311, "stage1_h": 0.41338, "loss": 0.61131, "grad_norm": 10.23918, "time": 1.66219}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09679, "stage0_loss_instance_mil": 0.07947, "stage0_bag_acc": 96.22863, "stage0_mean_ious": 0.4386, "stage0_s": 0.0, "stage0_m": 0.03204, "stage0_l": 0.20491, "stage0_h": 0.46517, "stage1_loss_instance_mil": 0.29277, "stage1_bag_acc": 96.85229, "stage1_neg_loss": 0.08167, "stage1_mean_ious": 0.42639, "stage1_s": 0.0, "stage1_m": 0.02597, "stage1_l": 0.20373, "stage1_h": 0.4516, "loss": 0.4539, "grad_norm": 12.81748, "time": 1.73225}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04281, "stage0_loss_instance_mil": 0.07096, "stage0_bag_acc": 95.79082, "stage0_mean_ious": 0.43253, "stage0_s": 0.0, "stage0_m": 0.0485, "stage0_l": 0.20558, "stage0_h": 0.46373, "stage1_loss_instance_mil": 0.29438, "stage1_bag_acc": 96.74834, "stage1_neg_loss": 0.08944, "stage1_mean_ious": 0.4131, "stage1_s": 0.0, "stage1_m": 0.04946, "stage1_l": 0.20422, "stage1_h": 0.44236, "loss": 0.45478, "grad_norm": 14.25203, "time": 1.67216}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04272, "stage0_loss_instance_mil": 0.07073, "stage0_bag_acc": 95.80139, "stage0_mean_ious": 0.42188, "stage0_s": 0.0, "stage0_m": 0.04035, "stage0_l": 0.19119, "stage0_h": 0.45584, "stage1_loss_instance_mil": 0.26123, "stage1_bag_acc": 97.28406, "stage1_neg_loss": 0.07493, "stage1_mean_ious": 0.39669, "stage1_s": 0.0, "stage1_m": 0.03719, "stage1_l": 0.18166, "stage1_h": 0.42855, "loss": 0.40689, "grad_norm": 11.01562, "time": 1.66571}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09952, "stage0_loss_instance_mil": 0.02833, "stage0_bag_acc": 98.72093, "stage0_mean_ious": 0.45762, "stage0_s": 0.0, "stage0_m": 0.0308, "stage0_l": 0.17233, "stage0_h": 0.48283, "stage1_loss_instance_mil": 0.24592, "stage1_bag_acc": 98.94241, "stage1_neg_loss": 0.07847, "stage1_mean_ious": 0.4203, "stage1_s": 0.0, "stage1_m": 0.02257, "stage1_l": 0.17129, "stage1_h": 0.44256, "loss": 0.35272, "grad_norm": 14.14703, "time": 1.7368}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04442, "stage0_loss_instance_mil": 0.03204, "stage0_bag_acc": 98.31015, "stage0_mean_ious": 0.41481, "stage0_s": 0.00135, "stage0_m": 0.02492, "stage0_l": 0.20963, "stage0_h": 0.44709, "stage1_loss_instance_mil": 0.27409, "stage1_bag_acc": 98.09298, "stage1_neg_loss": 0.07529, "stage1_mean_ious": 0.38871, "stage1_s": 0.00139, "stage1_m": 0.02038, "stage1_l": 0.23114, "stage1_h": 0.41387, "loss": 0.38142, "grad_norm": 15.43562, "time": 1.66884}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04476, "stage0_loss_instance_mil": 0.06619, "stage0_bag_acc": 95.61811, "stage0_mean_ious": 0.39924, "stage0_s": 0.0, "stage0_m": 0.06085, "stage0_l": 0.1875, "stage0_h": 0.42365, "stage1_loss_instance_mil": 0.25639, "stage1_bag_acc": 97.18961, "stage1_neg_loss": 0.07861, "stage1_mean_ious": 0.37123, "stage1_s": 0.0, "stage1_m": 0.06086, "stage1_l": 0.19717, "stage1_h": 0.38983, "loss": 0.40118, "grad_norm": 14.18017, "time": 1.68591}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.10021, "stage0_loss_instance_mil": 0.02541, "stage0_bag_acc": 98.64899, "stage0_mean_ious": 0.39539, "stage0_s": 0.0, "stage0_m": 0.03663, "stage0_l": 0.18824, "stage0_h": 0.41833, "stage1_loss_instance_mil": 0.23982, "stage1_bag_acc": 98.98471, "stage1_neg_loss": 0.07299, "stage1_mean_ious": 0.3689, "stage1_s": 0.0, "stage1_m": 0.03884, "stage1_l": 0.19863, "stage1_h": 0.38646, "loss": 0.33822, "grad_norm": 12.66404, "time": 1.75236}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04434, "stage0_loss_instance_mil": 0.03689, "stage0_bag_acc": 97.5182, "stage0_mean_ious": 0.4087, "stage0_s": 0.0, "stage0_m": 0.03536, "stage0_l": 0.20983, "stage0_h": 0.43609, "stage1_loss_instance_mil": 0.25875, "stage1_bag_acc": 97.84637, "stage1_neg_loss": 0.07534, "stage1_mean_ious": 0.37499, "stage1_s": 0.0, "stage1_m": 0.04093, "stage1_l": 0.22315, "stage1_h": 0.3943, "loss": 0.37099, "grad_norm": 15.33866, "time": 1.70224}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04316, "stage0_loss_instance_mil": 0.02967, "stage0_bag_acc": 98.54633, "stage0_mean_ious": 0.45409, "stage0_s": 0.0, "stage0_m": 0.0587, "stage0_l": 0.17749, "stage0_h": 0.48544, "stage1_loss_instance_mil": 0.18269, "stage1_bag_acc": 98.6002, "stage1_neg_loss": 0.06281, "stage1_mean_ious": 0.41759, "stage1_s": 0.0, "stage1_m": 0.06756, "stage1_l": 0.20367, "stage1_h": 0.43964, "loss": 0.27516, "grad_norm": 10.70047, "time": 1.65971}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0955, "stage0_loss_instance_mil": 0.0221, "stage0_bag_acc": 98.8671, "stage0_mean_ious": 0.44397, "stage0_s": 0.0, "stage0_m": 0.0608, "stage0_l": 0.21962, "stage0_h": 0.47745, "stage1_loss_instance_mil": 0.1976, "stage1_bag_acc": 99.17408, "stage1_neg_loss": 0.06673, "stage1_mean_ious": 0.41794, "stage1_s": 0.0, "stage1_m": 0.07193, "stage1_l": 0.24395, "stage1_h": 0.43958, "loss": 0.28643, "grad_norm": 12.08972, "time": 1.70238}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04203, "stage0_loss_instance_mil": 0.01461, "stage0_bag_acc": 99.24446, "stage0_mean_ious": 0.4669, "stage0_s": 0.0, "stage0_m": 0.04166, "stage0_l": 0.17067, "stage0_h": 0.49126, "stage1_loss_instance_mil": 0.17194, "stage1_bag_acc": 99.06596, "stage1_neg_loss": 0.0595, "stage1_mean_ious": 0.43135, "stage1_s": 0.0, "stage1_m": 0.04919, "stage1_l": 0.19087, "stage1_h": 0.44726, "loss": 0.24605, "grad_norm": 10.8131, "time": 1.65855}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0446, "stage0_loss_instance_mil": 0.01861, "stage0_bag_acc": 98.54791, "stage0_mean_ious": 0.45731, "stage0_s": 0.00151, "stage0_m": 0.04954, "stage0_l": 0.22292, "stage0_h": 0.48934, "stage1_loss_instance_mil": 0.17478, "stage1_bag_acc": 98.69333, "stage1_neg_loss": 0.06123, "stage1_mean_ious": 0.42093, "stage1_s": 0.00225, "stage1_m": 0.06095, "stage1_l": 0.24655, "stage1_h": 0.43987, "loss": 0.25462, "grad_norm": 10.15137, "time": 1.71828}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09468, "stage0_loss_instance_mil": 0.01819, "stage0_bag_acc": 99.25495, "stage0_mean_ious": 0.46315, "stage0_s": 0.0, "stage0_m": 0.0591, "stage0_l": 0.25037, "stage0_h": 0.49394, "stage1_loss_instance_mil": 0.15265, "stage1_bag_acc": 98.85091, "stage1_neg_loss": 0.04973, "stage1_mean_ious": 0.43773, "stage1_s": 0.0, "stage1_m": 0.06503, "stage1_l": 0.26948, "stage1_h": 0.45923, "loss": 0.22058, "grad_norm": 7.3914, "time": 1.75114}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04254, "stage0_loss_instance_mil": 0.02016, "stage0_bag_acc": 98.54068, "stage0_mean_ious": 0.47534, "stage0_s": 0.0, "stage0_m": 0.02026, "stage0_l": 0.25228, "stage0_h": 0.50884, "stage1_loss_instance_mil": 0.18058, "stage1_bag_acc": 98.86425, "stage1_neg_loss": 0.06465, "stage1_mean_ious": 0.44922, "stage1_s": 0.0, "stage1_m": 0.02115, "stage1_l": 0.27001, "stage1_h": 0.47279, "loss": 0.26538, "grad_norm": 11.632, "time": 1.65055}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04402, "stage0_loss_instance_mil": 0.01252, "stage0_bag_acc": 99.27878, "stage0_mean_ious": 0.47895, "stage0_s": 0.0, "stage0_m": 0.03425, "stage0_l": 0.23245, "stage0_h": 0.50623, "stage1_loss_instance_mil": 0.14779, "stage1_bag_acc": 99.42775, "stage1_neg_loss": 0.05545, "stage1_mean_ious": 0.45103, "stage1_s": 0.0, "stage1_m": 0.03271, "stage1_l": 0.2574, "stage1_h": 0.4701, "loss": 0.21576, "grad_norm": 9.011, "time": 1.69518}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.079, "bbox_mAP_50": 0.281, "bbox_mAP_75": 0.138, "bbox_mAP_s": 0.049, "bbox_mAP_m": 0.021, "bbox_mAP_l": 0.007, "bbox_mAP_copypaste": "0.079 0.281 0.138 0.049 0.021 0.007"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09786, "stage0_loss_instance_mil": 0.00966, "stage0_bag_acc": 99.40338, "stage0_mean_ious": 0.46889, "stage0_s": 0.0, "stage0_m": 0.0336, "stage0_l": 0.21861, "stage0_h": 0.50479, "stage1_loss_instance_mil": 0.12927, "stage1_bag_acc": 99.58766, "stage1_neg_loss": 0.0507, "stage1_mean_ious": 0.44697, "stage1_s": 0.0, "stage1_m": 0.04217, "stage1_l": 0.24732, "stage1_h": 0.47267, "loss": 0.18964, "grad_norm": 7.47734, "time": 1.70281}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04381, "stage0_loss_instance_mil": 0.01487, "stage0_bag_acc": 99.1415, "stage0_mean_ious": 0.46326, "stage0_s": 0.0, "stage0_m": 0.02624, "stage0_l": 0.26554, "stage0_h": 0.48334, "stage1_loss_instance_mil": 0.13586, "stage1_bag_acc": 99.29804, "stage1_neg_loss": 0.04623, "stage1_mean_ious": 0.44772, "stage1_s": 0.0, "stage1_m": 0.02498, "stage1_l": 0.28192, "stage1_h": 0.46284, "loss": 0.19696, "grad_norm": 6.83223, "time": 1.67616}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0438, "stage0_loss_instance_mil": 0.02026, "stage0_bag_acc": 98.77312, "stage0_mean_ious": 0.41134, "stage0_s": 0.0015, "stage0_m": 0.04786, "stage0_l": 0.19199, "stage0_h": 0.43613, "stage1_loss_instance_mil": 0.15264, "stage1_bag_acc": 98.41211, "stage1_neg_loss": 0.04976, "stage1_mean_ious": 0.3919, "stage1_s": 0.00203, "stage1_m": 0.05453, "stage1_l": 0.19954, "stage1_h": 0.41077, "loss": 0.22266, "grad_norm": 6.79357, "time": 1.6588}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09583, "stage0_loss_instance_mil": 0.01312, "stage0_bag_acc": 99.2177, "stage0_mean_ious": 0.41301, "stage0_s": 0.0, "stage0_m": 0.05295, "stage0_l": 0.23108, "stage0_h": 0.43952, "stage1_loss_instance_mil": 0.11686, "stage1_bag_acc": 99.60766, "stage1_neg_loss": 0.04196, "stage1_mean_ious": 0.40065, "stage1_s": 0.0, "stage1_m": 0.0627, "stage1_l": 0.24827, "stage1_h": 0.42189, "loss": 0.17194, "grad_norm": 6.63018, "time": 1.70422}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04331, "stage0_loss_instance_mil": 0.0113, "stage0_bag_acc": 99.25181, "stage0_mean_ious": 0.38846, "stage0_s": 0.0, "stage0_m": 0.06222, "stage0_l": 0.22254, "stage0_h": 0.40499, "stage1_loss_instance_mil": 0.1291, "stage1_bag_acc": 99.59748, "stage1_neg_loss": 0.05183, "stage1_mean_ious": 0.37619, "stage1_s": 0.0, "stage1_m": 0.06843, "stage1_l": 0.23947, "stage1_h": 0.38731, "loss": 0.19223, "grad_norm": 7.61518, "time": 1.65603}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0428, "stage0_loss_instance_mil": 0.01146, "stage0_bag_acc": 99.02142, "stage0_mean_ious": 0.36949, "stage0_s": 0.0, "stage0_m": 0.05194, "stage0_l": 0.2556, "stage0_h": 0.39499, "stage1_loss_instance_mil": 0.12986, "stage1_bag_acc": 99.2955, "stage1_neg_loss": 0.04972, "stage1_mean_ious": 0.35476, "stage1_s": 0.0, "stage1_m": 0.05912, "stage1_l": 0.27951, "stage1_h": 0.37226, "loss": 0.19104, "grad_norm": 6.92621, "time": 1.66655}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09703, "stage0_loss_instance_mil": 0.00834, "stage0_bag_acc": 99.447, "stage0_mean_ious": 0.38412, "stage0_s": 0.00159, "stage0_m": 0.041, "stage0_l": 0.25606, "stage0_h": 0.40106, "stage1_loss_instance_mil": 0.12607, "stage1_bag_acc": 99.33192, "stage1_neg_loss": 0.04995, "stage1_mean_ious": 0.36375, "stage1_s": 0.00173, "stage1_m": 0.04003, "stage1_l": 0.28022, "stage1_h": 0.37448, "loss": 0.18436, "grad_norm": 4.58964, "time": 1.70598}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04324, "stage0_loss_instance_mil": 0.00306, "stage0_bag_acc": 99.81304, "stage0_mean_ious": 0.40201, "stage0_s": 0.0, "stage0_m": 0.05901, "stage0_l": 0.23297, "stage0_h": 0.41465, "stage1_loss_instance_mil": 0.10096, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04222, "stage1_mean_ious": 0.38572, "stage1_s": 0.0, "stage1_m": 0.06852, "stage1_l": 0.24365, "stage1_h": 0.39454, "loss": 0.14625, "grad_norm": 3.88606, "time": 1.70278}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04455, "stage0_loss_instance_mil": 0.00939, "stage0_bag_acc": 99.66603, "stage0_mean_ious": 0.40611, "stage0_s": 0.0, "stage0_m": 0.04144, "stage0_l": 0.20208, "stage0_h": 0.42355, "stage1_loss_instance_mil": 0.09912, "stage1_bag_acc": 99.47988, "stage1_neg_loss": 0.04684, "stage1_mean_ious": 0.3898, "stage1_s": 0.0, "stage1_m": 0.04946, "stage1_l": 0.21446, "stage1_h": 0.40148, "loss": 0.15535, "grad_norm": 4.59575, "time": 1.68553}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09836, "stage0_loss_instance_mil": 0.00949, "stage0_bag_acc": 99.53864, "stage0_mean_ious": 0.40267, "stage0_s": 0.0, "stage0_m": 0.03056, "stage0_l": 0.23997, "stage0_h": 0.41572, "stage1_loss_instance_mil": 0.09979, "stage1_bag_acc": 99.6076, "stage1_neg_loss": 0.04361, "stage1_mean_ious": 0.38264, "stage1_s": 0.0, "stage1_m": 0.03616, "stage1_l": 0.24505, "stage1_h": 0.39186, "loss": 0.1529, "grad_norm": 4.04514, "time": 1.7289}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04301, "stage0_loss_instance_mil": 0.00417, "stage0_bag_acc": 99.78804, "stage0_mean_ious": 0.38332, "stage0_s": 0.0, "stage0_m": 0.05005, "stage0_l": 0.21297, "stage0_h": 0.40142, "stage1_loss_instance_mil": 0.10006, "stage1_bag_acc": 99.82609, "stage1_neg_loss": 0.04341, "stage1_mean_ious": 0.36352, "stage1_s": 0.0, "stage1_m": 0.0515, "stage1_l": 0.24444, "stage1_h": 0.37369, "loss": 0.14765, "grad_norm": 4.32847, "time": 1.68927}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04416, "stage0_loss_instance_mil": 0.00362, "stage0_bag_acc": 99.83974, "stage0_mean_ious": 0.39, "stage0_s": 0.0, "stage0_m": 0.02704, "stage0_l": 0.22787, "stage0_h": 0.41055, "stage1_loss_instance_mil": 0.09809, "stage1_bag_acc": 99.91667, "stage1_neg_loss": 0.04338, "stage1_mean_ious": 0.37785, "stage1_s": 0.0, "stage1_m": 0.02708, "stage1_l": 0.2399, "stage1_h": 0.39361, "loss": 0.14509, "grad_norm": 4.55204, "time": 1.69438}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09773, "stage0_loss_instance_mil": 0.0063, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.38209, "stage0_s": 0.0, "stage0_m": 0.10592, "stage0_l": 0.20518, "stage0_h": 0.39765, "stage1_loss_instance_mil": 0.09298, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.0448, "stage1_mean_ious": 0.36553, "stage1_s": 0.0, "stage1_m": 0.11643, "stage1_l": 0.22484, "stage1_h": 0.37343, "loss": 0.14409, "grad_norm": 4.3918, "time": 1.76615}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04457, "stage0_loss_instance_mil": 0.00369, "stage0_bag_acc": 99.70363, "stage0_mean_ious": 0.38783, "stage0_s": 0.0, "stage0_m": 0.03738, "stage0_l": 0.20155, "stage0_h": 0.407, "stage1_loss_instance_mil": 0.09642, "stage1_bag_acc": 99.71365, "stage1_neg_loss": 0.04247, "stage1_mean_ious": 0.36994, "stage1_s": 0.0, "stage1_m": 0.03878, "stage1_l": 0.20466, "stage1_h": 0.38437, "loss": 0.14258, "grad_norm": 4.09227, "time": 1.67821}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04318, "stage0_loss_instance_mil": 0.00246, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.40203, "stage0_s": 0.0, "stage0_m": 0.03224, "stage0_l": 0.23953, "stage0_h": 0.41813, "stage1_loss_instance_mil": 0.08412, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03642, "stage1_mean_ious": 0.37984, "stage1_s": 0.0, "stage1_m": 0.03601, "stage1_l": 0.25783, "stage1_h": 0.39069, "loss": 0.123, "grad_norm": 3.77257, "time": 1.63946}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09837, "stage0_loss_instance_mil": 0.00374, "stage0_bag_acc": 99.75714, "stage0_mean_ious": 0.38314, "stage0_s": 0.00142, "stage0_m": 0.06686, "stage0_l": 0.20538, "stage0_h": 0.41354, "stage1_loss_instance_mil": 0.08756, "stage1_bag_acc": 99.72381, "stage1_neg_loss": 0.04162, "stage1_mean_ious": 0.36864, "stage1_s": 0.00228, "stage1_m": 0.07523, "stage1_l": 0.21632, "stage1_h": 0.39272, "loss": 0.13292, "grad_norm": 4.14359, "time": 1.6856}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04483, "stage0_loss_instance_mil": 0.0044, "stage0_bag_acc": 99.69365, "stage0_mean_ious": 0.3937, "stage0_s": 0.0, "stage0_m": 0.04933, "stage0_l": 0.23112, "stage0_h": 0.42144, "stage1_loss_instance_mil": 0.0879, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03825, "stage1_mean_ious": 0.37928, "stage1_s": 0.0, "stage1_m": 0.05308, "stage1_l": 0.2454, "stage1_h": 0.40161, "loss": 0.13054, "grad_norm": 4.06659, "time": 1.68048}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04314, "stage0_loss_instance_mil": 0.00519, "stage0_bag_acc": 99.83304, "stage0_mean_ious": 0.37649, "stage0_s": 0.0, "stage0_m": 0.05933, "stage0_l": 0.23652, "stage0_h": 0.38999, "stage1_loss_instance_mil": 0.09107, "stage1_bag_acc": 99.92, "stage1_neg_loss": 0.04461, "stage1_mean_ious": 0.3589, "stage1_s": 0.0, "stage1_m": 0.06623, "stage1_l": 0.25022, "stage1_h": 0.36772, "loss": 0.14086, "grad_norm": 4.27411, "time": 1.64183}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.113, "bbox_mAP_50": 0.336, "bbox_mAP_75": 0.208, "bbox_mAP_s": 0.088, "bbox_mAP_m": 0.043, "bbox_mAP_l": 0.015, "bbox_mAP_copypaste": "0.113 0.336 0.208 0.088 0.043 0.015"}
