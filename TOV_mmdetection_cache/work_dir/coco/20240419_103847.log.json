{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09329, "stage0_loss_instance_mil": 0.73811, "stage0_bag_acc": 5.07312, "stage0_mean_ious": 0.37128, "stage0_s": 0.0, "stage0_m": 0.07368, "stage0_l": 0.23295, "stage0_h": 0.38859, "stage1_loss_instance_mil": 0.1503, "stage1_bag_acc": 24.88603, "stage1_neg_loss": 0.00099, "stage1_mean_ious": 0.36465, "stage1_s": 0.0, "stage1_m": 0.06579, "stage1_l": 0.23604, "stage1_h": 0.38232, "loss": 0.88939, "grad_norm": 3.32457, "time": 1.70417}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0402, "stage0_loss_instance_mil": 0.62554, "stage0_bag_acc": 46.0975, "stage0_mean_ious": 0.37016, "stage0_s": 0.0, "stage0_m": 0.03736, "stage0_l": 0.25705, "stage0_h": 0.38498, "stage1_loss_instance_mil": 0.21191, "stage1_bag_acc": 24.60958, "stage1_neg_loss": 0.00302, "stage1_mean_ious": 0.35513, "stage1_s": 0.0, "stage1_m": 0.03018, "stage1_l": 0.24016, "stage1_h": 0.37035, "loss": 0.84048, "grad_norm": 3.09485, "time": 1.63318}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04194, "stage0_loss_instance_mil": 0.28064, "stage0_bag_acc": 84.80466, "stage0_mean_ious": 0.40455, "stage0_s": 0.0, "stage0_m": 0.0358, "stage0_l": 0.2169, "stage0_h": 0.42152, "stage1_loss_instance_mil": 0.3395, "stage1_bag_acc": 71.05241, "stage1_neg_loss": 0.05874, "stage1_mean_ious": 0.37147, "stage1_s": 0.0, "stage1_m": 0.03191, "stage1_l": 0.21366, "stage1_h": 0.38596, "loss": 0.67887, "grad_norm": 10.10966, "time": 1.69724}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09527, "stage0_loss_instance_mil": 0.07798, "stage0_bag_acc": 96.42953, "stage0_mean_ious": 0.36688, "stage0_s": 0.00168, "stage0_m": 0.04086, "stage0_l": 0.16104, "stage0_h": 0.38818, "stage1_loss_instance_mil": 0.34752, "stage1_bag_acc": 97.37015, "stage1_neg_loss": 0.09267, "stage1_mean_ious": 0.32304, "stage1_s": 0.00159, "stage1_m": 0.03437, "stage1_l": 0.13386, "stage1_h": 0.34345, "loss": 0.51817, "grad_norm": 14.31763, "time": 1.71937}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.0422, "stage0_loss_instance_mil": 0.07737, "stage0_bag_acc": 95.2471, "stage0_mean_ious": 0.34534, "stage0_s": 0.0, "stage0_m": 0.04893, "stage0_l": 0.13459, "stage0_h": 0.37581, "stage1_loss_instance_mil": 0.30452, "stage1_bag_acc": 96.19641, "stage1_neg_loss": 0.09737, "stage1_mean_ious": 0.30545, "stage1_s": 0.0, "stage1_m": 0.03782, "stage1_l": 0.12283, "stage1_h": 0.33268, "loss": 0.47927, "grad_norm": 15.62283, "time": 1.69483}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04395, "stage0_loss_instance_mil": 0.05669, "stage0_bag_acc": 96.75238, "stage0_mean_ious": 0.3271, "stage0_s": 0.0, "stage0_m": 0.04275, "stage0_l": 0.13338, "stage0_h": 0.34556, "stage1_loss_instance_mil": 0.29423, "stage1_bag_acc": 97.85675, "stage1_neg_loss": 0.08684, "stage1_mean_ious": 0.28823, "stage1_s": 0.0, "stage1_m": 0.0333, "stage1_l": 0.11153, "stage1_h": 0.30686, "loss": 0.43776, "grad_norm": 13.64222, "time": 1.67787}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09358, "stage0_loss_instance_mil": 0.05154, "stage0_bag_acc": 96.95979, "stage0_mean_ious": 0.32168, "stage0_s": 0.0, "stage0_m": 0.05381, "stage0_l": 0.12935, "stage0_h": 0.35147, "stage1_loss_instance_mil": 0.2822, "stage1_bag_acc": 98.03008, "stage1_neg_loss": 0.09335, "stage1_mean_ious": 0.2841, "stage1_s": 0.0, "stage1_m": 0.03741, "stage1_l": 0.1048, "stage1_h": 0.31366, "loss": 0.42708, "grad_norm": 15.78769, "time": 1.72444}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04361, "stage0_loss_instance_mil": 0.03124, "stage0_bag_acc": 98.26029, "stage0_mean_ious": 0.31477, "stage0_s": 0.0, "stage0_m": 0.04155, "stage0_l": 0.12158, "stage0_h": 0.3376, "stage1_loss_instance_mil": 0.29009, "stage1_bag_acc": 98.94561, "stage1_neg_loss": 0.08704, "stage1_mean_ious": 0.2703, "stage1_s": 0.0, "stage1_m": 0.02958, "stage1_l": 0.09346, "stage1_h": 0.29241, "loss": 0.40837, "grad_norm": 15.19718, "time": 1.69462}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04309, "stage0_loss_instance_mil": 0.02222, "stage0_bag_acc": 98.97951, "stage0_mean_ious": 0.29996, "stage0_s": 0.0, "stage0_m": 0.03096, "stage0_l": 0.11078, "stage0_h": 0.32065, "stage1_loss_instance_mil": 0.2637, "stage1_bag_acc": 99.25549, "stage1_neg_loss": 0.07928, "stage1_mean_ious": 0.26412, "stage1_s": 0.0, "stage1_m": 0.02072, "stage1_l": 0.08997, "stage1_h": 0.28413, "loss": 0.3652, "grad_norm": 12.82958, "time": 1.71062}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09737, "stage0_loss_instance_mil": 0.03526, "stage0_bag_acc": 97.89871, "stage0_mean_ious": 0.33842, "stage0_s": 0.00123, "stage0_m": 0.02284, "stage0_l": 0.10052, "stage0_h": 0.3652, "stage1_loss_instance_mil": 0.22413, "stage1_bag_acc": 99.1952, "stage1_neg_loss": 0.07499, "stage1_mean_ious": 0.29758, "stage1_s": 0.00166, "stage1_m": 0.0144, "stage1_l": 0.0794, "stage1_h": 0.32395, "loss": 0.33439, "grad_norm": 11.61367, "time": 1.76872}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04125, "stage0_loss_instance_mil": 0.02231, "stage0_bag_acc": 98.46096, "stage0_mean_ious": 0.32797, "stage0_s": 0.0, "stage0_m": 0.03826, "stage0_l": 0.10051, "stage0_h": 0.35615, "stage1_loss_instance_mil": 0.21048, "stage1_bag_acc": 98.70501, "stage1_neg_loss": 0.07184, "stage1_mean_ious": 0.2948, "stage1_s": 0.0, "stage1_m": 0.02766, "stage1_l": 0.07845, "stage1_h": 0.32266, "loss": 0.30464, "grad_norm": 11.18644, "time": 1.68648}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0424, "stage0_loss_instance_mil": 0.02573, "stage0_bag_acc": 98.4431, "stage0_mean_ious": 0.31471, "stage0_s": 0.0, "stage0_m": 0.03207, "stage0_l": 0.09926, "stage0_h": 0.33715, "stage1_loss_instance_mil": 0.18815, "stage1_bag_acc": 99.1329, "stage1_neg_loss": 0.06924, "stage1_mean_ious": 0.28081, "stage1_s": 0.0, "stage1_m": 0.021, "stage1_l": 0.07329, "stage1_h": 0.30345, "loss": 0.28311, "grad_norm": 10.03851, "time": 1.67741}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09552, "stage0_loss_instance_mil": 0.01331, "stage0_bag_acc": 99.33513, "stage0_mean_ious": 0.34159, "stage0_s": 0.0, "stage0_m": 0.03404, "stage0_l": 0.1127, "stage0_h": 0.3756, "stage1_loss_instance_mil": 0.17522, "stage1_bag_acc": 99.32778, "stage1_neg_loss": 0.06509, "stage1_mean_ious": 0.30397, "stage1_s": 0.0, "stage1_m": 0.0204, "stage1_l": 0.0941, "stage1_h": 0.3365, "loss": 0.25362, "grad_norm": 11.0842, "time": 1.71366}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04297, "stage0_loss_instance_mil": 0.02139, "stage0_bag_acc": 98.93858, "stage0_mean_ious": 0.31717, "stage0_s": 0.0, "stage0_m": 0.03832, "stage0_l": 0.12484, "stage0_h": 0.34543, "stage1_loss_instance_mil": 0.17257, "stage1_bag_acc": 99.17814, "stage1_neg_loss": 0.0741, "stage1_mean_ious": 0.28683, "stage1_s": 0.0, "stage1_m": 0.02535, "stage1_l": 0.10658, "stage1_h": 0.31362, "loss": 0.26807, "grad_norm": 12.18793, "time": 1.66418}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04221, "stage0_loss_instance_mil": 0.01242, "stage0_bag_acc": 99.45775, "stage0_mean_ious": 0.34778, "stage0_s": 0.00133, "stage0_m": 0.04129, "stage0_l": 0.09836, "stage0_h": 0.38229, "stage1_loss_instance_mil": 0.14612, "stage1_bag_acc": 99.81385, "stage1_neg_loss": 0.05516, "stage1_mean_ious": 0.30723, "stage1_s": 0.00107, "stage1_m": 0.02716, "stage1_l": 0.07857, "stage1_h": 0.33961, "loss": 0.2137, "grad_norm": 8.91847, "time": 1.67932}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09044, "stage0_loss_instance_mil": 0.01788, "stage0_bag_acc": 98.89723, "stage0_mean_ious": 0.32667, "stage0_s": 0.00036, "stage0_m": 0.01334, "stage0_l": 0.10496, "stage0_h": 0.35671, "stage1_loss_instance_mil": 0.15386, "stage1_bag_acc": 98.88721, "stage1_neg_loss": 0.06482, "stage1_mean_ious": 0.2921, "stage1_s": 0.00136, "stage1_m": 0.0082, "stage1_l": 0.07776, "stage1_h": 0.32225, "loss": 0.23656, "grad_norm": 11.90097, "time": 1.70429}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04225, "stage0_loss_instance_mil": 0.01447, "stage0_bag_acc": 99.27959, "stage0_mean_ious": 0.29415, "stage0_s": 0.0, "stage0_m": 0.04528, "stage0_l": 0.11607, "stage0_h": 0.32249, "stage1_loss_instance_mil": 0.15061, "stage1_bag_acc": 99.12403, "stage1_neg_loss": 0.05955, "stage1_mean_ious": 0.26481, "stage1_s": 0.0, "stage1_m": 0.03178, "stage1_l": 0.09924, "stage1_h": 0.29161, "loss": 0.22464, "grad_norm": 9.2312, "time": 1.65718}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04327, "stage0_loss_instance_mil": 0.01512, "stage0_bag_acc": 99.11242, "stage0_mean_ious": 0.32437, "stage0_s": 0.0, "stage0_m": 0.02065, "stage0_l": 0.08171, "stage0_h": 0.35507, "stage1_loss_instance_mil": 0.13543, "stage1_bag_acc": 99.31633, "stage1_neg_loss": 0.05765, "stage1_mean_ious": 0.28868, "stage1_s": 0.0, "stage1_m": 0.01428, "stage1_l": 0.06843, "stage1_h": 0.31734, "loss": 0.20821, "grad_norm": 10.04722, "time": 1.66036}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.078, "bbox_mAP_50": 0.225, "bbox_mAP_75": 0.14, "bbox_mAP_s": 0.071, "bbox_mAP_m": 0.039, "bbox_mAP_l": 0.014, "bbox_mAP_copypaste": "0.078 0.225 0.140 0.071 0.039 0.014"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09467, "stage0_loss_instance_mil": 0.00725, "stage0_bag_acc": 99.88889, "stage0_mean_ious": 0.32136, "stage0_s": 0.00028, "stage0_m": 0.0394, "stage0_l": 0.08862, "stage0_h": 0.35626, "stage1_loss_instance_mil": 0.12112, "stage1_bag_acc": 99.3759, "stage1_neg_loss": 0.05014, "stage1_mean_ious": 0.28233, "stage1_s": 0.00132, "stage1_m": 0.02469, "stage1_l": 0.07349, "stage1_h": 0.31476, "loss": 0.1785, "grad_norm": 7.95136, "time": 1.72018}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04412, "stage0_loss_instance_mil": 0.02138, "stage0_bag_acc": 98.79129, "stage0_mean_ious": 0.32993, "stage0_s": 0.0, "stage0_m": 0.01779, "stage0_l": 0.11694, "stage0_h": 0.36015, "stage1_loss_instance_mil": 0.12688, "stage1_bag_acc": 99.05992, "stage1_neg_loss": 0.05098, "stage1_mean_ious": 0.29307, "stage1_s": 0.0, "stage1_m": 0.01181, "stage1_l": 0.10024, "stage1_h": 0.32163, "loss": 0.19923, "grad_norm": 8.70533, "time": 1.70112}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04218, "stage0_loss_instance_mil": 0.01042, "stage0_bag_acc": 99.30265, "stage0_mean_ious": 0.32284, "stage0_s": 0.0, "stage0_m": 0.02649, "stage0_l": 0.08899, "stage0_h": 0.34977, "stage1_loss_instance_mil": 0.10432, "stage1_bag_acc": 99.37738, "stage1_neg_loss": 0.04928, "stage1_mean_ious": 0.28622, "stage1_s": 0.0, "stage1_m": 0.01662, "stage1_l": 0.06861, "stage1_h": 0.31312, "loss": 0.16402, "grad_norm": 7.65587, "time": 1.64072}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09697, "stage0_loss_instance_mil": 0.00701, "stage0_bag_acc": 99.75279, "stage0_mean_ious": 0.35716, "stage0_s": 0.0, "stage0_m": 0.03062, "stage0_l": 0.11129, "stage0_h": 0.38995, "stage1_loss_instance_mil": 0.09983, "stage1_bag_acc": 99.82576, "stage1_neg_loss": 0.05216, "stage1_mean_ious": 0.31434, "stage1_s": 0.0, "stage1_m": 0.01954, "stage1_l": 0.09068, "stage1_h": 0.34434, "loss": 0.15899, "grad_norm": 7.58332, "time": 1.70796}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0426, "stage0_loss_instance_mil": 0.01234, "stage0_bag_acc": 99.55381, "stage0_mean_ious": 0.33696, "stage0_s": 0.0, "stage0_m": 0.03408, "stage0_l": 0.0973, "stage0_h": 0.36947, "stage1_loss_instance_mil": 0.10767, "stage1_bag_acc": 99.50749, "stage1_neg_loss": 0.05126, "stage1_mean_ious": 0.29393, "stage1_s": 0.0, "stage1_m": 0.02336, "stage1_l": 0.07652, "stage1_h": 0.32319, "loss": 0.17127, "grad_norm": 8.11698, "time": 1.65989}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04283, "stage0_loss_instance_mil": 0.00828, "stage0_bag_acc": 99.63504, "stage0_mean_ious": 0.3604, "stage0_s": 0.0, "stage0_m": 0.03403, "stage0_l": 0.09474, "stage0_h": 0.3965, "stage1_loss_instance_mil": 0.11217, "stage1_bag_acc": 99.73504, "stage1_neg_loss": 0.04723, "stage1_mean_ious": 0.31049, "stage1_s": 0.0, "stage1_m": 0.02343, "stage1_l": 0.08194, "stage1_h": 0.3417, "loss": 0.16768, "grad_norm": 7.50932, "time": 1.6301}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09623, "stage0_loss_instance_mil": 0.00715, "stage0_bag_acc": 99.80193, "stage0_mean_ious": 0.36391, "stage0_s": 0.0, "stage0_m": 0.03205, "stage0_l": 0.09577, "stage0_h": 0.397, "stage1_loss_instance_mil": 0.0996, "stage1_bag_acc": 99.67693, "stage1_neg_loss": 0.03944, "stage1_mean_ious": 0.31716, "stage1_s": 0.0, "stage1_m": 0.02364, "stage1_l": 0.08196, "stage1_h": 0.3474, "loss": 0.14619, "grad_norm": 6.86516, "time": 1.74783}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04339, "stage0_loss_instance_mil": 0.00788, "stage0_bag_acc": 99.34624, "stage0_mean_ious": 0.38975, "stage0_s": 0.0, "stage0_m": 0.02359, "stage0_l": 0.09414, "stage0_h": 0.42001, "stage1_loss_instance_mil": 0.07982, "stage1_bag_acc": 99.66974, "stage1_neg_loss": 0.04068, "stage1_mean_ious": 0.33905, "stage1_s": 0.0, "stage1_m": 0.01404, "stage1_l": 0.07972, "stage1_h": 0.36577, "loss": 0.12838, "grad_norm": 5.64732, "time": 1.69325}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04506, "stage0_loss_instance_mil": 0.0055, "stage0_bag_acc": 99.56232, "stage0_mean_ious": 0.37283, "stage0_s": 0.0, "stage0_m": 0.04257, "stage0_l": 0.10785, "stage0_h": 0.41367, "stage1_loss_instance_mil": 0.08593, "stage1_bag_acc": 99.8114, "stage1_neg_loss": 0.03789, "stage1_mean_ious": 0.32579, "stage1_s": 0.0, "stage1_m": 0.03134, "stage1_l": 0.09044, "stage1_h": 0.3619, "loss": 0.12932, "grad_norm": 5.12086, "time": 1.68506}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09434, "stage0_loss_instance_mil": 0.00591, "stage0_bag_acc": 99.47487, "stage0_mean_ious": 0.38022, "stage0_s": 0.0, "stage0_m": 0.04267, "stage0_l": 0.09881, "stage0_h": 0.42743, "stage1_loss_instance_mil": 0.07464, "stage1_bag_acc": 99.69208, "stage1_neg_loss": 0.0372, "stage1_mean_ious": 0.33836, "stage1_s": 0.0, "stage1_m": 0.02753, "stage1_l": 0.07862, "stage1_h": 0.38211, "loss": 0.11776, "grad_norm": 4.83884, "time": 1.72791}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04408, "stage0_loss_instance_mil": 0.014, "stage0_bag_acc": 99.65079, "stage0_mean_ious": 0.3871, "stage0_s": 0.0, "stage0_m": 0.03076, "stage0_l": 0.11672, "stage0_h": 0.42125, "stage1_loss_instance_mil": 0.07261, "stage1_bag_acc": 99.7619, "stage1_neg_loss": 0.04174, "stage1_mean_ious": 0.33363, "stage1_s": 0.0, "stage1_m": 0.02198, "stage1_l": 0.11173, "stage1_h": 0.36354, "loss": 0.12835, "grad_norm": 5.82156, "time": 1.69189}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04266, "stage0_loss_instance_mil": 0.0034, "stage0_bag_acc": 99.81304, "stage0_mean_ious": 0.3671, "stage0_s": 0.0, "stage0_m": 0.03153, "stage0_l": 0.11096, "stage0_h": 0.404, "stage1_loss_instance_mil": 0.08205, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04003, "stage1_mean_ious": 0.3211, "stage1_s": 0.0, "stage1_m": 0.02155, "stage1_l": 0.09489, "stage1_h": 0.35433, "loss": 0.12548, "grad_norm": 5.56457, "time": 1.65635}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09559, "stage0_loss_instance_mil": 0.004, "stage0_bag_acc": 99.69231, "stage0_mean_ious": 0.39198, "stage0_s": 0.0, "stage0_m": 0.0243, "stage0_l": 0.1044, "stage0_h": 0.43047, "stage1_loss_instance_mil": 0.07584, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.0391, "stage1_mean_ious": 0.34723, "stage1_s": 0.0, "stage1_m": 0.01708, "stage1_l": 0.08788, "stage1_h": 0.38302, "loss": 0.11895, "grad_norm": 5.5471, "time": 1.69096}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0413, "stage0_loss_instance_mil": 0.00323, "stage0_bag_acc": 99.77576, "stage0_mean_ious": 0.38775, "stage0_s": 0.0, "stage0_m": 0.03172, "stage0_l": 0.09517, "stage0_h": 0.42422, "stage1_loss_instance_mil": 0.07329, "stage1_bag_acc": 99.58052, "stage1_neg_loss": 0.03937, "stage1_mean_ious": 0.34052, "stage1_s": 0.0, "stage1_m": 0.02443, "stage1_l": 0.07949, "stage1_h": 0.37376, "loss": 0.11589, "grad_norm": 5.27538, "time": 1.66337}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04076, "stage0_loss_instance_mil": 0.00335, "stage0_bag_acc": 99.67836, "stage0_mean_ious": 0.39532, "stage0_s": 0.0, "stage0_m": 0.04534, "stage0_l": 0.10331, "stage0_h": 0.43998, "stage1_loss_instance_mil": 0.07208, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03671, "stage1_mean_ious": 0.34377, "stage1_s": 0.0, "stage1_m": 0.03166, "stage1_l": 0.08538, "stage1_h": 0.38426, "loss": 0.11214, "grad_norm": 5.20397, "time": 1.66696}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09535, "stage0_loss_instance_mil": 0.00349, "stage0_bag_acc": 99.64706, "stage0_mean_ious": 0.39349, "stage0_s": 0.0, "stage0_m": 0.02208, "stage0_l": 0.11419, "stage0_h": 0.43214, "stage1_loss_instance_mil": 0.06522, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04194, "stage1_mean_ious": 0.3452, "stage1_s": 0.0, "stage1_m": 0.01288, "stage1_l": 0.09309, "stage1_h": 0.38105, "loss": 0.11065, "grad_norm": 5.15252, "time": 1.71396}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04303, "stage0_loss_instance_mil": 0.0062, "stage0_bag_acc": 99.81304, "stage0_mean_ious": 0.41718, "stage0_s": 0.0, "stage0_m": 0.03528, "stage0_l": 0.10576, "stage0_h": 0.45877, "stage1_loss_instance_mil": 0.06945, "stage1_bag_acc": 99.78889, "stage1_neg_loss": 0.0387, "stage1_mean_ious": 0.36915, "stage1_s": 0.0, "stage1_m": 0.02503, "stage1_l": 0.08753, "stage1_h": 0.40726, "loss": 0.11435, "grad_norm": 5.37774, "time": 1.69269}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04482, "stage0_loss_instance_mil": 0.00214, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.35829, "stage0_s": 0.0, "stage0_m": 0.03942, "stage0_l": 0.10204, "stage0_h": 0.39718, "stage1_loss_instance_mil": 0.07049, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.03398, "stage1_mean_ious": 0.30651, "stage1_s": 0.0, "stage1_m": 0.0282, "stage1_l": 0.08547, "stage1_h": 0.34148, "loss": 0.10662, "grad_norm": 4.83155, "time": 1.68259}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.077, "bbox_mAP_50": 0.228, "bbox_mAP_75": 0.147, "bbox_mAP_s": 0.061, "bbox_mAP_m": 0.031, "bbox_mAP_l": 0.01, "bbox_mAP_copypaste": "0.077 0.228 0.147 0.061 0.031 0.010"}
