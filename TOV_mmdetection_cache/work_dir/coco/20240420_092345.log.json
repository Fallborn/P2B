{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.72033, "stage0_loss_instance_mil": 0.75517, "stage0_bag_acc": 3.71566, "stage0_mean_ious": 0.44072, "stage0_s": 0.0, "stage0_m": 0.05576, "stage0_l": 0.21806, "stage0_h": 0.45995, "stage1_loss_instance_mil": 0.1507, "stage1_bag_acc": 29.22368, "stage1_neg_loss": 0.0009, "stage1_mean_ious": 0.41047, "stage1_s": 0.0, "stage1_m": 0.05243, "stage1_l": 0.20827, "stage1_h": 0.42785, "loss": 0.90677, "grad_norm": 3.49673, "time": 6.35769}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.13803, "stage0_loss_instance_mil": 0.59673, "stage0_bag_acc": 58.70916, "stage0_mean_ious": 0.45913, "stage0_s": 0.0, "stage0_m": 0.03951, "stage0_l": 0.27686, "stage0_h": 0.48023, "stage1_loss_instance_mil": 0.23906, "stage1_bag_acc": 23.86054, "stage1_neg_loss": 0.00259, "stage1_mean_ious": 0.43474, "stage1_s": 0.0, "stage1_m": 0.0382, "stage1_l": 0.26525, "stage1_h": 0.45593, "loss": 0.83839, "grad_norm": 3.4796, "time": 2.44916}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.45196, "stage0_loss_instance_mil": 0.28214, "stage0_bag_acc": 83.11545, "stage0_mean_ious": 0.42981, "stage0_s": 0.0, "stage0_m": 0.03003, "stage0_l": 0.27122, "stage0_h": 0.45239, "stage1_loss_instance_mil": 0.30714, "stage1_bag_acc": 73.03723, "stage1_neg_loss": 0.05814, "stage1_mean_ious": 0.40625, "stage1_s": 0.0, "stage1_m": 0.02872, "stage1_l": 0.24586, "stage1_h": 0.42897, "loss": 0.64742, "grad_norm": 8.71885, "time": 5.06198}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.46458, "stage0_loss_instance_mil": 0.08024, "stage0_bag_acc": 96.41009, "stage0_mean_ious": 0.43335, "stage0_s": 0.0, "stage0_m": 0.04241, "stage0_l": 0.21513, "stage0_h": 0.46485, "stage1_loss_instance_mil": 0.30181, "stage1_bag_acc": 97.25436, "stage1_neg_loss": 0.08906, "stage1_mean_ious": 0.40069, "stage1_s": 0.0, "stage1_m": 0.03401, "stage1_l": 0.21607, "stage1_h": 0.4267, "loss": 0.47112, "grad_norm": 12.33057, "time": 4.30542}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.06452, "stage0_loss_instance_mil": 0.0658, "stage0_bag_acc": 96.84579, "stage0_mean_ious": 0.44764, "stage0_s": 0.0, "stage0_m": 0.04656, "stage0_l": 0.19795, "stage0_h": 0.48611, "stage1_loss_instance_mil": 0.26176, "stage1_bag_acc": 98.12354, "stage1_neg_loss": 0.06812, "stage1_mean_ious": 0.41513, "stage1_s": 0.0, "stage1_m": 0.03503, "stage1_l": 0.2071, "stage1_h": 0.44795, "loss": 0.39568, "grad_norm": 9.82142, "time": 1.96761}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.45065, "stage0_loss_instance_mil": 0.04954, "stage0_bag_acc": 97.80877, "stage0_mean_ious": 0.46016, "stage0_s": 0.0, "stage0_m": 0.03628, "stage0_l": 0.1535, "stage0_h": 0.49658, "stage1_loss_instance_mil": 0.28138, "stage1_bag_acc": 98.53371, "stage1_neg_loss": 0.09173, "stage1_mean_ious": 0.4257, "stage1_s": 0.0, "stage1_m": 0.02604, "stage1_l": 0.14521, "stage1_h": 0.4589, "loss": 0.42265, "grad_norm": 15.08811, "time": 5.37}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 0.43404, "stage0_loss_instance_mil": 0.05531, "stage0_bag_acc": 96.67596, "stage0_mean_ious": 0.47754, "stage0_s": 0.0, "stage0_m": 0.0471, "stage0_l": 0.20208, "stage0_h": 0.51248, "stage1_loss_instance_mil": 0.2229, "stage1_bag_acc": 97.53376, "stage1_neg_loss": 0.07442, "stage1_mean_ious": 0.44019, "stage1_s": 0.0, "stage1_m": 0.03708, "stage1_l": 0.19736, "stage1_h": 0.47247, "loss": 0.35263, "grad_norm": 10.91545, "time": 4.02024}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.22737, "stage0_loss_instance_mil": 0.03383, "stage0_bag_acc": 97.657, "stage0_mean_ious": 0.47434, "stage0_s": 0.0, "stage0_m": 0.02417, "stage0_l": 0.21387, "stage0_h": 0.51928, "stage1_loss_instance_mil": 0.18823, "stage1_bag_acc": 99.18513, "stage1_neg_loss": 0.07361, "stage1_mean_ious": 0.44743, "stage1_s": 0.0, "stage1_m": 0.02259, "stage1_l": 0.20902, "stage1_h": 0.48845, "loss": 0.29568, "grad_norm": 13.0405, "time": 3.27187}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.40063, "stage0_loss_instance_mil": 0.03305, "stage0_bag_acc": 98.06445, "stage0_mean_ious": 0.51078, "stage0_s": 0.0, "stage0_m": 0.04067, "stage0_l": 0.20198, "stage0_h": 0.55602, "stage1_loss_instance_mil": 0.18884, "stage1_bag_acc": 98.55502, "stage1_neg_loss": 0.06022, "stage1_mean_ious": 0.48386, "stage1_s": 0.0, "stage1_m": 0.02574, "stage1_l": 0.20233, "stage1_h": 0.5274, "loss": 0.2821, "grad_norm": 13.59984, "time": 5.38815}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.2879, "stage0_loss_instance_mil": 0.04906, "stage0_bag_acc": 97.36816, "stage0_mean_ious": 0.51313, "stage0_s": 0.0, "stage0_m": 0.02129, "stage0_l": 0.21283, "stage0_h": 0.53391, "stage1_loss_instance_mil": 0.14898, "stage1_bag_acc": 97.48401, "stage1_neg_loss": 0.05574, "stage1_mean_ious": 0.4925, "stage1_s": 0.0, "stage1_m": 0.01557, "stage1_l": 0.21331, "stage1_h": 0.51089, "loss": 0.25378, "grad_norm": 11.26237, "time": 2.78724}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.38257, "stage0_loss_instance_mil": 0.02386, "stage0_bag_acc": 98.75116, "stage0_mean_ious": 0.50424, "stage0_s": 0.0, "stage0_m": 0.04685, "stage0_l": 0.19644, "stage0_h": 0.54173, "stage1_loss_instance_mil": 0.14889, "stage1_bag_acc": 99.28195, "stage1_neg_loss": 0.06246, "stage1_mean_ious": 0.4812, "stage1_s": 0.0, "stage1_m": 0.03483, "stage1_l": 0.19452, "stage1_h": 0.51618, "loss": 0.23521, "grad_norm": 11.85142, "time": 4.77915}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.49185, "stage0_loss_instance_mil": 0.03174, "stage0_bag_acc": 98.08407, "stage0_mean_ious": 0.46401, "stage0_s": 0.00117, "stage0_m": 0.0459, "stage0_l": 0.22326, "stage0_h": 0.506, "stage1_loss_instance_mil": 0.13193, "stage1_bag_acc": 98.65442, "stage1_neg_loss": 0.05816, "stage1_mean_ious": 0.44319, "stage1_s": 0.00113, "stage1_m": 0.04088, "stage1_l": 0.21845, "stage1_h": 0.48363, "loss": 0.22183, "grad_norm": 9.8419, "time": 5.33278}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.20264, "stage0_loss_instance_mil": 0.01435, "stage0_bag_acc": 99.3182, "stage0_mean_ious": 0.47951, "stage0_s": 0.0, "stage0_m": 0.04193, "stage0_l": 0.17872, "stage0_h": 0.51459, "stage1_loss_instance_mil": 0.1112, "stage1_bag_acc": 99.11249, "stage1_neg_loss": 0.04931, "stage1_mean_ious": 0.45347, "stage1_s": 0.0, "stage1_m": 0.03084, "stage1_l": 0.16831, "stage1_h": 0.48837, "loss": 0.17486, "grad_norm": 10.07262, "time": 2.37551}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.4338, "stage0_loss_instance_mil": 0.02013, "stage0_bag_acc": 98.96211, "stage0_mean_ious": 0.51683, "stage0_s": 0.0, "stage0_m": 0.0374, "stage0_l": 0.22197, "stage0_h": 0.55123, "stage1_loss_instance_mil": 0.12269, "stage1_bag_acc": 98.54127, "stage1_neg_loss": 0.05124, "stage1_mean_ious": 0.49265, "stage1_s": 0.0, "stage1_m": 0.03625, "stage1_l": 0.22031, "stage1_h": 0.52495, "loss": 0.19406, "grad_norm": 8.79026, "time": 4.84317}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.32819, "stage0_loss_instance_mil": 0.01212, "stage0_bag_acc": 99.33545, "stage0_mean_ious": 0.49965, "stage0_s": 0.0, "stage0_m": 0.02966, "stage0_l": 0.20709, "stage0_h": 0.53775, "stage1_loss_instance_mil": 0.09945, "stage1_bag_acc": 99.37511, "stage1_neg_loss": 0.04112, "stage1_mean_ious": 0.47906, "stage1_s": 0.0, "stage1_m": 0.01996, "stage1_l": 0.19294, "stage1_h": 0.51769, "loss": 0.15269, "grad_norm": 7.51367, "time": 4.05478}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.16583, "stage0_loss_instance_mil": 0.00857, "stage0_bag_acc": 99.56339, "stage0_mean_ious": 0.52556, "stage0_s": 0.0, "stage0_m": 0.03462, "stage0_l": 0.21512, "stage0_h": 0.56327, "stage1_loss_instance_mil": 0.08366, "stage1_bag_acc": 99.57863, "stage1_neg_loss": 0.04509, "stage1_mean_ious": 0.50644, "stage1_s": 0.0, "stage1_m": 0.02338, "stage1_l": 0.21131, "stage1_h": 0.5448, "loss": 0.13733, "grad_norm": 8.90287, "time": 1.95191}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.43454, "stage0_loss_instance_mil": 0.01199, "stage0_bag_acc": 99.42026, "stage0_mean_ious": 0.54109, "stage0_s": 0.0, "stage0_m": 0.02905, "stage0_l": 0.21911, "stage0_h": 0.58206, "stage1_loss_instance_mil": 0.09775, "stage1_bag_acc": 99.35699, "stage1_neg_loss": 0.04222, "stage1_mean_ious": 0.51111, "stage1_s": 0.0, "stage1_m": 0.02008, "stage1_l": 0.2133, "stage1_h": 0.54988, "loss": 0.15196, "grad_norm": 8.57536, "time": 4.95763}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.45205, "stage0_loss_instance_mil": 0.01708, "stage0_bag_acc": 98.75873, "stage0_mean_ious": 0.52474, "stage0_s": 0.0, "stage0_m": 0.04754, "stage0_l": 0.18185, "stage0_h": 0.57187, "stage1_loss_instance_mil": 0.09041, "stage1_bag_acc": 98.61037, "stage1_neg_loss": 0.04319, "stage1_mean_ious": 0.49142, "stage1_s": 0.0, "stage1_m": 0.04497, "stage1_l": 0.17273, "stage1_h": 0.5349, "loss": 0.15069, "grad_norm": 8.21807, "time": 5.34411}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.261, "bbox_mAP_50": 0.563, "bbox_mAP_75": 0.444, "bbox_mAP_s": 0.296, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.139, "bbox_mAP_copypaste": "0.261 0.563 0.444 0.296 0.217 0.139"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.45046, "stage0_loss_instance_mil": 0.01559, "stage0_bag_acc": 98.99741, "stage0_mean_ious": 0.56526, "stage0_s": 0.0, "stage0_m": 0.04273, "stage0_l": 0.21667, "stage0_h": 0.61513, "stage1_loss_instance_mil": 0.08672, "stage1_bag_acc": 99.44117, "stage1_neg_loss": 0.04327, "stage1_mean_ious": 0.5212, "stage1_s": 0.0, "stage1_m": 0.03561, "stage1_l": 0.20596, "stage1_h": 0.56535, "loss": 0.14559, "grad_norm": 7.51197, "time": 4.0792}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.12571, "stage0_loss_instance_mil": 0.01364, "stage0_bag_acc": 99.22381, "stage0_mean_ious": 0.5666, "stage0_s": 0.0, "stage0_m": 0.03015, "stage0_l": 0.23502, "stage0_h": 0.6164, "stage1_loss_instance_mil": 0.06999, "stage1_bag_acc": 98.96415, "stage1_neg_loss": 0.03383, "stage1_mean_ious": 0.52809, "stage1_s": 0.0, "stage1_m": 0.02235, "stage1_l": 0.23045, "stage1_h": 0.57296, "loss": 0.11746, "grad_norm": 6.71232, "time": 2.47389}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.55454, "stage0_loss_instance_mil": 0.01093, "stage0_bag_acc": 99.60318, "stage0_mean_ious": 0.54728, "stage0_s": 0.0, "stage0_m": 0.02996, "stage0_l": 0.18397, "stage0_h": 0.58892, "stage1_loss_instance_mil": 0.07355, "stage1_bag_acc": 99.31428, "stage1_neg_loss": 0.03352, "stage1_mean_ious": 0.53034, "stage1_s": 0.0, "stage1_m": 0.01974, "stage1_l": 0.18675, "stage1_h": 0.57151, "loss": 0.118, "grad_norm": 7.01356, "time": 6.01817}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.29364, "stage0_loss_instance_mil": 0.00501, "stage0_bag_acc": 99.78947, "stage0_mean_ious": 0.52735, "stage0_s": 0.0, "stage0_m": 0.02788, "stage0_l": 0.21829, "stage0_h": 0.56643, "stage1_loss_instance_mil": 0.06998, "stage1_bag_acc": 99.75466, "stage1_neg_loss": 0.03345, "stage1_mean_ious": 0.50662, "stage1_s": 0.0, "stage1_m": 0.02285, "stage1_l": 0.21814, "stage1_h": 0.54279, "loss": 0.10845, "grad_norm": 5.71459, "time": 3.10824}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.36689, "stage0_loss_instance_mil": 0.0113, "stage0_bag_acc": 99.57659, "stage0_mean_ious": 0.49745, "stage0_s": 0.0, "stage0_m": 0.04829, "stage0_l": 0.1675, "stage0_h": 0.54699, "stage1_loss_instance_mil": 0.08172, "stage1_bag_acc": 99.46566, "stage1_neg_loss": 0.03967, "stage1_mean_ious": 0.47114, "stage1_s": 0.0, "stage1_m": 0.03252, "stage1_l": 0.16632, "stage1_h": 0.51761, "loss": 0.13269, "grad_norm": 7.81027, "time": 3.98849}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.61008, "stage0_loss_instance_mil": 0.00861, "stage0_bag_acc": 99.51659, "stage0_mean_ious": 0.51818, "stage0_s": 0.0, "stage0_m": 0.01985, "stage0_l": 0.18161, "stage0_h": 0.55474, "stage1_loss_instance_mil": 0.07004, "stage1_bag_acc": 99.41639, "stage1_neg_loss": 0.03842, "stage1_mean_ious": 0.48791, "stage1_s": 0.0, "stage1_m": 0.01318, "stage1_l": 0.18855, "stage1_h": 0.52177, "loss": 0.11707, "grad_norm": 6.91322, "time": 5.92682}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.18832, "stage0_loss_instance_mil": 0.0051, "stage0_bag_acc": 99.70426, "stage0_mean_ious": 0.51202, "stage0_s": 0.0, "stage0_m": 0.03421, "stage0_l": 0.21288, "stage0_h": 0.55418, "stage1_loss_instance_mil": 0.06401, "stage1_bag_acc": 99.62338, "stage1_neg_loss": 0.03676, "stage1_mean_ious": 0.47782, "stage1_s": 0.0, "stage1_m": 0.02692, "stage1_l": 0.20266, "stage1_h": 0.51715, "loss": 0.10587, "grad_norm": 5.81268, "time": 2.00209}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.44157, "stage0_loss_instance_mil": 0.00388, "stage0_bag_acc": 99.68804, "stage0_mean_ious": 0.53192, "stage0_s": 0.0, "stage0_m": 0.03153, "stage0_l": 0.19722, "stage0_h": 0.58509, "stage1_loss_instance_mil": 0.06508, "stage1_bag_acc": 99.62383, "stage1_neg_loss": 0.03327, "stage1_mean_ious": 0.49382, "stage1_s": 0.0, "stage1_m": 0.0237, "stage1_l": 0.19258, "stage1_h": 0.54208, "loss": 0.10223, "grad_norm": 5.03695, "time": 5.34153}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.51367, "stage0_loss_instance_mil": 0.00758, "stage0_bag_acc": 99.60859, "stage0_mean_ious": 0.51913, "stage0_s": 0.0017, "stage0_m": 0.04241, "stage0_l": 0.21721, "stage0_h": 0.57401, "stage1_loss_instance_mil": 0.05791, "stage1_bag_acc": 99.62163, "stage1_neg_loss": 0.02888, "stage1_mean_ious": 0.48987, "stage1_s": 0.00193, "stage1_m": 0.0332, "stage1_l": 0.21665, "stage1_h": 0.54095, "loss": 0.09436, "grad_norm": 4.67446, "time": 5.37634}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.24287, "stage0_loss_instance_mil": 0.00207, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.52232, "stage0_s": 0.0, "stage0_m": 0.03967, "stage0_l": 0.24325, "stage0_h": 0.5651, "stage1_loss_instance_mil": 0.04933, "stage1_bag_acc": 99.7381, "stage1_neg_loss": 0.03051, "stage1_mean_ious": 0.48433, "stage1_s": 0.0, "stage1_m": 0.02928, "stage1_l": 0.23777, "stage1_h": 0.52264, "loss": 0.08191, "grad_norm": 4.67762, "time": 2.90551}
