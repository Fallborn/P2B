{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09455, "stage0_loss_instance_mil": 0.69319, "stage0_bag_acc": 23.69564, "stage0_mean_ious": 0.29266, "stage0_s": 0.0, "stage0_m": 0.02009, "stage0_l": 0.18534, "stage0_h": 0.30252, "stage1_loss_instance_mil": 0.17702, "stage1_bag_acc": 28.69028, "stage1_neg_loss": 0.00187, "stage1_mean_ious": 0.28589, "stage1_s": 0.0, "stage1_m": 0.02067, "stage1_l": 0.18667, "stage1_h": 0.29429, "loss": 0.87208, "grad_norm": 3.44767, "time": 1.68564}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04113, "stage0_loss_instance_mil": 0.56709, "stage0_bag_acc": 67.34153, "stage0_mean_ious": 0.36942, "stage0_s": 0.0, "stage0_m": 0.0224, "stage0_l": 0.23882, "stage0_h": 0.38953, "stage1_loss_instance_mil": 0.23816, "stage1_bag_acc": 27.1287, "stage1_neg_loss": 0.00952, "stage1_mean_ious": 0.34709, "stage1_s": 0.0, "stage1_m": 0.02647, "stage1_l": 0.23508, "stage1_h": 0.36409, "loss": 0.81478, "grad_norm": 4.64871, "time": 1.68545}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04315, "stage0_loss_instance_mil": 0.22738, "stage0_bag_acc": 92.53883, "stage0_mean_ious": 0.42231, "stage0_s": 0.0, "stage0_m": 0.05478, "stage0_l": 0.26075, "stage0_h": 0.44291, "stage1_loss_instance_mil": 0.36935, "stage1_bag_acc": 79.37819, "stage1_neg_loss": 0.08959, "stage1_mean_ious": 0.39812, "stage1_s": 0.0, "stage1_m": 0.04962, "stage1_l": 0.25816, "stage1_h": 0.41672, "loss": 0.68632, "grad_norm": 13.76995, "time": 1.71106}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.093, "stage0_loss_instance_mil": 0.0764, "stage0_bag_acc": 96.55851, "stage0_mean_ious": 0.4257, "stage0_s": 0.0, "stage0_m": 0.04846, "stage0_l": 0.21666, "stage0_h": 0.44902, "stage1_loss_instance_mil": 0.32806, "stage1_bag_acc": 97.65813, "stage1_neg_loss": 0.08587, "stage1_mean_ious": 0.40615, "stage1_s": 0.0, "stage1_m": 0.04077, "stage1_l": 0.19291, "stage1_h": 0.4305, "loss": 0.49033, "grad_norm": 13.50755, "time": 1.77736}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04168, "stage0_loss_instance_mil": 0.06559, "stage0_bag_acc": 95.84554, "stage0_mean_ious": 0.43574, "stage0_s": 0.0, "stage0_m": 0.06535, "stage0_l": 0.18018, "stage0_h": 0.4738, "stage1_loss_instance_mil": 0.31641, "stage1_bag_acc": 97.53952, "stage1_neg_loss": 0.08617, "stage1_mean_ious": 0.40629, "stage1_s": 0.0, "stage1_m": 0.05388, "stage1_l": 0.16612, "stage1_h": 0.44324, "loss": 0.46817, "grad_norm": 16.20779, "time": 1.6529}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04205, "stage0_loss_instance_mil": 0.05327, "stage0_bag_acc": 96.61972, "stage0_mean_ious": 0.464, "stage0_s": 0.0, "stage0_m": 0.02262, "stage0_l": 0.2053, "stage0_h": 0.49601, "stage1_loss_instance_mil": 0.26844, "stage1_bag_acc": 97.76918, "stage1_neg_loss": 0.08859, "stage1_mean_ious": 0.43995, "stage1_s": 0.0, "stage1_m": 0.02208, "stage1_l": 0.20565, "stage1_h": 0.46753, "loss": 0.41029, "grad_norm": 15.63276, "time": 1.66081}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09592, "stage0_loss_instance_mil": 0.04411, "stage0_bag_acc": 97.21105, "stage0_mean_ious": 0.47492, "stage0_s": 0.0, "stage0_m": 0.02431, "stage0_l": 0.19083, "stage0_h": 0.51477, "stage1_loss_instance_mil": 0.27078, "stage1_bag_acc": 98.6309, "stage1_neg_loss": 0.08359, "stage1_mean_ious": 0.44463, "stage1_s": 0.0, "stage1_m": 0.01841, "stage1_l": 0.18306, "stage1_h": 0.48162, "loss": 0.39847, "grad_norm": 18.12629, "time": 1.70307}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04062, "stage0_loss_instance_mil": 0.04844, "stage0_bag_acc": 97.42128, "stage0_mean_ious": 0.49544, "stage0_s": 0.0, "stage0_m": 0.02973, "stage0_l": 0.20731, "stage0_h": 0.53711, "stage1_loss_instance_mil": 0.20285, "stage1_bag_acc": 98.34412, "stage1_neg_loss": 0.08326, "stage1_mean_ious": 0.45431, "stage1_s": 0.0, "stage1_m": 0.02049, "stage1_l": 0.19416, "stage1_h": 0.49333, "loss": 0.33455, "grad_norm": 17.93413, "time": 1.61467}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04177, "stage0_loss_instance_mil": 0.0359, "stage0_bag_acc": 97.76853, "stage0_mean_ious": 0.51576, "stage0_s": 0.0, "stage0_m": 0.02772, "stage0_l": 0.19808, "stage0_h": 0.55381, "stage1_loss_instance_mil": 0.20584, "stage1_bag_acc": 98.46839, "stage1_neg_loss": 0.0778, "stage1_mean_ious": 0.48101, "stage1_s": 0.0, "stage1_m": 0.03068, "stage1_l": 0.18874, "stage1_h": 0.51673, "loss": 0.31953, "grad_norm": 17.60847, "time": 1.6503}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09523, "stage0_loss_instance_mil": 0.03105, "stage0_bag_acc": 98.17335, "stage0_mean_ious": 0.50327, "stage0_s": 0.0, "stage0_m": 0.0593, "stage0_l": 0.1149, "stage0_h": 0.549, "stage1_loss_instance_mil": 0.20384, "stage1_bag_acc": 98.37145, "stage1_neg_loss": 0.08866, "stage1_mean_ious": 0.46456, "stage1_s": 0.0, "stage1_m": 0.05095, "stage1_l": 0.10171, "stage1_h": 0.50856, "loss": 0.32356, "grad_norm": 19.2117, "time": 1.69663}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04173, "stage0_loss_instance_mil": 0.01787, "stage0_bag_acc": 98.84443, "stage0_mean_ious": 0.47023, "stage0_s": 0.0, "stage0_m": 0.0269, "stage0_l": 0.16012, "stage0_h": 0.51226, "stage1_loss_instance_mil": 0.19041, "stage1_bag_acc": 99.09944, "stage1_neg_loss": 0.07169, "stage1_mean_ious": 0.43263, "stage1_s": 0.0, "stage1_m": 0.02039, "stage1_l": 0.14781, "stage1_h": 0.4715, "loss": 0.27997, "grad_norm": 13.95688, "time": 1.70057}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0424, "stage0_loss_instance_mil": 0.02608, "stage0_bag_acc": 98.21843, "stage0_mean_ious": 0.52936, "stage0_s": 0.00117, "stage0_m": 0.04366, "stage0_l": 0.18749, "stage0_h": 0.57678, "stage1_loss_instance_mil": 0.14739, "stage1_bag_acc": 99.07254, "stage1_neg_loss": 0.05303, "stage1_mean_ious": 0.48764, "stage1_s": 0.00115, "stage1_m": 0.03337, "stage1_l": 0.17628, "stage1_h": 0.53081, "loss": 0.2265, "grad_norm": 11.17343, "time": 1.66833}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09778, "stage0_loss_instance_mil": 0.02074, "stage0_bag_acc": 98.81414, "stage0_mean_ious": 0.49419, "stage0_s": 0.0, "stage0_m": 0.05135, "stage0_l": 0.19592, "stage0_h": 0.55247, "stage1_loss_instance_mil": 0.15731, "stage1_bag_acc": 99.1594, "stage1_neg_loss": 0.06019, "stage1_mean_ious": 0.45476, "stage1_s": 0.0, "stage1_m": 0.03507, "stage1_l": 0.1888, "stage1_h": 0.50835, "loss": 0.23824, "grad_norm": 11.5805, "time": 1.74788}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04287, "stage0_loss_instance_mil": 0.01776, "stage0_bag_acc": 99.45056, "stage0_mean_ious": 0.53579, "stage0_s": 0.0, "stage0_m": 0.01519, "stage0_l": 0.18561, "stage0_h": 0.57857, "stage1_loss_instance_mil": 0.14063, "stage1_bag_acc": 99.59124, "stage1_neg_loss": 0.05406, "stage1_mean_ious": 0.4961, "stage1_s": 0.0, "stage1_m": 0.01031, "stage1_l": 0.17779, "stage1_h": 0.53443, "loss": 0.21245, "grad_norm": 9.82537, "time": 1.68875}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04202, "stage0_loss_instance_mil": 0.01873, "stage0_bag_acc": 98.61424, "stage0_mean_ious": 0.50784, "stage0_s": 0.0, "stage0_m": 0.033, "stage0_l": 0.15642, "stage0_h": 0.55907, "stage1_loss_instance_mil": 0.15107, "stage1_bag_acc": 99.62363, "stage1_neg_loss": 0.06328, "stage1_mean_ious": 0.46835, "stage1_s": 0.0, "stage1_m": 0.0222, "stage1_l": 0.14996, "stage1_h": 0.51427, "loss": 0.23308, "grad_norm": 13.00408, "time": 1.69131}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09497, "stage0_loss_instance_mil": 0.02549, "stage0_bag_acc": 98.58861, "stage0_mean_ious": 0.54919, "stage0_s": 0.0, "stage0_m": 0.0514, "stage0_l": 0.16028, "stage0_h": 0.59352, "stage1_loss_instance_mil": 0.12367, "stage1_bag_acc": 98.51534, "stage1_neg_loss": 0.05419, "stage1_mean_ious": 0.504, "stage1_s": 0.0, "stage1_m": 0.05136, "stage1_l": 0.15381, "stage1_h": 0.54309, "loss": 0.20335, "grad_norm": 10.14904, "time": 1.75938}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04153, "stage0_loss_instance_mil": 0.0113, "stage0_bag_acc": 99.47209, "stage0_mean_ious": 0.54545, "stage0_s": 0.0, "stage0_m": 0.03337, "stage0_l": 0.18358, "stage0_h": 0.59717, "stage1_loss_instance_mil": 0.09727, "stage1_bag_acc": 99.48211, "stage1_neg_loss": 0.04347, "stage1_mean_ious": 0.51193, "stage1_s": 0.0, "stage1_m": 0.02396, "stage1_l": 0.18002, "stage1_h": 0.55957, "loss": 0.15204, "grad_norm": 8.15023, "time": 1.68732}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04206, "stage0_loss_instance_mil": 0.02915, "stage0_bag_acc": 98.33453, "stage0_mean_ious": 0.56693, "stage0_s": 0.0, "stage0_m": 0.03956, "stage0_l": 0.20962, "stage0_h": 0.61495, "stage1_loss_instance_mil": 0.11492, "stage1_bag_acc": 98.98753, "stage1_neg_loss": 0.04327, "stage1_mean_ious": 0.5296, "stage1_s": 0.0, "stage1_m": 0.03008, "stage1_l": 0.2113, "stage1_h": 0.57291, "loss": 0.18733, "grad_norm": 9.36935, "time": 1.67016}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.191, "bbox_mAP_50": 0.489, "bbox_mAP_75": 0.338, "bbox_mAP_s": 0.195, "bbox_mAP_m": 0.12, "bbox_mAP_l": 0.059, "bbox_mAP_copypaste": "0.191 0.489 0.338 0.195 0.120 0.059"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09519, "stage0_loss_instance_mil": 0.00851, "stage0_bag_acc": 99.46759, "stage0_mean_ious": 0.57903, "stage0_s": 0.0, "stage0_m": 0.03293, "stage0_l": 0.21843, "stage0_h": 0.6247, "stage1_loss_instance_mil": 0.09401, "stage1_bag_acc": 99.4906, "stage1_neg_loss": 0.04299, "stage1_mean_ious": 0.54518, "stage1_s": 0.0, "stage1_m": 0.03053, "stage1_l": 0.20438, "stage1_h": 0.58817, "loss": 0.14551, "grad_norm": 8.81034, "time": 1.73299}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04159, "stage0_loss_instance_mil": 0.0149, "stage0_bag_acc": 98.72669, "stage0_mean_ious": 0.58309, "stage0_s": 0.0, "stage0_m": 0.03549, "stage0_l": 0.21992, "stage0_h": 0.63013, "stage1_loss_instance_mil": 0.09089, "stage1_bag_acc": 99.11101, "stage1_neg_loss": 0.04074, "stage1_mean_ious": 0.5553, "stage1_s": 0.0, "stage1_m": 0.03409, "stage1_l": 0.22488, "stage1_h": 0.5965, "loss": 0.14653, "grad_norm": 8.38184, "time": 1.68183}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0423, "stage0_loss_instance_mil": 0.02145, "stage0_bag_acc": 98.6615, "stage0_mean_ious": 0.56023, "stage0_s": 0.0, "stage0_m": 0.02385, "stage0_l": 0.21716, "stage0_h": 0.60772, "stage1_loss_instance_mil": 0.09286, "stage1_bag_acc": 99.42791, "stage1_neg_loss": 0.04521, "stage1_mean_ious": 0.52974, "stage1_s": 0.0, "stage1_m": 0.01782, "stage1_l": 0.21844, "stage1_h": 0.57242, "loss": 0.15953, "grad_norm": 8.74954, "time": 1.67899}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09534, "stage0_loss_instance_mil": 0.01879, "stage0_bag_acc": 98.96301, "stage0_mean_ious": 0.55618, "stage0_s": 0.0, "stage0_m": 0.04646, "stage0_l": 0.22057, "stage0_h": 0.60679, "stage1_loss_instance_mil": 0.09966, "stage1_bag_acc": 99.44689, "stage1_neg_loss": 0.04283, "stage1_mean_ious": 0.53408, "stage1_s": 0.0, "stage1_m": 0.03433, "stage1_l": 0.21591, "stage1_h": 0.58348, "loss": 0.16128, "grad_norm": 8.38651, "time": 1.73722}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04142, "stage0_loss_instance_mil": 0.00646, "stage0_bag_acc": 99.65079, "stage0_mean_ious": 0.55521, "stage0_s": 0.0, "stage0_m": 0.02997, "stage0_l": 0.23328, "stage0_h": 0.61337, "stage1_loss_instance_mil": 0.09103, "stage1_bag_acc": 99.21944, "stage1_neg_loss": 0.03729, "stage1_mean_ious": 0.52728, "stage1_s": 0.0, "stage1_m": 0.02659, "stage1_l": 0.22757, "stage1_h": 0.5821, "loss": 0.13478, "grad_norm": 6.44612, "time": 1.68138}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04174, "stage0_loss_instance_mil": 0.00556, "stage0_bag_acc": 99.78974, "stage0_mean_ious": 0.57799, "stage0_s": 0.0, "stage0_m": 0.01362, "stage0_l": 0.2086, "stage0_h": 0.62176, "stage1_loss_instance_mil": 0.08051, "stage1_bag_acc": 99.78974, "stage1_neg_loss": 0.03878, "stage1_mean_ious": 0.54128, "stage1_s": 0.0, "stage1_m": 0.0125, "stage1_l": 0.20028, "stage1_h": 0.58063, "loss": 0.12485, "grad_norm": 6.56009, "time": 1.72239}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09752, "stage0_loss_instance_mil": 0.00629, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.58236, "stage0_s": 0.0, "stage0_m": 0.02353, "stage0_l": 0.21772, "stage0_h": 0.62975, "stage1_loss_instance_mil": 0.07992, "stage1_bag_acc": 99.5609, "stage1_neg_loss": 0.03469, "stage1_mean_ious": 0.55807, "stage1_s": 0.0, "stage1_m": 0.01919, "stage1_l": 0.22403, "stage1_h": 0.60093, "loss": 0.1209, "grad_norm": 5.53631, "time": 1.7521}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04272, "stage0_loss_instance_mil": 0.00451, "stage0_bag_acc": 99.6995, "stage0_mean_ious": 0.56311, "stage0_s": 0.0, "stage0_m": 0.02601, "stage0_l": 0.19223, "stage0_h": 0.60727, "stage1_loss_instance_mil": 0.07295, "stage1_bag_acc": 99.7995, "stage1_neg_loss": 0.02946, "stage1_mean_ious": 0.53715, "stage1_s": 0.0, "stage1_m": 0.02275, "stage1_l": 0.19223, "stage1_h": 0.57842, "loss": 0.10693, "grad_norm": 4.59524, "time": 1.70066}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04193, "stage0_loss_instance_mil": 0.00557, "stage0_bag_acc": 99.91304, "stage0_mean_ious": 0.54988, "stage0_s": 0.00117, "stage0_m": 0.05091, "stage0_l": 0.22133, "stage0_h": 0.61298, "stage1_loss_instance_mil": 0.07108, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.03662, "stage1_mean_ious": 0.52451, "stage1_s": 0.00121, "stage1_m": 0.04765, "stage1_l": 0.22341, "stage1_h": 0.58205, "loss": 0.11327, "grad_norm": 5.38181, "time": 1.66694}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09707, "stage0_loss_instance_mil": 0.00526, "stage0_bag_acc": 99.72807, "stage0_mean_ious": 0.56694, "stage0_s": 0.0, "stage0_m": 0.04563, "stage0_l": 0.22168, "stage0_h": 0.61653, "stage1_loss_instance_mil": 0.06519, "stage1_bag_acc": 99.72222, "stage1_neg_loss": 0.0332, "stage1_mean_ious": 0.54319, "stage1_s": 0.0, "stage1_m": 0.0478, "stage1_l": 0.22021, "stage1_h": 0.58902, "loss": 0.10364, "grad_norm": 4.84379, "time": 1.73239}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04247, "stage0_loss_instance_mil": 0.00469, "stage0_bag_acc": 99.68033, "stage0_mean_ious": 0.57321, "stage0_s": 0.0, "stage0_m": 0.02779, "stage0_l": 0.1727, "stage0_h": 0.61598, "stage1_loss_instance_mil": 0.07021, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.03366, "stage1_mean_ious": 0.54729, "stage1_s": 0.0, "stage1_m": 0.02217, "stage1_l": 0.18143, "stage1_h": 0.58542, "loss": 0.10856, "grad_norm": 5.29798, "time": 1.69023}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04386, "stage0_loss_instance_mil": 0.00511, "stage0_bag_acc": 99.91304, "stage0_mean_ious": 0.57883, "stage0_s": 0.0, "stage0_m": 0.0351, "stage0_l": 0.19992, "stage0_h": 0.63376, "stage1_loss_instance_mil": 0.06204, "stage1_bag_acc": 99.83304, "stage1_neg_loss": 0.02768, "stage1_mean_ious": 0.54898, "stage1_s": 0.0, "stage1_m": 0.02755, "stage1_l": 0.19668, "stage1_h": 0.59935, "loss": 0.09484, "grad_norm": 4.30058, "time": 1.71001}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09784, "stage0_loss_instance_mil": 0.00734, "stage0_bag_acc": 99.59922, "stage0_mean_ious": 0.5593, "stage0_s": 0.0, "stage0_m": 0.02559, "stage0_l": 0.2289, "stage0_h": 0.60456, "stage1_loss_instance_mil": 0.0692, "stage1_bag_acc": 99.67971, "stage1_neg_loss": 0.02978, "stage1_mean_ious": 0.53435, "stage1_s": 0.0, "stage1_m": 0.02284, "stage1_l": 0.23591, "stage1_h": 0.57463, "loss": 0.10632, "grad_norm": 4.41918, "time": 1.75207}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04302, "stage0_loss_instance_mil": 0.00367, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.56852, "stage0_s": 0.0, "stage0_m": 0.02139, "stage0_l": 0.17542, "stage0_h": 0.62401, "stage1_loss_instance_mil": 0.06298, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.032, "stage1_mean_ious": 0.53925, "stage1_s": 0.0, "stage1_m": 0.01752, "stage1_l": 0.18273, "stage1_h": 0.58843, "loss": 0.09865, "grad_norm": 4.95252, "time": 1.70414}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04324, "stage0_loss_instance_mil": 0.00314, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.55372, "stage0_s": 0.0, "stage0_m": 0.02531, "stage0_l": 0.1996, "stage0_h": 0.61123, "stage1_loss_instance_mil": 0.06586, "stage1_bag_acc": 99.8, "stage1_neg_loss": 0.02854, "stage1_mean_ious": 0.52468, "stage1_s": 0.0, "stage1_m": 0.01667, "stage1_l": 0.20232, "stage1_h": 0.57789, "loss": 0.09754, "grad_norm": 4.73911, "time": 1.68803}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09455, "stage0_loss_instance_mil": 0.0029, "stage0_bag_acc": 99.80952, "stage0_mean_ious": 0.56907, "stage0_s": 0.0, "stage0_m": 0.03231, "stage0_l": 0.20783, "stage0_h": 0.61689, "stage1_loss_instance_mil": 0.06858, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.02549, "stage1_mean_ious": 0.54926, "stage1_s": 0.0, "stage1_m": 0.03065, "stage1_l": 0.21207, "stage1_h": 0.59406, "loss": 0.09697, "grad_norm": 4.55101, "time": 1.75871}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04147, "stage0_loss_instance_mil": 0.00403, "stage0_bag_acc": 99.78947, "stage0_mean_ious": 0.5564, "stage0_s": 0.0, "stage0_m": 0.04108, "stage0_l": 0.19865, "stage0_h": 0.6141, "stage1_loss_instance_mil": 0.06495, "stage1_bag_acc": 99.78947, "stage1_neg_loss": 0.02644, "stage1_mean_ious": 0.52766, "stage1_s": 0.0, "stage1_m": 0.03361, "stage1_l": 0.20211, "stage1_h": 0.58095, "loss": 0.09543, "grad_norm": 4.33357, "time": 1.66948}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04274, "stage0_loss_instance_mil": 0.00314, "stage0_bag_acc": 99.79474, "stage0_mean_ious": 0.56706, "stage0_s": 0.00117, "stage0_m": 0.02028, "stage0_l": 0.20097, "stage0_h": 0.63582, "stage1_loss_instance_mil": 0.0635, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02774, "stage1_mean_ious": 0.53866, "stage1_s": 0.00124, "stage1_m": 0.01464, "stage1_l": 0.20118, "stage1_h": 0.60157, "loss": 0.09439, "grad_norm": 4.41877, "time": 1.67323}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.234, "bbox_mAP_50": 0.518, "bbox_mAP_75": 0.388, "bbox_mAP_s": 0.258, "bbox_mAP_m": 0.187, "bbox_mAP_l": 0.117, "bbox_mAP_copypaste": "0.234 0.518 0.388 0.258 0.187 0.117"}
