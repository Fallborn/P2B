{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bc04488", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=3,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 18833, "data_time": 0.07684, "stage0_loss_instance_mil": 0.72526, "stage0_bag_acc": 21.03295, "stage0_mean_ious": 0.35754, "stage0_s": 0.0, "stage0_m": 0.06682, "stage0_l": 0.36303, "stage0_h": 0.35206, "stage1_loss_instance_mil": 0.15984, "stage1_bag_acc": 11.21071, "stage1_neg_loss": 0.00533, "stage1_mean_ious": 0.35287, "stage1_s": 0.0, "stage1_m": 0.07453, "stage1_l": 0.35801, "stage1_h": 0.34667, "loss": 0.89043, "grad_norm": 3.18463, "time": 1.76517}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 18833, "data_time": 0.02659, "stage0_loss_instance_mil": 0.61264, "stage0_bag_acc": 47.79676, "stage0_mean_ious": 0.36423, "stage0_s": 0.0, "stage0_m": 0.13509, "stage0_l": 0.30998, "stage0_h": 0.35403, "stage1_loss_instance_mil": 0.21189, "stage1_bag_acc": 22.00934, "stage1_neg_loss": 0.0066, "stage1_mean_ious": 0.34532, "stage1_s": 0.0, "stage1_m": 0.13016, "stage1_l": 0.28667, "stage1_h": 0.337, "loss": 0.83113, "grad_norm": 3.22847, "time": 1.70925}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 18833, "data_time": 0.02769, "stage0_loss_instance_mil": 0.30029, "stage0_bag_acc": 84.04629, "stage0_mean_ious": 0.37277, "stage0_s": 0.0, "stage0_m": 0.07677, "stage0_l": 0.33843, "stage0_h": 0.36434, "stage1_loss_instance_mil": 0.29941, "stage1_bag_acc": 86.85803, "stage1_neg_loss": 0.06453, "stage1_mean_ious": 0.35983, "stage1_s": 0.0, "stage1_m": 0.0656, "stage1_l": 0.34047, "stage1_h": 0.34934, "loss": 0.66422, "grad_norm": 9.26109, "time": 1.75634}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 18833, "data_time": 0.07499, "stage0_loss_instance_mil": 0.08052, "stage0_bag_acc": 96.67243, "stage0_mean_ious": 0.40344, "stage0_s": 0.0, "stage0_m": 0.04398, "stage0_l": 0.27062, "stage0_h": 0.41253, "stage1_loss_instance_mil": 0.35186, "stage1_bag_acc": 97.02262, "stage1_neg_loss": 0.08391, "stage1_mean_ious": 0.38575, "stage1_s": 0.0, "stage1_m": 0.04559, "stage1_l": 0.26186, "stage1_h": 0.39491, "loss": 0.51629, "grad_norm": 12.9325, "time": 1.76652}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 18833, "data_time": 0.02587, "stage0_loss_instance_mil": 0.05002, "stage0_bag_acc": 97.26322, "stage0_mean_ious": 0.37523, "stage0_s": 0.0, "stage0_m": 0.06399, "stage0_l": 0.25678, "stage0_h": 0.39475, "stage1_loss_instance_mil": 0.30981, "stage1_bag_acc": 97.67766, "stage1_neg_loss": 0.08666, "stage1_mean_ious": 0.35163, "stage1_s": 0.0, "stage1_m": 0.05802, "stage1_l": 0.23783, "stage1_h": 0.37141, "loss": 0.44649, "grad_norm": 11.62331, "time": 1.71258}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 18833, "data_time": 0.02752, "stage0_loss_instance_mil": 0.04396, "stage0_bag_acc": 96.61126, "stage0_mean_ious": 0.39964, "stage0_s": 0.00803, "stage0_m": 0.07879, "stage0_l": 0.20512, "stage0_h": 0.42846, "stage1_loss_instance_mil": 0.29095, "stage1_bag_acc": 98.33889, "stage1_neg_loss": 0.08285, "stage1_mean_ious": 0.36826, "stage1_s": 0.01033, "stage1_m": 0.07328, "stage1_l": 0.19587, "stage1_h": 0.39272, "loss": 0.41777, "grad_norm": 14.4315, "time": 1.7364}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 18833, "data_time": 0.0751, "stage0_loss_instance_mil": 0.04143, "stage0_bag_acc": 97.75765, "stage0_mean_ious": 0.34311, "stage0_s": 0.0, "stage0_m": 0.06509, "stage0_l": 0.19227, "stage0_h": 0.36959, "stage1_loss_instance_mil": 0.28223, "stage1_bag_acc": 97.18429, "stage1_neg_loss": 0.08401, "stage1_mean_ious": 0.33027, "stage1_s": 0.0, "stage1_m": 0.06595, "stage1_l": 0.19591, "stage1_h": 0.3524, "loss": 0.40766, "grad_norm": 14.61326, "time": 1.79027}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.02533, "stage0_loss_instance_mil": 0.03383, "stage0_bag_acc": 98.34022, "stage0_mean_ious": 0.3611, "stage0_s": 0.0, "stage0_m": 0.04834, "stage0_l": 0.13252, "stage0_h": 0.38788, "stage1_loss_instance_mil": 0.30879, "stage1_bag_acc": 99.12331, "stage1_neg_loss": 0.08463, "stage1_mean_ious": 0.33388, "stage1_s": 0.0, "stage1_m": 0.04697, "stage1_l": 0.13074, "stage1_h": 0.35541, "loss": 0.42725, "grad_norm": 15.29156, "time": 1.70695}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02611, "stage0_loss_instance_mil": 0.01765, "stage0_bag_acc": 99.32908, "stage0_mean_ious": 0.39395, "stage0_s": 0.0, "stage0_m": 0.02729, "stage0_l": 0.21283, "stage0_h": 0.41182, "stage1_loss_instance_mil": 0.24928, "stage1_bag_acc": 99.13195, "stage1_neg_loss": 0.07662, "stage1_mean_ious": 0.35353, "stage1_s": 0.0, "stage1_m": 0.02195, "stage1_l": 0.19927, "stage1_h": 0.36866, "loss": 0.34356, "grad_norm": 13.21195, "time": 1.74636}
{"mode": "val", "epoch": 3, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.019, "bbox_mAP_50": 0.09, "bbox_mAP_75": 0.027, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.019 0.090 0.027 0.006 0.003 0.002"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 18833, "data_time": 0.07415, "stage0_loss_instance_mil": 0.02613, "stage0_bag_acc": 98.88529, "stage0_mean_ious": 0.42554, "stage0_s": 0.0, "stage0_m": 0.06824, "stage0_l": 0.22755, "stage0_h": 0.45012, "stage1_loss_instance_mil": 0.22009, "stage1_bag_acc": 98.91381, "stage1_neg_loss": 0.06758, "stage1_mean_ious": 0.38359, "stage1_s": 0.0, "stage1_m": 0.06385, "stage1_l": 0.24525, "stage1_h": 0.40048, "loss": 0.31381, "grad_norm": 11.9443, "time": 1.78535}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.02586, "stage0_loss_instance_mil": 0.03417, "stage0_bag_acc": 97.62809, "stage0_mean_ious": 0.42927, "stage0_s": 0.0, "stage0_m": 0.03643, "stage0_l": 0.26781, "stage0_h": 0.45096, "stage1_loss_instance_mil": 0.20267, "stage1_bag_acc": 98.5121, "stage1_neg_loss": 0.06844, "stage1_mean_ious": 0.39152, "stage1_s": 0.0, "stage1_m": 0.04079, "stage1_l": 0.27106, "stage1_h": 0.40597, "loss": 0.30528, "grad_norm": 10.75764, "time": 1.72206}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02602, "stage0_loss_instance_mil": 0.01377, "stage0_bag_acc": 99.43333, "stage0_mean_ious": 0.47601, "stage0_s": 0.00812, "stage0_m": 0.04962, "stage0_l": 0.23489, "stage0_h": 0.51163, "stage1_loss_instance_mil": 0.19531, "stage1_bag_acc": 99.37429, "stage1_neg_loss": 0.07118, "stage1_mean_ious": 0.42094, "stage1_s": 0.00912, "stage1_m": 0.04867, "stage1_l": 0.2416, "stage1_h": 0.44639, "loss": 0.28027, "grad_norm": 12.79973, "time": 1.71384}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 18833, "data_time": 0.07669, "stage0_loss_instance_mil": 0.00771, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.50572, "stage0_s": 0.0, "stage0_m": 0.07062, "stage0_l": 0.29633, "stage0_h": 0.53463, "stage1_loss_instance_mil": 0.14827, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.05155, "stage1_mean_ious": 0.457, "stage1_s": 0.0, "stage1_m": 0.07011, "stage1_l": 0.30635, "stage1_h": 0.47626, "loss": 0.20753, "grad_norm": 9.33612, "time": 1.73941}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.02526, "stage0_loss_instance_mil": 0.01832, "stage0_bag_acc": 98.55288, "stage0_mean_ious": 0.47181, "stage0_s": 0.0, "stage0_m": 0.05848, "stage0_l": 0.2972, "stage0_h": 0.49138, "stage1_loss_instance_mil": 0.17366, "stage1_bag_acc": 99.34307, "stage1_neg_loss": 0.06168, "stage1_mean_ious": 0.42978, "stage1_s": 0.0, "stage1_m": 0.06214, "stage1_l": 0.28731, "stage1_h": 0.44419, "loss": 0.25366, "grad_norm": 11.52146, "time": 1.72317}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02729, "stage0_loss_instance_mil": 0.01474, "stage0_bag_acc": 99.09225, "stage0_mean_ious": 0.50927, "stage0_s": 0.0, "stage0_m": 0.10791, "stage0_l": 0.29175, "stage0_h": 0.54258, "stage1_loss_instance_mil": 0.13386, "stage1_bag_acc": 99.42415, "stage1_neg_loss": 0.05276, "stage1_mean_ious": 0.46707, "stage1_s": 0.0, "stage1_m": 0.11946, "stage1_l": 0.30063, "stage1_h": 0.4921, "loss": 0.20136, "grad_norm": 9.60194, "time": 1.71728}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 18833, "data_time": 0.07531, "stage0_loss_instance_mil": 0.0099, "stage0_bag_acc": 99.74603, "stage0_mean_ious": 0.46467, "stage0_s": 0.0, "stage0_m": 0.04567, "stage0_l": 0.38986, "stage0_h": 0.47614, "stage1_loss_instance_mil": 0.14998, "stage1_bag_acc": 99.56746, "stage1_neg_loss": 0.05528, "stage1_mean_ious": 0.4296, "stage1_s": 0.0, "stage1_m": 0.04238, "stage1_l": 0.38228, "stage1_h": 0.4354, "loss": 0.21516, "grad_norm": 10.4807, "time": 1.80607}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.02619, "stage0_loss_instance_mil": 0.00624, "stage0_bag_acc": 99.83217, "stage0_mean_ious": 0.49294, "stage0_s": 0.00812, "stage0_m": 0.07871, "stage0_l": 0.28959, "stage0_h": 0.5063, "stage1_loss_instance_mil": 0.15816, "stage1_bag_acc": 99.74902, "stage1_neg_loss": 0.0526, "stage1_mean_ious": 0.45331, "stage1_s": 0.01008, "stage1_m": 0.07864, "stage1_l": 0.29005, "stage1_h": 0.46162, "loss": 0.217, "grad_norm": 9.67528, "time": 1.72661}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02628, "stage0_loss_instance_mil": 0.01275, "stage0_bag_acc": 99.05946, "stage0_mean_ious": 0.46445, "stage0_s": 0.0, "stage0_m": 0.09459, "stage0_l": 0.28432, "stage0_h": 0.48609, "stage1_loss_instance_mil": 0.15961, "stage1_bag_acc": 98.96202, "stage1_neg_loss": 0.05619, "stage1_mean_ious": 0.42836, "stage1_s": 0.0, "stage1_m": 0.09193, "stage1_l": 0.28263, "stage1_h": 0.4427, "loss": 0.22855, "grad_norm": 9.79444, "time": 1.72002}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.089, "bbox_mAP_50": 0.251, "bbox_mAP_75": 0.167, "bbox_mAP_s": 0.078, "bbox_mAP_m": 0.037, "bbox_mAP_l": 0.016, "bbox_mAP_copypaste": "0.089 0.251 0.167 0.078 0.037 0.016"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 18833, "data_time": 0.07452, "stage0_loss_instance_mil": 0.00787, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.48839, "stage0_s": 0.0, "stage0_m": 0.05988, "stage0_l": 0.33042, "stage0_h": 0.49887, "stage1_loss_instance_mil": 0.1151, "stage1_bag_acc": 99.75735, "stage1_neg_loss": 0.048, "stage1_mean_ious": 0.44748, "stage1_s": 0.0, "stage1_m": 0.06079, "stage1_l": 0.31558, "stage1_h": 0.45477, "loss": 0.17098, "grad_norm": 7.63888, "time": 1.74066}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.02683, "stage0_loss_instance_mil": 0.01016, "stage0_bag_acc": 99.65393, "stage0_mean_ious": 0.47769, "stage0_s": 0.0, "stage0_m": 0.1099, "stage0_l": 0.30033, "stage0_h": 0.49893, "stage1_loss_instance_mil": 0.10638, "stage1_bag_acc": 99.60181, "stage1_neg_loss": 0.04315, "stage1_mean_ious": 0.43495, "stage1_s": 0.0, "stage1_m": 0.10567, "stage1_l": 0.29473, "stage1_h": 0.4487, "loss": 0.15968, "grad_norm": 5.92007, "time": 1.72803}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02661, "stage0_loss_instance_mil": 0.00453, "stage0_bag_acc": 99.83217, "stage0_mean_ious": 0.44702, "stage0_s": 0.0, "stage0_m": 0.11519, "stage0_l": 0.29494, "stage0_h": 0.46675, "stage1_loss_instance_mil": 0.1069, "stage1_bag_acc": 99.81818, "stage1_neg_loss": 0.04519, "stage1_mean_ious": 0.41045, "stage1_s": 0.0, "stage1_m": 0.12141, "stage1_l": 0.30401, "stage1_h": 0.42038, "loss": 0.15662, "grad_norm": 6.39777, "time": 1.75641}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 18833, "data_time": 0.07479, "stage0_loss_instance_mil": 0.0053, "stage0_bag_acc": 99.78409, "stage0_mean_ious": 0.38985, "stage0_s": 0.0, "stage0_m": 0.06095, "stage0_l": 0.26531, "stage0_h": 0.40481, "stage1_loss_instance_mil": 0.12303, "stage1_bag_acc": 99.80357, "stage1_neg_loss": 0.0556, "stage1_mean_ious": 0.36491, "stage1_s": 0.0, "stage1_m": 0.0642, "stage1_l": 0.27744, "stage1_h": 0.37307, "loss": 0.18392, "grad_norm": 7.54866, "time": 1.77558}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 18833, "data_time": 0.0267, "stage0_loss_instance_mil": 0.00764, "stage0_bag_acc": 99.5631, "stage0_mean_ious": 0.42664, "stage0_s": 0.0, "stage0_m": 0.05968, "stage0_l": 0.25599, "stage0_h": 0.44549, "stage1_loss_instance_mil": 0.09741, "stage1_bag_acc": 99.65833, "stage1_neg_loss": 0.04263, "stage1_mean_ious": 0.39338, "stage1_s": 0.0, "stage1_m": 0.072, "stage1_l": 0.25897, "stage1_h": 0.40557, "loss": 0.14767, "grad_norm": 5.91168, "time": 1.74279}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 18833, "data_time": 0.02657, "stage0_loss_instance_mil": 0.00289, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.47052, "stage0_s": 0.0, "stage0_m": 0.06876, "stage0_l": 0.3465, "stage0_h": 0.48561, "stage1_loss_instance_mil": 0.09993, "stage1_bag_acc": 99.70053, "stage1_neg_loss": 0.04337, "stage1_mean_ious": 0.43443, "stage1_s": 0.0, "stage1_m": 0.07173, "stage1_l": 0.34817, "stage1_h": 0.44318, "loss": 0.1462, "grad_norm": 6.59444, "time": 1.74294}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 18833, "data_time": 0.07503, "stage0_loss_instance_mil": 0.00412, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.41546, "stage0_s": 0.0, "stage0_m": 0.10811, "stage0_l": 0.26519, "stage0_h": 0.43317, "stage1_loss_instance_mil": 0.10307, "stage1_bag_acc": 99.78889, "stage1_neg_loss": 0.04833, "stage1_mean_ious": 0.38333, "stage1_s": 0.0, "stage1_m": 0.1117, "stage1_l": 0.27462, "stage1_h": 0.39335, "loss": 0.15552, "grad_norm": 5.85034, "time": 1.76091}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 18833, "data_time": 0.02579, "stage0_loss_instance_mil": 0.00222, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.474, "stage0_s": 0.0, "stage0_m": 0.06984, "stage0_l": 0.3137, "stage0_h": 0.49289, "stage1_loss_instance_mil": 0.08714, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03966, "stage1_mean_ious": 0.44163, "stage1_s": 0.0, "stage1_m": 0.07428, "stage1_l": 0.30455, "stage1_h": 0.45538, "loss": 0.12902, "grad_norm": 4.46556, "time": 1.74938}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 18833, "data_time": 0.02757, "stage0_loss_instance_mil": 0.00622, "stage0_bag_acc": 99.78409, "stage0_mean_ious": 0.44705, "stage0_s": 0.0, "stage0_m": 0.07802, "stage0_l": 0.26817, "stage0_h": 0.45933, "stage1_loss_instance_mil": 0.08549, "stage1_bag_acc": 99.53965, "stage1_neg_loss": 0.03724, "stage1_mean_ious": 0.41531, "stage1_s": 0.0, "stage1_m": 0.08008, "stage1_l": 0.27449, "stage1_h": 0.4227, "loss": 0.12895, "grad_norm": 4.25947, "time": 1.7842}
