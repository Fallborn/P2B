{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+963dd25", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=12,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 16742, "data_time": 0.07551, "stage0_loss_instance_mil": 0.64752, "stage0_bag_acc": 31.72558, "stage0_mean_ious": 0.31045, "stage0_s": 0.0, "stage0_m": 0.02503, "stage0_l": 0.22982, "stage0_h": 0.31587, "stage1_loss_instance_mil": 0.18368, "stage1_bag_acc": 20.38072, "stage1_neg_loss": 0.01016, "stage1_mean_ious": 0.2887, "stage1_s": 0.0, "stage1_m": 0.02924, "stage1_l": 0.21898, "stage1_h": 0.29282, "loss": 0.84136, "grad_norm": 3.74595, "time": 1.49254}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 16742, "data_time": 0.02918, "stage0_loss_instance_mil": 0.28975, "stage0_bag_acc": 78.69617, "stage0_mean_ious": 0.46051, "stage0_s": 0.0, "stage0_m": 0.02304, "stage0_l": 0.22979, "stage0_h": 0.48761, "stage1_loss_instance_mil": 0.36138, "stage1_bag_acc": 59.68677, "stage1_neg_loss": 0.06978, "stage1_mean_ious": 0.43771, "stage1_s": 0.0, "stage1_m": 0.02355, "stage1_l": 0.24641, "stage1_h": 0.45884, "loss": 0.72091, "grad_norm": 7.59514, "time": 1.50059}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 16742, "data_time": 0.03316, "stage0_loss_instance_mil": 0.20687, "stage0_bag_acc": 87.14296, "stage0_mean_ious": 0.45479, "stage0_s": 0.0, "stage0_m": 0.10051, "stage0_l": 0.2419, "stage0_h": 0.47463, "stage1_loss_instance_mil": 0.31403, "stage1_bag_acc": 82.68808, "stage1_neg_loss": 0.05615, "stage1_mean_ious": 0.44642, "stage1_s": 0.0, "stage1_m": 0.09981, "stage1_l": 0.25929, "stage1_h": 0.46236, "loss": 0.57705, "grad_norm": 5.34314, "time": 1.4626}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00917, "memory": 16742, "data_time": 0.08768, "stage0_loss_instance_mil": 0.2087, "stage0_bag_acc": 89.48263, "stage0_mean_ious": 0.4391, "stage0_s": 0.0, "stage0_m": 0.0783, "stage0_l": 0.25883, "stage0_h": 0.45532, "stage1_loss_instance_mil": 0.37509, "stage1_bag_acc": 66.32075, "stage1_neg_loss": 0.04653, "stage1_mean_ious": 0.45002, "stage1_s": 0.0, "stage1_m": 0.07534, "stage1_l": 0.26249, "stage1_h": 0.46767, "loss": 0.63032, "grad_norm": 4.13399, "time": 1.54055}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01117, "memory": 16742, "data_time": 0.03232, "stage0_loss_instance_mil": 0.18381, "stage0_bag_acc": 88.96743, "stage0_mean_ious": 0.45311, "stage0_s": 0.0, "stage0_m": 0.02045, "stage0_l": 0.23637, "stage0_h": 0.46505, "stage1_loss_instance_mil": 0.38677, "stage1_bag_acc": 70.21753, "stage1_neg_loss": 0.04852, "stage1_mean_ious": 0.45972, "stage1_s": 0.0, "stage1_m": 0.02172, "stage1_l": 0.25527, "stage1_h": 0.46913, "loss": 0.6191, "grad_norm": 3.98596, "time": 1.47876}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01317, "memory": 16742, "data_time": 0.03188, "stage0_loss_instance_mil": 0.31405, "stage0_bag_acc": 77.98297, "stage0_mean_ious": 0.40175, "stage0_s": 0.0, "stage0_m": 0.01613, "stage0_l": 0.18493, "stage0_h": 0.42044, "stage1_loss_instance_mil": 0.29303, "stage1_bag_acc": 62.48768, "stage1_neg_loss": 0.05695, "stage1_mean_ious": 0.40941, "stage1_s": 0.0, "stage1_m": 0.01858, "stage1_l": 0.19805, "stage1_h": 0.42694, "loss": 0.66402, "grad_norm": 4.1373, "time": 1.48497}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01636, "memory": 16742, "data_time": 0.08011, "stage0_loss_instance_mil": 0.17992, "stage0_bag_acc": 88.23562, "stage0_mean_ious": 0.42856, "stage0_s": 0.0, "stage0_m": 0.01499, "stage0_l": 0.19613, "stage0_h": 0.45014, "stage1_loss_instance_mil": 0.24516, "stage1_bag_acc": 83.05086, "stage1_neg_loss": 0.05928, "stage1_mean_ious": 0.43981, "stage1_s": 0.0, "stage1_m": 0.01657, "stage1_l": 0.20947, "stage1_h": 0.46128, "loss": 0.48436, "grad_norm": 3.49807, "time": 1.53696}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01836, "memory": 16742, "data_time": 0.02977, "stage0_loss_instance_mil": 0.29265, "stage0_bag_acc": 76.59315, "stage0_mean_ious": 0.37645, "stage0_s": 0.0, "stage0_m": 0.03369, "stage0_l": 0.22915, "stage0_h": 0.39477, "stage1_loss_instance_mil": 0.26738, "stage1_bag_acc": 66.86771, "stage1_neg_loss": 0.04927, "stage1_mean_ious": 0.38332, "stage1_s": 0.0, "stage1_m": 0.038, "stage1_l": 0.24597, "stage1_h": 0.40024, "loss": 0.6093, "grad_norm": 3.86244, "time": 1.48607}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03463, "stage0_loss_instance_mil": 0.43231, "stage0_bag_acc": 62.74352, "stage0_mean_ious": 0.36847, "stage0_s": 0.0, "stage0_m": 0.03871, "stage0_l": 0.25182, "stage0_h": 0.38431, "stage1_loss_instance_mil": 0.26713, "stage1_bag_acc": 54.25547, "stage1_neg_loss": 0.03574, "stage1_mean_ious": 0.37735, "stage1_s": 0.0, "stage1_m": 0.0388, "stage1_l": 0.26431, "stage1_h": 0.39208, "loss": 0.73518, "grad_norm": 3.41095, "time": 1.48269}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08214, "stage0_loss_instance_mil": 0.27256, "stage0_bag_acc": 79.44713, "stage0_mean_ious": 0.3555, "stage0_s": 0.0, "stage0_m": 0.02996, "stage0_l": 0.26525, "stage0_h": 0.36641, "stage1_loss_instance_mil": 0.31457, "stage1_bag_acc": 74.13394, "stage1_neg_loss": 0.05958, "stage1_mean_ious": 0.36698, "stage1_s": 0.0, "stage1_m": 0.03271, "stage1_l": 0.29543, "stage1_h": 0.37476, "loss": 0.64672, "grad_norm": 3.6702, "time": 1.546}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.0366, "stage0_loss_instance_mil": 0.37832, "stage0_bag_acc": 68.16314, "stage0_mean_ious": 0.3106, "stage0_s": 0.0, "stage0_m": 0.05212, "stage0_l": 0.26745, "stage0_h": 0.3142, "stage1_loss_instance_mil": 0.26906, "stage1_bag_acc": 58.27841, "stage1_neg_loss": 0.03293, "stage1_mean_ious": 0.31307, "stage1_s": 0.0, "stage1_m": 0.05289, "stage1_l": 0.28063, "stage1_h": 0.31486, "loss": 0.68031, "grad_norm": 2.49524, "time": 1.46618}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02729, "stage0_loss_instance_mil": 0.2885, "stage0_bag_acc": 80.10085, "stage0_mean_ious": 0.30273, "stage0_s": 0.0, "stage0_m": 0.05694, "stage0_l": 0.26355, "stage0_h": 0.29749, "stage1_loss_instance_mil": 0.38069, "stage1_bag_acc": 54.0218, "stage1_neg_loss": 0.03807, "stage1_mean_ious": 0.30798, "stage1_s": 0.0, "stage1_m": 0.05447, "stage1_l": 0.27233, "stage1_h": 0.30235, "loss": 0.70726, "grad_norm": 1.99345, "time": 1.46802}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08548, "stage0_loss_instance_mil": 0.1195, "stage0_bag_acc": 92.3828, "stage0_mean_ious": 0.30737, "stage0_s": 0.0, "stage0_m": 0.01703, "stage0_l": 0.23577, "stage0_h": 0.3092, "stage1_loss_instance_mil": 0.30997, "stage1_bag_acc": 83.42834, "stage1_neg_loss": 0.0521, "stage1_mean_ious": 0.30708, "stage1_s": 0.0, "stage1_m": 0.0148, "stage1_l": 0.23814, "stage1_h": 0.30933, "loss": 0.48157, "grad_norm": 2.21552, "time": 1.53086}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02625, "stage0_loss_instance_mil": 0.1527, "stage0_bag_acc": 90.91851, "stage0_mean_ious": 0.36291, "stage0_s": 0.0, "stage0_m": 0.04333, "stage0_l": 0.21122, "stage0_h": 0.37995, "stage1_loss_instance_mil": 0.27064, "stage1_bag_acc": 91.33237, "stage1_neg_loss": 0.05966, "stage1_mean_ious": 0.35652, "stage1_s": 0.0, "stage1_m": 0.0352, "stage1_l": 0.20297, "stage1_h": 0.37328, "loss": 0.483, "grad_norm": 2.67504, "time": 1.4334}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03658, "stage0_loss_instance_mil": 0.14564, "stage0_bag_acc": 90.32206, "stage0_mean_ious": 0.32155, "stage0_s": 0.0, "stage0_m": 0.04775, "stage0_l": 0.22177, "stage0_h": 0.32913, "stage1_loss_instance_mil": 0.281, "stage1_bag_acc": 81.20444, "stage1_neg_loss": 0.06524, "stage1_mean_ious": 0.32506, "stage1_s": 0.0, "stage1_m": 0.03771, "stage1_l": 0.22604, "stage1_h": 0.33424, "loss": 0.49189, "grad_norm": 2.46802, "time": 1.46401}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07852, "stage0_loss_instance_mil": 0.09289, "stage0_bag_acc": 94.24089, "stage0_mean_ious": 0.28211, "stage0_s": 0.0, "stage0_m": 0.04607, "stage0_l": 0.26435, "stage0_h": 0.28189, "stage1_loss_instance_mil": 0.25038, "stage1_bag_acc": 88.95369, "stage1_neg_loss": 0.05394, "stage1_mean_ious": 0.28145, "stage1_s": 0.0, "stage1_m": 0.04174, "stage1_l": 0.26632, "stage1_h": 0.28226, "loss": 0.39721, "grad_norm": 1.84471, "time": 1.5115}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.03512, "stage0_loss_instance_mil": 0.0965, "stage0_bag_acc": 93.58106, "stage0_mean_ious": 0.29988, "stage0_s": 0.0, "stage0_m": 0.04366, "stage0_l": 0.23199, "stage0_h": 0.29987, "stage1_loss_instance_mil": 0.21071, "stage1_bag_acc": 92.8479, "stage1_neg_loss": 0.06258, "stage1_mean_ious": 0.29782, "stage1_s": 0.0, "stage1_m": 0.0408, "stage1_l": 0.23908, "stage1_h": 0.29765, "loss": 0.3698, "grad_norm": 1.98864, "time": 1.49085}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02867, "stage0_loss_instance_mil": 0.13138, "stage0_bag_acc": 90.79516, "stage0_mean_ious": 0.25638, "stage0_s": 0.0, "stage0_m": 0.03903, "stage0_l": 0.25891, "stage0_h": 0.2523, "stage1_loss_instance_mil": 0.25313, "stage1_bag_acc": 90.14857, "stage1_neg_loss": 0.05967, "stage1_mean_ious": 0.25794, "stage1_s": 0.0, "stage1_m": 0.0401, "stage1_l": 0.26123, "stage1_h": 0.25385, "loss": 0.44418, "grad_norm": 2.45217, "time": 1.44296}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08544, "stage0_loss_instance_mil": 0.09185, "stage0_bag_acc": 95.02577, "stage0_mean_ious": 0.26706, "stage0_s": 0.0, "stage0_m": 0.05973, "stage0_l": 0.23754, "stage0_h": 0.26519, "stage1_loss_instance_mil": 0.20528, "stage1_bag_acc": 93.95116, "stage1_neg_loss": 0.06506, "stage1_mean_ious": 0.2665, "stage1_s": 0.0, "stage1_m": 0.0548, "stage1_l": 0.2301, "stage1_h": 0.26741, "loss": 0.36218, "grad_norm": 1.91682, "time": 1.50125}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02805, "stage0_loss_instance_mil": 0.10088, "stage0_bag_acc": 93.3337, "stage0_mean_ious": 0.29493, "stage0_s": 0.0, "stage0_m": 0.04482, "stage0_l": 0.20387, "stage0_h": 0.29524, "stage1_loss_instance_mil": 0.19427, "stage1_bag_acc": 94.73474, "stage1_neg_loss": 0.05554, "stage1_mean_ious": 0.30058, "stage1_s": 0.0, "stage1_m": 0.03892, "stage1_l": 0.21132, "stage1_h": 0.3012, "loss": 0.35069, "grad_norm": 2.07845, "time": 1.44278}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.0297, "stage0_loss_instance_mil": 0.06431, "stage0_bag_acc": 95.25781, "stage0_mean_ious": 0.27776, "stage0_s": 0.0, "stage0_m": 0.05764, "stage0_l": 0.2835, "stage0_h": 0.28071, "stage1_loss_instance_mil": 0.1808, "stage1_bag_acc": 96.09113, "stage1_neg_loss": 0.05631, "stage1_mean_ious": 0.28362, "stage1_s": 0.0, "stage1_m": 0.05186, "stage1_l": 0.29238, "stage1_h": 0.28684, "loss": 0.30141, "grad_norm": 1.82744, "time": 1.40091}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07692, "stage0_loss_instance_mil": 0.05746, "stage0_bag_acc": 95.6734, "stage0_mean_ious": 0.24511, "stage0_s": 0.0, "stage0_m": 0.0296, "stage0_l": 0.2628, "stage0_h": 0.23702, "stage1_loss_instance_mil": 0.16035, "stage1_bag_acc": 97.71382, "stage1_neg_loss": 0.05805, "stage1_mean_ious": 0.24841, "stage1_s": 0.0, "stage1_m": 0.02524, "stage1_l": 0.26925, "stage1_h": 0.24071, "loss": 0.27585, "grad_norm": 1.74122, "time": 1.49872}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.03319, "stage0_loss_instance_mil": 0.05389, "stage0_bag_acc": 96.45867, "stage0_mean_ious": 0.26562, "stage0_s": 0.0, "stage0_m": 0.03492, "stage0_l": 0.21794, "stage0_h": 0.26767, "stage1_loss_instance_mil": 0.15053, "stage1_bag_acc": 97.32581, "stage1_neg_loss": 0.05502, "stage1_mean_ious": 0.27447, "stage1_s": 0.0, "stage1_m": 0.033, "stage1_l": 0.23214, "stage1_h": 0.27617, "loss": 0.25944, "grad_norm": 1.63017, "time": 1.45235}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02758, "stage0_loss_instance_mil": 0.03762, "stage0_bag_acc": 97.20496, "stage0_mean_ious": 0.30639, "stage0_s": 0.0, "stage0_m": 0.05464, "stage0_l": 0.30701, "stage0_h": 0.30255, "stage1_loss_instance_mil": 0.12982, "stage1_bag_acc": 98.12244, "stage1_neg_loss": 0.04831, "stage1_mean_ious": 0.31869, "stage1_s": 0.0, "stage1_m": 0.0529, "stage1_l": 0.32072, "stage1_h": 0.31594, "loss": 0.21576, "grad_norm": 1.64252, "time": 1.45207}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.08056, "stage0_loss_instance_mil": 0.06989, "stage0_bag_acc": 95.21168, "stage0_mean_ious": 0.30476, "stage0_s": 0.0, "stage0_m": 0.05759, "stage0_l": 0.27089, "stage0_h": 0.30528, "stage1_loss_instance_mil": 0.08953, "stage1_bag_acc": 95.17122, "stage1_neg_loss": 0.05727, "stage1_mean_ious": 0.31703, "stage1_s": 0.0, "stage1_m": 0.05337, "stage1_l": 0.28542, "stage1_h": 0.31796, "loss": 0.21669, "grad_norm": 1.7069, "time": 1.48337}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.03035, "stage0_loss_instance_mil": 0.02266, "stage0_bag_acc": 98.8484, "stage0_mean_ious": 0.2872, "stage0_s": 0.00117, "stage0_m": 0.05435, "stage0_l": 0.24738, "stage0_h": 0.28261, "stage1_loss_instance_mil": 0.07615, "stage1_bag_acc": 98.53709, "stage1_neg_loss": 0.03516, "stage1_mean_ious": 0.29868, "stage1_s": 0.00185, "stage1_m": 0.05419, "stage1_l": 0.25574, "stage1_h": 0.29642, "loss": 0.13397, "grad_norm": 1.08495, "time": 1.5093}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.03395, "stage0_loss_instance_mil": 0.02323, "stage0_bag_acc": 98.56161, "stage0_mean_ious": 0.31022, "stage0_s": 0.0, "stage0_m": 0.05235, "stage0_l": 0.25538, "stage0_h": 0.31094, "stage1_loss_instance_mil": 0.07422, "stage1_bag_acc": 98.07133, "stage1_neg_loss": 0.04442, "stage1_mean_ious": 0.31962, "stage1_s": 0.0, "stage1_m": 0.05307, "stage1_l": 0.26037, "stage1_h": 0.32108, "loss": 0.14188, "grad_norm": 1.21642, "time": 1.42849}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.0773, "stage0_loss_instance_mil": 0.01779, "stage0_bag_acc": 98.94856, "stage0_mean_ious": 0.31079, "stage0_s": 0.0, "stage0_m": 0.05725, "stage0_l": 0.27848, "stage0_h": 0.30183, "stage1_loss_instance_mil": 0.05967, "stage1_bag_acc": 99.06692, "stage1_neg_loss": 0.03352, "stage1_mean_ious": 0.32154, "stage1_s": 0.0, "stage1_m": 0.05587, "stage1_l": 0.29108, "stage1_h": 0.31235, "loss": 0.11097, "grad_norm": 1.10225, "time": 1.48863}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.03157, "stage0_loss_instance_mil": 0.02223, "stage0_bag_acc": 98.6161, "stage0_mean_ious": 0.28325, "stage0_s": 0.0, "stage0_m": 0.07555, "stage0_l": 0.27692, "stage0_h": 0.28121, "stage1_loss_instance_mil": 0.05901, "stage1_bag_acc": 98.52345, "stage1_neg_loss": 0.03642, "stage1_mean_ious": 0.29288, "stage1_s": 0.0, "stage1_m": 0.07269, "stage1_l": 0.28484, "stage1_h": 0.29143, "loss": 0.11766, "grad_norm": 1.12243, "time": 1.4319}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.02831, "stage0_loss_instance_mil": 0.01824, "stage0_bag_acc": 98.8714, "stage0_mean_ious": 0.30073, "stage0_s": 0.0, "stage0_m": 0.0767, "stage0_l": 0.2748, "stage0_h": 0.29755, "stage1_loss_instance_mil": 0.06623, "stage1_bag_acc": 99.13861, "stage1_neg_loss": 0.02884, "stage1_mean_ious": 0.3119, "stage1_s": 0.0, "stage1_m": 0.08167, "stage1_l": 0.27168, "stage1_h": 0.31006, "loss": 0.11331, "grad_norm": 1.11048, "time": 1.45557}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.08432, "stage0_loss_instance_mil": 0.01516, "stage0_bag_acc": 99.38543, "stage0_mean_ious": 0.29904, "stage0_s": 0.0, "stage0_m": 0.08373, "stage0_l": 0.2859, "stage0_h": 0.2937, "stage1_loss_instance_mil": 0.05679, "stage1_bag_acc": 99.07513, "stage1_neg_loss": 0.03016, "stage1_mean_ious": 0.31173, "stage1_s": 0.0, "stage1_m": 0.08327, "stage1_l": 0.28929, "stage1_h": 0.30805, "loss": 0.1021, "grad_norm": 1.05895, "time": 1.4992}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.02915, "stage0_loss_instance_mil": 0.01938, "stage0_bag_acc": 99.09639, "stage0_mean_ious": 0.28384, "stage0_s": 0.0, "stage0_m": 0.05258, "stage0_l": 0.2304, "stage0_h": 0.28727, "stage1_loss_instance_mil": 0.0617, "stage1_bag_acc": 99.11216, "stage1_neg_loss": 0.03978, "stage1_mean_ious": 0.29652, "stage1_s": 0.0, "stage1_m": 0.05435, "stage1_l": 0.24747, "stage1_h": 0.29831, "loss": 0.12086, "grad_norm": 1.23338, "time": 1.46051}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.03191, "stage0_loss_instance_mil": 0.02066, "stage0_bag_acc": 98.8596, "stage0_mean_ious": 0.29352, "stage0_s": 0.0, "stage0_m": 0.05218, "stage0_l": 0.31413, "stage0_h": 0.2889, "stage1_loss_instance_mil": 0.05939, "stage1_bag_acc": 98.91969, "stage1_neg_loss": 0.03479, "stage1_mean_ious": 0.30911, "stage1_s": 0.0, "stage1_m": 0.05484, "stage1_l": 0.32067, "stage1_h": 0.30412, "loss": 0.11485, "grad_norm": 1.30577, "time": 1.42986}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 16742, "data_time": 0.07845, "stage0_loss_instance_mil": 0.0171, "stage0_bag_acc": 99.00606, "stage0_mean_ious": 0.30122, "stage0_s": 0.00117, "stage0_m": 0.05066, "stage0_l": 0.30961, "stage0_h": 0.29232, "stage1_loss_instance_mil": 0.0523, "stage1_bag_acc": 98.67562, "stage1_neg_loss": 0.03292, "stage1_mean_ious": 0.31525, "stage1_s": 0.00181, "stage1_m": 0.05059, "stage1_l": 0.32736, "stage1_h": 0.30638, "loss": 0.10232, "grad_norm": 1.04243, "time": 1.47408}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 16742, "data_time": 0.03246, "stage0_loss_instance_mil": 0.02554, "stage0_bag_acc": 98.10343, "stage0_mean_ious": 0.26446, "stage0_s": 0.0, "stage0_m": 0.04227, "stage0_l": 0.23669, "stage0_h": 0.26157, "stage1_loss_instance_mil": 0.05562, "stage1_bag_acc": 99.07807, "stage1_neg_loss": 0.03477, "stage1_mean_ious": 0.27221, "stage1_s": 0.0, "stage1_m": 0.04044, "stage1_l": 0.24066, "stage1_h": 0.26916, "loss": 0.11593, "grad_norm": 1.18734, "time": 1.43376}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 16742, "data_time": 0.03116, "stage0_loss_instance_mil": 0.01012, "stage0_bag_acc": 99.42807, "stage0_mean_ious": 0.31053, "stage0_s": 0.0, "stage0_m": 0.05233, "stage0_l": 0.29243, "stage0_h": 0.30943, "stage1_loss_instance_mil": 0.05135, "stage1_bag_acc": 99.49376, "stage1_neg_loss": 0.02838, "stage1_mean_ious": 0.32016, "stage1_s": 0.0, "stage1_m": 0.05649, "stage1_l": 0.3045, "stage1_h": 0.31893, "loss": 0.08985, "grad_norm": 1.00953, "time": 1.49545}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0002, "eval_iter_num": 90, "bbox_mAP": 0.084, "bbox_mAP_50": 0.249, "bbox_mAP_75": 0.156, "bbox_mAP_s": 0.07, "bbox_mAP_m": 0.033, "bbox_mAP_l": 0.014, "bbox_mAP_copypaste": "0.084 0.249 0.156 0.070 0.033 0.014"}
