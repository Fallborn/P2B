{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+000451c", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=5000),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/images/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=18)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 10015, "data_time": 0.05956, "stage0_loss_instance_mil": 0.54606, "stage0_bag_acc": 42.59581, "stage0_mean_ious": 0.14395, "stage0_s": 0.0, "stage0_m": 0.03354, "stage0_l": 0.11953, "stage0_h": 0.14206, "stage1_loss_instance_mil": 0.27085, "stage1_bag_acc": 47.73182, "stage1_neg_loss": 0.05792, "stage1_mean_ious": 0.13963, "stage1_s": 0.0, "stage1_m": 0.03633, "stage1_l": 0.11631, "stage1_h": 0.13744, "loss": 0.87484, "grad_norm": 7.99242, "time": 0.98761}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01988, "memory": 10026, "data_time": 0.01234, "stage0_loss_instance_mil": 0.56011, "stage0_bag_acc": 46.43639, "stage0_mean_ious": 0.09022, "stage0_s": 0.0, "stage0_m": 0.02108, "stage0_l": 0.08628, "stage0_h": 0.08607, "stage1_loss_instance_mil": 0.28658, "stage1_bag_acc": 42.43909, "stage1_neg_loss": 0.02597, "stage1_mean_ious": 0.08509, "stage1_s": 0.0, "stage1_m": 0.02143, "stage1_l": 0.08155, "stage1_h": 0.08024, "loss": 0.87266, "grad_norm": 3.56592, "time": 0.9123}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.02987, "memory": 10026, "data_time": 0.0127, "stage0_loss_instance_mil": 0.64088, "stage0_bag_acc": 30.37864, "stage0_mean_ious": 0.10507, "stage0_s": 0.0, "stage0_m": 0.01657, "stage0_l": 0.09881, "stage0_h": 0.10475, "stage1_loss_instance_mil": 0.23126, "stage1_bag_acc": 33.53882, "stage1_neg_loss": 0.0433, "stage1_mean_ious": 0.10478, "stage1_s": 0.0, "stage1_m": 0.01761, "stage1_l": 0.10052, "stage1_h": 0.10351, "loss": 0.91544, "grad_norm": 3.88223, "time": 0.91977}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.03986, "memory": 10026, "data_time": 0.01277, "stage0_loss_instance_mil": 0.61061, "stage0_bag_acc": 37.19449, "stage0_mean_ious": 0.09654, "stage0_s": 0.0, "stage0_m": 0.02918, "stage0_l": 0.07863, "stage0_h": 0.09538, "stage1_loss_instance_mil": 0.20973, "stage1_bag_acc": 43.02328, "stage1_neg_loss": 0.15679, "stage1_mean_ious": 0.09679, "stage1_s": 0.0, "stage1_m": 0.0279, "stage1_l": 0.07944, "stage1_h": 0.09639, "loss": 0.97712, "grad_norm": 7.12525, "time": 0.9307}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.04985, "memory": 10044, "data_time": 0.01309, "stage0_loss_instance_mil": 0.6469, "stage0_bag_acc": 22.75122, "stage0_mean_ious": 0.10234, "stage0_s": 0.0, "stage0_m": 0.02628, "stage0_l": 0.08392, "stage0_h": 0.09738, "stage1_loss_instance_mil": 0.18977, "stage1_bag_acc": 22.52159, "stage1_neg_loss": 0.00964, "stage1_mean_ious": 0.10023, "stage1_s": 0.0, "stage1_m": 0.02402, "stage1_l": 0.08356, "stage1_h": 0.09579, "loss": 0.84631, "grad_norm": 0.79859, "time": 0.91848}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.05984, "memory": 10044, "data_time": 0.01264, "stage0_loss_instance_mil": 0.61061, "stage0_bag_acc": 23.84788, "stage0_mean_ious": 0.12474, "stage0_s": 0.0, "stage0_m": 0.0203, "stage0_l": 0.1056, "stage0_h": 0.12212, "stage1_loss_instance_mil": 0.21427, "stage1_bag_acc": 25.30167, "stage1_neg_loss": 0.01578, "stage1_mean_ious": 0.11968, "stage1_s": 0.0, "stage1_m": 0.01757, "stage1_l": 0.10159, "stage1_h": 0.11737, "loss": 0.84066, "grad_norm": 1.14876, "time": 0.93914}
{"mode": "val", "epoch": 1, "iter": 300, "lr": 0.05984, "eval_iter_num": 599, "bbox_mAP": 0.0, "bbox_mAP_50": 0.001, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.001 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.06983, "memory": 10044, "data_time": 0.05807, "stage0_loss_instance_mil": 0.63902, "stage0_bag_acc": 19.832, "stage0_mean_ious": 0.11973, "stage0_s": 0.0, "stage0_m": 0.03184, "stage0_l": 0.09418, "stage0_h": 0.12566, "stage1_loss_instance_mil": 0.15575, "stage1_bag_acc": 39.16115, "stage1_neg_loss": 0.01206, "stage1_mean_ious": 0.11525, "stage1_s": 0.0, "stage1_m": 0.03144, "stage1_l": 0.0953, "stage1_h": 0.11907, "loss": 0.80683, "grad_norm": 0.45484, "time": 0.97084}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.07982, "memory": 10046, "data_time": 0.01267, "stage0_loss_instance_mil": 0.63285, "stage0_bag_acc": 19.87686, "stage0_mean_ious": 0.08471, "stage0_s": 0.0, "stage0_m": 0.0251, "stage0_l": 0.05841, "stage0_h": 0.08066, "stage1_loss_instance_mil": 0.15102, "stage1_bag_acc": 26.87338, "stage1_neg_loss": 0.01583, "stage1_mean_ious": 0.0813, "stage1_s": 0.0, "stage1_m": 0.02425, "stage1_l": 0.05706, "stage1_h": 0.07754, "loss": 0.79971, "grad_norm": 0.41836, "time": 0.92314}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.08981, "memory": 10046, "data_time": 0.01226, "stage0_loss_instance_mil": 0.6266, "stage0_bag_acc": 25.31728, "stage0_mean_ious": 0.05542, "stage0_s": 0.0, "stage0_m": 0.02252, "stage0_l": 0.05433, "stage0_h": 0.04996, "stage1_loss_instance_mil": 0.15382, "stage1_bag_acc": 27.08153, "stage1_neg_loss": 0.01609, "stage1_mean_ious": 0.05244, "stage1_s": 0.0, "stage1_m": 0.0227, "stage1_l": 0.04984, "stage1_h": 0.04749, "loss": 0.79651, "grad_norm": 0.35686, "time": 0.93115}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0998, "memory": 10046, "data_time": 0.01281, "stage0_loss_instance_mil": 0.63776, "stage0_bag_acc": 30.96002, "stage0_mean_ious": 0.06039, "stage0_s": 0.00048, "stage0_m": 0.02529, "stage0_l": 0.06585, "stage0_h": 0.05046, "stage1_loss_instance_mil": 0.15665, "stage1_bag_acc": 28.50371, "stage1_neg_loss": 0.01758, "stage1_mean_ious": 0.05823, "stage1_s": 0.00099, "stage1_m": 0.02274, "stage1_l": 0.0641, "stage1_h": 0.0485, "loss": 0.81199, "grad_norm": 0.54912, "time": 0.93809}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.1, "memory": 10046, "data_time": 0.01201, "stage0_loss_instance_mil": 0.61883, "stage0_bag_acc": 30.94163, "stage0_mean_ious": 0.0498, "stage0_s": 0.0, "stage0_m": 0.01716, "stage0_l": 0.06105, "stage0_h": 0.0403, "stage1_loss_instance_mil": 0.154, "stage1_bag_acc": 34.2588, "stage1_neg_loss": 0.02481, "stage1_mean_ious": 0.04705, "stage1_s": 0.0, "stage1_m": 0.01847, "stage1_l": 0.05928, "stage1_h": 0.03743, "loss": 0.79765, "grad_norm": 0.4748, "time": 0.91554}
