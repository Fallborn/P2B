{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17795, "data_time": 0.09222, "stage0_loss_instance_mil": 0.71045, "stage0_bag_acc": 27.15356, "stage0_mean_ious": 0.28683, "stage0_s": 0.0, "stage0_m": 0.02211, "stage0_l": 0.18912, "stage0_h": 0.2958, "stage1_loss_instance_mil": 0.17694, "stage1_bag_acc": 11.56293, "stage1_neg_loss": 0.00093, "stage1_mean_ious": 0.2891, "stage1_s": 0.0, "stage1_m": 0.02205, "stage1_l": 0.19428, "stage1_h": 0.29704, "loss": 0.88832, "grad_norm": 3.18727, "time": 1.7183}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17795, "data_time": 0.04002, "stage0_loss_instance_mil": 0.60519, "stage0_bag_acc": 51.20883, "stage0_mean_ious": 0.31883, "stage0_s": 0.0, "stage0_m": 0.03836, "stage0_l": 0.2202, "stage0_h": 0.32633, "stage1_loss_instance_mil": 0.23028, "stage1_bag_acc": 25.65091, "stage1_neg_loss": 0.0038, "stage1_mean_ious": 0.32022, "stage1_s": 0.0, "stage1_m": 0.04245, "stage1_l": 0.22568, "stage1_h": 0.32696, "loss": 0.83927, "grad_norm": 3.90102, "time": 1.63383}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17795, "data_time": 0.04187, "stage0_loss_instance_mil": 0.29579, "stage0_bag_acc": 82.25036, "stage0_mean_ious": 0.34194, "stage0_s": 0.0, "stage0_m": 0.05359, "stage0_l": 0.20556, "stage0_h": 0.36396, "stage1_loss_instance_mil": 0.30222, "stage1_bag_acc": 70.58591, "stage1_neg_loss": 0.05928, "stage1_mean_ious": 0.34423, "stage1_s": 0.0, "stage1_m": 0.0532, "stage1_l": 0.20605, "stage1_h": 0.36642, "loss": 0.65729, "grad_norm": 9.16179, "time": 1.69449}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17795, "data_time": 0.09318, "stage0_loss_instance_mil": 0.09178, "stage0_bag_acc": 95.34097, "stage0_mean_ious": 0.33121, "stage0_s": 0.0, "stage0_m": 0.04865, "stage0_l": 0.13285, "stage0_h": 0.35282, "stage1_loss_instance_mil": 0.35086, "stage1_bag_acc": 97.29037, "stage1_neg_loss": 0.09173, "stage1_mean_ious": 0.31891, "stage1_s": 0.0, "stage1_m": 0.04799, "stage1_l": 0.13704, "stage1_h": 0.33834, "loss": 0.53437, "grad_norm": 11.11801, "time": 1.70465}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17795, "data_time": 0.04053, "stage0_loss_instance_mil": 0.07293, "stage0_bag_acc": 96.10447, "stage0_mean_ious": 0.36359, "stage0_s": 0.0, "stage0_m": 0.0626, "stage0_l": 0.14289, "stage0_h": 0.39542, "stage1_loss_instance_mil": 0.31858, "stage1_bag_acc": 96.98337, "stage1_neg_loss": 0.09683, "stage1_mean_ious": 0.34256, "stage1_s": 0.0, "stage1_m": 0.05712, "stage1_l": 0.13256, "stage1_h": 0.37325, "loss": 0.48834, "grad_norm": 15.03274, "time": 1.68007}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17795, "data_time": 0.04232, "stage0_loss_instance_mil": 0.04482, "stage0_bag_acc": 97.42618, "stage0_mean_ious": 0.37421, "stage0_s": 0.0, "stage0_m": 0.04383, "stage0_l": 0.11584, "stage0_h": 0.40165, "stage1_loss_instance_mil": 0.3109, "stage1_bag_acc": 98.46578, "stage1_neg_loss": 0.08876, "stage1_mean_ious": 0.3368, "stage1_s": 0.0, "stage1_m": 0.0382, "stage1_l": 0.10246, "stage1_h": 0.36206, "loss": 0.44447, "grad_norm": 14.0693, "time": 1.71598}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17795, "data_time": 0.09414, "stage0_loss_instance_mil": 0.03154, "stage0_bag_acc": 98.58116, "stage0_mean_ious": 0.33988, "stage0_s": 0.0, "stage0_m": 0.03455, "stage0_l": 0.12661, "stage0_h": 0.36738, "stage1_loss_instance_mil": 0.26745, "stage1_bag_acc": 99.01603, "stage1_neg_loss": 0.08995, "stage1_mean_ious": 0.31118, "stage1_s": 0.0, "stage1_m": 0.02644, "stage1_l": 0.11413, "stage1_h": 0.33846, "loss": 0.38894, "grad_norm": 15.76717, "time": 1.74716}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.03963, "stage0_loss_instance_mil": 0.03152, "stage0_bag_acc": 98.10776, "stage0_mean_ious": 0.34441, "stage0_s": 0.00189, "stage0_m": 0.01737, "stage0_l": 0.11765, "stage0_h": 0.37037, "stage1_loss_instance_mil": 0.24934, "stage1_bag_acc": 99.5995, "stage1_neg_loss": 0.0825, "stage1_mean_ious": 0.30472, "stage1_s": 0.0014, "stage1_m": 0.01266, "stage1_l": 0.10286, "stage1_h": 0.32875, "loss": 0.36337, "grad_norm": 12.03844, "time": 1.64597}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.0389, "stage0_loss_instance_mil": 0.05271, "stage0_bag_acc": 96.74283, "stage0_mean_ious": 0.31709, "stage0_s": 0.0, "stage0_m": 0.04676, "stage0_l": 0.10903, "stage0_h": 0.34445, "stage1_loss_instance_mil": 0.26793, "stage1_bag_acc": 97.01329, "stage1_neg_loss": 0.08388, "stage1_mean_ious": 0.27985, "stage1_s": 0.0, "stage1_m": 0.03487, "stage1_l": 0.08244, "stage1_h": 0.30696, "loss": 0.40453, "grad_norm": 14.95695, "time": 1.66697}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17795, "data_time": 0.09125, "stage0_loss_instance_mil": 0.02604, "stage0_bag_acc": 98.53128, "stage0_mean_ious": 0.3138, "stage0_s": 0.0, "stage0_m": 0.04925, "stage0_l": 0.10558, "stage0_h": 0.3401, "stage1_loss_instance_mil": 0.21832, "stage1_bag_acc": 99.41474, "stage1_neg_loss": 0.06999, "stage1_mean_ious": 0.27208, "stage1_s": 0.0, "stage1_m": 0.03225, "stage1_l": 0.08502, "stage1_h": 0.29669, "loss": 0.31435, "grad_norm": 11.79476, "time": 1.71911}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.03974, "stage0_loss_instance_mil": 0.02992, "stage0_bag_acc": 98.73823, "stage0_mean_ious": 0.35103, "stage0_s": 0.0, "stage0_m": 0.01276, "stage0_l": 0.11494, "stage0_h": 0.38633, "stage1_loss_instance_mil": 0.21593, "stage1_bag_acc": 98.71998, "stage1_neg_loss": 0.07723, "stage1_mean_ious": 0.31341, "stage1_s": 0.0, "stage1_m": 0.01066, "stage1_l": 0.09035, "stage1_h": 0.34708, "loss": 0.32307, "grad_norm": 11.49893, "time": 1.64915}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.04029, "stage0_loss_instance_mil": 0.02178, "stage0_bag_acc": 98.75347, "stage0_mean_ious": 0.32949, "stage0_s": 0.0, "stage0_m": 0.01697, "stage0_l": 0.11531, "stage0_h": 0.36861, "stage1_loss_instance_mil": 0.21455, "stage1_bag_acc": 98.81013, "stage1_neg_loss": 0.07476, "stage1_mean_ious": 0.28754, "stage1_s": 0.0, "stage1_m": 0.01341, "stage1_l": 0.09034, "stage1_h": 0.32372, "loss": 0.31109, "grad_norm": 12.3886, "time": 1.66882}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17795, "data_time": 0.09292, "stage0_loss_instance_mil": 0.03173, "stage0_bag_acc": 98.31657, "stage0_mean_ious": 0.30358, "stage0_s": 0.0, "stage0_m": 0.03177, "stage0_l": 0.10024, "stage0_h": 0.33616, "stage1_loss_instance_mil": 0.21228, "stage1_bag_acc": 98.62363, "stage1_neg_loss": 0.07236, "stage1_mean_ious": 0.27137, "stage1_s": 0.0, "stage1_m": 0.02333, "stage1_l": 0.0819, "stage1_h": 0.30278, "loss": 0.31636, "grad_norm": 12.92086, "time": 1.71562}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.04066, "stage0_loss_instance_mil": 0.02121, "stage0_bag_acc": 99.07763, "stage0_mean_ious": 0.31869, "stage0_s": 0.0, "stage0_m": 0.03574, "stage0_l": 0.0942, "stage0_h": 0.34903, "stage1_loss_instance_mil": 0.20558, "stage1_bag_acc": 99.20313, "stage1_neg_loss": 0.07984, "stage1_mean_ious": 0.28541, "stage1_s": 0.0, "stage1_m": 0.02467, "stage1_l": 0.08168, "stage1_h": 0.3144, "loss": 0.30663, "grad_norm": 15.12835, "time": 1.68069}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.03937, "stage0_loss_instance_mil": 0.01899, "stage0_bag_acc": 98.91725, "stage0_mean_ious": 0.28348, "stage0_s": 0.0, "stage0_m": 0.02253, "stage0_l": 0.0852, "stage0_h": 0.30493, "stage1_loss_instance_mil": 0.2046, "stage1_bag_acc": 99.32378, "stage1_neg_loss": 0.07168, "stage1_mean_ious": 0.26486, "stage1_s": 0.0, "stage1_m": 0.01898, "stage1_l": 0.07098, "stage1_h": 0.2868, "loss": 0.29527, "grad_norm": 9.89253, "time": 1.61253}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17795, "data_time": 0.09122, "stage0_loss_instance_mil": 0.01078, "stage0_bag_acc": 99.26187, "stage0_mean_ious": 0.23989, "stage0_s": 0.0, "stage0_m": 0.03237, "stage0_l": 0.08851, "stage0_h": 0.25777, "stage1_loss_instance_mil": 0.20331, "stage1_bag_acc": 99.297, "stage1_neg_loss": 0.07092, "stage1_mean_ious": 0.23311, "stage1_s": 0.0, "stage1_m": 0.03039, "stage1_l": 0.07323, "stage1_h": 0.25284, "loss": 0.28501, "grad_norm": 10.32295, "time": 1.68507}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.03973, "stage0_loss_instance_mil": 0.0138, "stage0_bag_acc": 99.407, "stage0_mean_ious": 0.22537, "stage0_s": 0.0, "stage0_m": 0.02686, "stage0_l": 0.10728, "stage0_h": 0.23958, "stage1_loss_instance_mil": 0.18908, "stage1_bag_acc": 99.3972, "stage1_neg_loss": 0.06579, "stage1_mean_ious": 0.21231, "stage1_s": 0.0, "stage1_m": 0.02055, "stage1_l": 0.09016, "stage1_h": 0.22789, "loss": 0.26867, "grad_norm": 9.07367, "time": 1.62767}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.04135, "stage0_loss_instance_mil": 0.01569, "stage0_bag_acc": 98.98207, "stage0_mean_ious": 0.26626, "stage0_s": 0.0, "stage0_m": 0.0309, "stage0_l": 0.0849, "stage0_h": 0.29057, "stage1_loss_instance_mil": 0.14787, "stage1_bag_acc": 99.30712, "stage1_neg_loss": 0.05412, "stage1_mean_ious": 0.25357, "stage1_s": 0.0, "stage1_m": 0.02271, "stage1_l": 0.06893, "stage1_h": 0.27955, "loss": 0.21768, "grad_norm": 7.38891, "time": 1.63861}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.024, "bbox_mAP_50": 0.083, "bbox_mAP_75": 0.043, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.024 0.083 0.043 0.014 0.007 0.002"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17795, "data_time": 0.10326, "stage0_loss_instance_mil": 0.01954, "stage0_bag_acc": 98.99069, "stage0_mean_ious": 0.14931, "stage0_s": 0.0015, "stage0_m": 0.02956, "stage0_l": 0.09902, "stage0_h": 0.15327, "stage1_loss_instance_mil": 0.18568, "stage1_bag_acc": 98.85003, "stage1_neg_loss": 0.06636, "stage1_mean_ious": 0.14155, "stage1_s": 0.00152, "stage1_m": 0.0244, "stage1_l": 0.0869, "stage1_h": 0.14715, "loss": 0.27158, "grad_norm": 8.30462, "time": 1.73635}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.04818, "stage0_loss_instance_mil": 0.01004, "stage0_bag_acc": 99.41279, "stage0_mean_ious": 0.17569, "stage0_s": 0.0, "stage0_m": 0.0339, "stage0_l": 0.09879, "stage0_h": 0.18813, "stage1_loss_instance_mil": 0.16062, "stage1_bag_acc": 99.92308, "stage1_neg_loss": 0.06958, "stage1_mean_ious": 0.16916, "stage1_s": 0.0, "stage1_m": 0.02539, "stage1_l": 0.08638, "stage1_h": 0.18299, "loss": 0.24025, "grad_norm": 8.96444, "time": 1.67698}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.04784, "stage0_loss_instance_mil": 0.0135, "stage0_bag_acc": 99.45628, "stage0_mean_ious": 0.15947, "stage0_s": 0.0, "stage0_m": 0.04597, "stage0_l": 0.08478, "stage0_h": 0.16661, "stage1_loss_instance_mil": 0.15483, "stage1_bag_acc": 99.44192, "stage1_neg_loss": 0.06059, "stage1_mean_ious": 0.15236, "stage1_s": 0.0, "stage1_m": 0.03595, "stage1_l": 0.07356, "stage1_h": 0.16138, "loss": 0.22892, "grad_norm": 8.30223, "time": 1.68115}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17795, "data_time": 0.09976, "stage0_loss_instance_mil": 0.08394, "stage0_bag_acc": 95.02836, "stage0_mean_ious": 0.15773, "stage0_s": 0.0, "stage0_m": 0.0217, "stage0_l": 0.0913, "stage0_h": 0.16476, "stage1_loss_instance_mil": 0.14543, "stage1_bag_acc": 96.28824, "stage1_neg_loss": 0.0606, "stage1_mean_ious": 0.15121, "stage1_s": 0.0, "stage1_m": 0.01807, "stage1_l": 0.07883, "stage1_h": 0.16007, "loss": 0.28997, "grad_norm": 10.11879, "time": 1.74056}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17795, "data_time": 0.04316, "stage0_loss_instance_mil": 0.01993, "stage0_bag_acc": 98.95251, "stage0_mean_ious": 0.25147, "stage0_s": 0.0, "stage0_m": 0.0396, "stage0_l": 0.10937, "stage0_h": 0.26829, "stage1_loss_instance_mil": 0.14014, "stage1_bag_acc": 99.61864, "stage1_neg_loss": 0.06008, "stage1_mean_ious": 0.23585, "stage1_s": 0.0, "stage1_m": 0.03511, "stage1_l": 0.10126, "stage1_h": 0.25169, "loss": 0.22015, "grad_norm": 7.06678, "time": 1.69869}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17795, "data_time": 0.04181, "stage0_loss_instance_mil": 0.02243, "stage0_bag_acc": 99.13882, "stage0_mean_ious": 0.24742, "stage0_s": 0.0, "stage0_m": 0.04088, "stage0_l": 0.10013, "stage0_h": 0.26403, "stage1_loss_instance_mil": 0.12289, "stage1_bag_acc": 99.22738, "stage1_neg_loss": 0.0532, "stage1_mean_ious": 0.23519, "stage1_s": 0.0, "stage1_m": 0.03556, "stage1_l": 0.09187, "stage1_h": 0.25128, "loss": 0.19852, "grad_norm": 6.68317, "time": 1.68278}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17795, "data_time": 0.09776, "stage0_loss_instance_mil": 0.00721, "stage0_bag_acc": 99.75714, "stage0_mean_ious": 0.24982, "stage0_s": 0.0, "stage0_m": 0.0597, "stage0_l": 0.0967, "stage0_h": 0.26705, "stage1_loss_instance_mil": 0.10345, "stage1_bag_acc": 99.78235, "stage1_neg_loss": 0.05194, "stage1_mean_ious": 0.2384, "stage1_s": 0.0, "stage1_m": 0.05551, "stage1_l": 0.08297, "stage1_h": 0.25596, "loss": 0.1626, "grad_norm": 6.05115, "time": 1.76719}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17795, "data_time": 0.04208, "stage0_loss_instance_mil": 0.00957, "stage0_bag_acc": 99.58839, "stage0_mean_ious": 0.25553, "stage0_s": 0.0, "stage0_m": 0.02927, "stage0_l": 0.1036, "stage0_h": 0.27286, "stage1_loss_instance_mil": 0.10918, "stage1_bag_acc": 99.78363, "stage1_neg_loss": 0.04903, "stage1_mean_ious": 0.24358, "stage1_s": 0.0, "stage1_m": 0.03072, "stage1_l": 0.09318, "stage1_h": 0.26091, "loss": 0.16778, "grad_norm": 5.68161, "time": 1.65592}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17795, "data_time": 0.0407, "stage0_loss_instance_mil": 0.00949, "stage0_bag_acc": 99.55487, "stage0_mean_ious": 0.26352, "stage0_s": 0.0, "stage0_m": 0.03486, "stage0_l": 0.11379, "stage0_h": 0.27967, "stage1_loss_instance_mil": 0.09834, "stage1_bag_acc": 99.54751, "stage1_neg_loss": 0.04813, "stage1_mean_ious": 0.25428, "stage1_s": 0.0, "stage1_m": 0.02897, "stage1_l": 0.10947, "stage1_h": 0.26983, "loss": 0.15596, "grad_norm": 4.36863, "time": 1.63573}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17795, "data_time": 0.09425, "stage0_loss_instance_mil": 0.00306, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.23682, "stage0_s": 0.00156, "stage0_m": 0.03239, "stage0_l": 0.09051, "stage0_h": 0.26144, "stage1_loss_instance_mil": 0.10012, "stage1_bag_acc": 99.92593, "stage1_neg_loss": 0.04572, "stage1_mean_ious": 0.22673, "stage1_s": 0.00194, "stage1_m": 0.02772, "stage1_l": 0.08313, "stage1_h": 0.25097, "loss": 0.1489, "grad_norm": 4.61353, "time": 1.72949}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17795, "data_time": 0.0426, "stage0_loss_instance_mil": 0.00472, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.23609, "stage0_s": 0.0, "stage0_m": 0.03422, "stage0_l": 0.09821, "stage0_h": 0.25259, "stage1_loss_instance_mil": 0.09348, "stage1_bag_acc": 99.64077, "stage1_neg_loss": 0.04804, "stage1_mean_ious": 0.22524, "stage1_s": 0.0, "stage1_m": 0.03548, "stage1_l": 0.08686, "stage1_h": 0.24167, "loss": 0.14624, "grad_norm": 5.09136, "time": 1.70555}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04062, "stage0_loss_instance_mil": 0.00571, "stage0_bag_acc": 99.6329, "stage0_mean_ious": 0.24586, "stage0_s": 0.0, "stage0_m": 0.03057, "stage0_l": 0.08855, "stage0_h": 0.26312, "stage1_loss_instance_mil": 0.10252, "stage1_bag_acc": 99.85714, "stage1_neg_loss": 0.04549, "stage1_mean_ious": 0.23539, "stage1_s": 0.0, "stage1_m": 0.02277, "stage1_l": 0.0783, "stage1_h": 0.25398, "loss": 0.15372, "grad_norm": 4.67662, "time": 1.66053}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09294, "stage0_loss_instance_mil": 0.00681, "stage0_bag_acc": 99.61294, "stage0_mean_ious": 0.24628, "stage0_s": 0.0, "stage0_m": 0.01876, "stage0_l": 0.08936, "stage0_h": 0.25872, "stage1_loss_instance_mil": 0.09715, "stage1_bag_acc": 99.64643, "stage1_neg_loss": 0.04648, "stage1_mean_ious": 0.23406, "stage1_s": 0.0, "stage1_m": 0.01978, "stage1_l": 0.08169, "stage1_h": 0.2458, "loss": 0.15043, "grad_norm": 4.75935, "time": 1.7124}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04204, "stage0_loss_instance_mil": 0.00261, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.23535, "stage0_s": 0.00132, "stage0_m": 0.04218, "stage0_l": 0.093, "stage0_h": 0.25287, "stage1_loss_instance_mil": 0.09451, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.04381, "stage1_mean_ious": 0.22364, "stage1_s": 0.00188, "stage1_m": 0.0317, "stage1_l": 0.08487, "stage1_h": 0.24068, "loss": 0.14093, "grad_norm": 4.50875, "time": 1.72339}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04032, "stage0_loss_instance_mil": 0.00352, "stage0_bag_acc": 99.80383, "stage0_mean_ious": 0.24059, "stage0_s": 0.0, "stage0_m": 0.04121, "stage0_l": 0.08651, "stage0_h": 0.25691, "stage1_loss_instance_mil": 0.09637, "stage1_bag_acc": 99.80383, "stage1_neg_loss": 0.0472, "stage1_mean_ious": 0.22858, "stage1_s": 0.0, "stage1_m": 0.04046, "stage1_l": 0.07913, "stage1_h": 0.24393, "loss": 0.1471, "grad_norm": 4.82258, "time": 1.67926}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09355, "stage0_loss_instance_mil": 0.00267, "stage0_bag_acc": 99.93333, "stage0_mean_ious": 0.22812, "stage0_s": 0.0, "stage0_m": 0.03643, "stage0_l": 0.09819, "stage0_h": 0.24963, "stage1_loss_instance_mil": 0.10327, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04087, "stage1_mean_ious": 0.22012, "stage1_s": 0.0, "stage1_m": 0.03331, "stage1_l": 0.0917, "stage1_h": 0.24171, "loss": 0.14682, "grad_norm": 4.66376, "time": 1.73552}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.03952, "stage0_loss_instance_mil": 0.00388, "stage0_bag_acc": 99.75714, "stage0_mean_ious": 0.23907, "stage0_s": 0.0, "stage0_m": 0.0304, "stage0_l": 0.09876, "stage0_h": 0.25363, "stage1_loss_instance_mil": 0.09891, "stage1_bag_acc": 99.67381, "stage1_neg_loss": 0.04571, "stage1_mean_ious": 0.22746, "stage1_s": 0.0, "stage1_m": 0.02398, "stage1_l": 0.08895, "stage1_h": 0.24221, "loss": 0.1485, "grad_norm": 5.10316, "time": 1.67142}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04176, "stage0_loss_instance_mil": 0.00301, "stage0_bag_acc": 99.88889, "stage0_mean_ious": 0.22418, "stage0_s": 0.0, "stage0_m": 0.0465, "stage0_l": 0.09186, "stage0_h": 0.23831, "stage1_loss_instance_mil": 0.101, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.04279, "stage1_mean_ious": 0.21195, "stage1_s": 0.0, "stage1_m": 0.04479, "stage1_l": 0.0795, "stage1_h": 0.22724, "loss": 0.1468, "grad_norm": 4.62857, "time": 1.73373}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.047, "bbox_mAP_50": 0.155, "bbox_mAP_75": 0.086, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.014, "bbox_mAP_l": 0.004, "bbox_mAP_copypaste": "0.047 0.155 0.086 0.028 0.014 0.004"}
