{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 1.05311, "stage0_loss_instance_mil": 0.71263, "stage0_bag_acc": 21.15472, "stage0_mean_ious": 0.33902, "stage0_s": 0.0, "stage0_m": 0.01671, "stage0_l": 0.24131, "stage0_h": 0.34548, "stage1_loss_instance_mil": 0.16842, "stage1_bag_acc": 14.07135, "stage1_neg_loss": 0.00076, "stage1_mean_ious": 0.34917, "stage1_s": 0.0, "stage1_m": 0.01917, "stage1_l": 0.26778, "stage1_h": 0.35376, "loss": 0.88181, "grad_norm": 3.0485, "time": 10.47192}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 1.31712, "stage0_loss_instance_mil": 0.59182, "stage0_bag_acc": 52.75553, "stage0_mean_ious": 0.39265, "stage0_s": 0.0, "stage0_m": 0.05259, "stage0_l": 0.31188, "stage0_h": 0.40081, "stage1_loss_instance_mil": 0.2441, "stage1_bag_acc": 27.14828, "stage1_neg_loss": 0.00258, "stage1_mean_ious": 0.38983, "stage1_s": 0.0, "stage1_m": 0.05534, "stage1_l": 0.32938, "stage1_h": 0.39515, "loss": 0.83849, "grad_norm": 3.94306, "time": 11.22862}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.48752, "stage0_loss_instance_mil": 0.25757, "stage0_bag_acc": 83.90907, "stage0_mean_ious": 0.4156, "stage0_s": 0.0, "stage0_m": 0.11382, "stage0_l": 0.26972, "stage0_h": 0.42974, "stage1_loss_instance_mil": 0.3193, "stage1_bag_acc": 78.36721, "stage1_neg_loss": 0.06149, "stage1_mean_ious": 0.40139, "stage1_s": 0.0, "stage1_m": 0.10001, "stage1_l": 0.25939, "stage1_h": 0.41538, "loss": 0.63836, "grad_norm": 9.77103, "time": 4.58473}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.91349, "stage0_loss_instance_mil": 0.09298, "stage0_bag_acc": 95.0021, "stage0_mean_ious": 0.42045, "stage0_s": 0.0, "stage0_m": 0.05113, "stage0_l": 0.2258, "stage0_h": 0.44202, "stage1_loss_instance_mil": 0.29204, "stage1_bag_acc": 96.76693, "stage1_neg_loss": 0.07558, "stage1_mean_ious": 0.41801, "stage1_s": 0.0, "stage1_m": 0.05546, "stage1_l": 0.24685, "stage1_h": 0.43606, "loss": 0.46059, "grad_norm": 12.9093, "time": 9.2052}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.99208, "stage0_loss_instance_mil": 0.05296, "stage0_bag_acc": 96.88579, "stage0_mean_ious": 0.41775, "stage0_s": 0.0, "stage0_m": 0.04193, "stage0_l": 0.17859, "stage0_h": 0.45236, "stage1_loss_instance_mil": 0.25845, "stage1_bag_acc": 98.85558, "stage1_neg_loss": 0.08133, "stage1_mean_ious": 0.40451, "stage1_s": 0.0, "stage1_m": 0.04347, "stage1_l": 0.18994, "stage1_h": 0.43537, "loss": 0.39274, "grad_norm": 13.15674, "time": 11.24486}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.55113, "stage0_loss_instance_mil": 0.05182, "stage0_bag_acc": 96.57318, "stage0_mean_ious": 0.44151, "stage0_s": 0.0, "stage0_m": 0.0468, "stage0_l": 0.18207, "stage0_h": 0.47627, "stage1_loss_instance_mil": 0.25762, "stage1_bag_acc": 98.07948, "stage1_neg_loss": 0.09593, "stage1_mean_ious": 0.42731, "stage1_s": 0.0, "stage1_m": 0.05045, "stage1_l": 0.18596, "stage1_h": 0.456, "loss": 0.40538, "grad_norm": 18.94065, "time": 5.24956}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 1.08728, "stage0_loss_instance_mil": 0.0336, "stage0_bag_acc": 98.48762, "stage0_mean_ious": 0.44553, "stage0_s": 0.0, "stage0_m": 0.05094, "stage0_l": 0.15535, "stage0_h": 0.48506, "stage1_loss_instance_mil": 0.22434, "stage1_bag_acc": 98.70984, "stage1_neg_loss": 0.07745, "stage1_mean_ious": 0.41882, "stage1_s": 0.0, "stage1_m": 0.05717, "stage1_l": 0.16313, "stage1_h": 0.45256, "loss": 0.33539, "grad_norm": 15.38081, "time": 8.66192}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.83014, "stage0_loss_instance_mil": 0.03067, "stage0_bag_acc": 98.46023, "stage0_mean_ious": 0.45038, "stage0_s": 0.0, "stage0_m": 0.05554, "stage0_l": 0.20456, "stage0_h": 0.4908, "stage1_loss_instance_mil": 0.17496, "stage1_bag_acc": 99.13318, "stage1_neg_loss": 0.07891, "stage1_mean_ious": 0.4396, "stage1_s": 0.0, "stage1_m": 0.05755, "stage1_l": 0.21599, "stage1_h": 0.47567, "loss": 0.28454, "grad_norm": 13.86285, "time": 7.3989}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.2822, "stage0_loss_instance_mil": 0.03788, "stage0_bag_acc": 97.5712, "stage0_mean_ious": 0.4652, "stage0_s": 0.00121, "stage0_m": 0.07229, "stage0_l": 0.20687, "stage0_h": 0.50106, "stage1_loss_instance_mil": 0.1645, "stage1_bag_acc": 98.54017, "stage1_neg_loss": 0.05729, "stage1_mean_ious": 0.45394, "stage1_s": 0.00128, "stage1_m": 0.07611, "stage1_l": 0.22753, "stage1_h": 0.48634, "loss": 0.25968, "grad_norm": 10.8974, "time": 3.83071}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.25676, "stage0_loss_instance_mil": 0.02439, "stage0_bag_acc": 98.75944, "stage0_mean_ious": 0.45132, "stage0_s": 0.0, "stage0_m": 0.04318, "stage0_l": 0.19482, "stage0_h": 0.48364, "stage1_loss_instance_mil": 0.14834, "stage1_bag_acc": 98.90831, "stage1_neg_loss": 0.05461, "stage1_mean_ious": 0.43279, "stage1_s": 0.0, "stage1_m": 0.0424, "stage1_l": 0.20579, "stage1_h": 0.46094, "loss": 0.22735, "grad_norm": 12.40658, "time": 3.12246}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.45099, "stage0_loss_instance_mil": 0.01589, "stage0_bag_acc": 99.3933, "stage0_mean_ious": 0.50737, "stage0_s": 0.0, "stage0_m": 0.0438, "stage0_l": 0.22002, "stage0_h": 0.53931, "stage1_loss_instance_mil": 0.13262, "stage1_bag_acc": 99.46853, "stage1_neg_loss": 0.05962, "stage1_mean_ious": 0.48807, "stage1_s": 0.0, "stage1_m": 0.04239, "stage1_l": 0.22805, "stage1_h": 0.51527, "loss": 0.20813, "grad_norm": 10.52974, "time": 4.92316}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.31603, "stage0_loss_instance_mil": 0.02965, "stage0_bag_acc": 98.12771, "stage0_mean_ious": 0.51174, "stage0_s": 0.0, "stage0_m": 0.05945, "stage0_l": 0.25098, "stage0_h": 0.55968, "stage1_loss_instance_mil": 0.13571, "stage1_bag_acc": 98.52121, "stage1_neg_loss": 0.04954, "stage1_mean_ious": 0.4989, "stage1_s": 0.0, "stage1_m": 0.06733, "stage1_l": 0.26997, "stage1_h": 0.53923, "loss": 0.21491, "grad_norm": 10.10176, "time": 4.26174}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.26487, "stage0_loss_instance_mil": 0.01252, "stage0_bag_acc": 98.98877, "stage0_mean_ious": 0.56143, "stage0_s": 0.0, "stage0_m": 0.05701, "stage0_l": 0.19418, "stage0_h": 0.60444, "stage1_loss_instance_mil": 0.10339, "stage1_bag_acc": 99.52076, "stage1_neg_loss": 0.04209, "stage1_mean_ious": 0.52231, "stage1_s": 0.0, "stage1_m": 0.06214, "stage1_l": 0.19719, "stage1_h": 0.55759, "loss": 0.15801, "grad_norm": 7.87942, "time": 2.71054}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.48978, "stage0_loss_instance_mil": 0.03024, "stage0_bag_acc": 98.36235, "stage0_mean_ious": 0.5411, "stage0_s": 0.0, "stage0_m": 0.06169, "stage0_l": 0.2381, "stage0_h": 0.58803, "stage1_loss_instance_mil": 0.11518, "stage1_bag_acc": 98.5542, "stage1_neg_loss": 0.04533, "stage1_mean_ious": 0.51942, "stage1_s": 0.0, "stage1_m": 0.0778, "stage1_l": 0.24522, "stage1_h": 0.55903, "loss": 0.19075, "grad_norm": 9.86543, "time": 5.91252}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.44678, "stage0_loss_instance_mil": 0.01828, "stage0_bag_acc": 99.22553, "stage0_mean_ious": 0.55606, "stage0_s": 0.0, "stage0_m": 0.04066, "stage0_l": 0.24625, "stage0_h": 0.59009, "stage1_loss_instance_mil": 0.1032, "stage1_bag_acc": 99.16442, "stage1_neg_loss": 0.03821, "stage1_mean_ious": 0.53747, "stage1_s": 0.0, "stage1_m": 0.04689, "stage1_l": 0.27352, "stage1_h": 0.56472, "loss": 0.1597, "grad_norm": 7.55721, "time": 5.21033}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.37856, "stage0_loss_instance_mil": 0.01053, "stage0_bag_acc": 99.68363, "stage0_mean_ious": 0.5539, "stage0_s": 0.0, "stage0_m": 0.06017, "stage0_l": 0.23231, "stage0_h": 0.60094, "stage1_loss_instance_mil": 0.09001, "stage1_bag_acc": 99.44077, "stage1_neg_loss": 0.039, "stage1_mean_ious": 0.52884, "stage1_s": 0.0, "stage1_m": 0.06252, "stage1_l": 0.25229, "stage1_h": 0.56655, "loss": 0.13955, "grad_norm": 7.30474, "time": 4.06723}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.46051, "stage0_loss_instance_mil": 0.00829, "stage0_bag_acc": 99.68947, "stage0_mean_ious": 0.56272, "stage0_s": 0.0, "stage0_m": 0.04377, "stage0_l": 0.21974, "stage0_h": 0.59518, "stage1_loss_instance_mil": 0.08776, "stage1_bag_acc": 99.37183, "stage1_neg_loss": 0.03711, "stage1_mean_ious": 0.54085, "stage1_s": 0.0, "stage1_m": 0.0548, "stage1_l": 0.25855, "stage1_h": 0.56537, "loss": 0.13317, "grad_norm": 8.54004, "time": 5.38942}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.37319, "stage0_loss_instance_mil": 0.02024, "stage0_bag_acc": 98.74269, "stage0_mean_ious": 0.55491, "stage0_s": 0.0, "stage0_m": 0.07913, "stage0_l": 0.22612, "stage0_h": 0.58897, "stage1_loss_instance_mil": 0.10979, "stage1_bag_acc": 98.83622, "stage1_neg_loss": 0.05268, "stage1_mean_ious": 0.53244, "stage1_s": 0.0, "stage1_m": 0.08482, "stage1_l": 0.23954, "stage1_h": 0.56165, "loss": 0.18271, "grad_norm": 10.54349, "time": 4.21012}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.193, "bbox_mAP_50": 0.414, "bbox_mAP_75": 0.314, "bbox_mAP_s": 0.208, "bbox_mAP_m": 0.165, "bbox_mAP_l": 0.115, "bbox_mAP_copypaste": "0.193 0.414 0.314 0.208 0.165 0.115"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.31832, "stage0_loss_instance_mil": 0.01038, "stage0_bag_acc": 99.11288, "stage0_mean_ious": 0.5125, "stage0_s": 0.0, "stage0_m": 0.08834, "stage0_l": 0.2186, "stage0_h": 0.56366, "stage1_loss_instance_mil": 0.10287, "stage1_bag_acc": 99.34267, "stage1_neg_loss": 0.04266, "stage1_mean_ious": 0.4913, "stage1_s": 0.0, "stage1_m": 0.09875, "stage1_l": 0.23903, "stage1_h": 0.53329, "loss": 0.15591, "grad_norm": 8.55456, "time": 3.78675}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.43992, "stage0_loss_instance_mil": 0.021, "stage0_bag_acc": 98.74034, "stage0_mean_ious": 0.5167, "stage0_s": 0.0, "stage0_m": 0.073, "stage0_l": 0.25967, "stage0_h": 0.55605, "stage1_loss_instance_mil": 0.09513, "stage1_bag_acc": 99.12417, "stage1_neg_loss": 0.04246, "stage1_mean_ious": 0.49641, "stage1_s": 0.0, "stage1_m": 0.08013, "stage1_l": 0.28219, "stage1_h": 0.52778, "loss": 0.15858, "grad_norm": 8.35782, "time": 4.96827}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.38842, "stage0_loss_instance_mil": 0.00965, "stage0_bag_acc": 99.5745, "stage0_mean_ious": 0.55755, "stage0_s": 0.0, "stage0_m": 0.06457, "stage0_l": 0.24283, "stage0_h": 0.6023, "stage1_loss_instance_mil": 0.08969, "stage1_bag_acc": 99.78363, "stage1_neg_loss": 0.03549, "stage1_mean_ious": 0.53641, "stage1_s": 0.0, "stage1_m": 0.07559, "stage1_l": 0.25674, "stage1_h": 0.57199, "loss": 0.13483, "grad_norm": 8.10286, "time": 4.79622}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.30783, "stage0_loss_instance_mil": 0.00415, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.53143, "stage0_s": 0.00124, "stage0_m": 0.05231, "stage0_l": 0.26654, "stage0_h": 0.56579, "stage1_loss_instance_mil": 0.08333, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.03596, "stage1_mean_ious": 0.51179, "stage1_s": 0.00164, "stage1_m": 0.05607, "stage1_l": 0.28461, "stage1_h": 0.54155, "loss": 0.12344, "grad_norm": 6.61715, "time": 3.71732}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.49231, "stage0_loss_instance_mil": 0.009, "stage0_bag_acc": 99.59361, "stage0_mean_ious": 0.55224, "stage0_s": 0.0, "stage0_m": 0.05186, "stage0_l": 0.22062, "stage0_h": 0.58589, "stage1_loss_instance_mil": 0.08989, "stage1_bag_acc": 99.55731, "stage1_neg_loss": 0.03671, "stage1_mean_ious": 0.52852, "stage1_s": 0.0, "stage1_m": 0.0587, "stage1_l": 0.22186, "stage1_h": 0.55703, "loss": 0.1356, "grad_norm": 6.57675, "time": 4.88883}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.51032, "stage0_loss_instance_mil": 0.0031, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.5762, "stage0_s": 0.0, "stage0_m": 0.02894, "stage0_l": 0.27048, "stage0_h": 0.61113, "stage1_loss_instance_mil": 0.0844, "stage1_bag_acc": 99.72727, "stage1_neg_loss": 0.0388, "stage1_mean_ious": 0.55369, "stage1_s": 0.0, "stage1_m": 0.03236, "stage1_l": 0.28995, "stage1_h": 0.58135, "loss": 0.12629, "grad_norm": 7.61846, "time": 4.84575}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.26802, "stage0_loss_instance_mil": 0.00955, "stage0_bag_acc": 99.38052, "stage0_mean_ious": 0.56952, "stage0_s": 0.0, "stage0_m": 0.03569, "stage0_l": 0.28817, "stage0_h": 0.59815, "stage1_loss_instance_mil": 0.06765, "stage1_bag_acc": 99.4769, "stage1_neg_loss": 0.02809, "stage1_mean_ious": 0.54877, "stage1_s": 0.0, "stage1_m": 0.03383, "stage1_l": 0.30264, "stage1_h": 0.57183, "loss": 0.10529, "grad_norm": 4.58344, "time": 3.11437}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.47321, "stage0_loss_instance_mil": 0.00338, "stage0_bag_acc": 99.91667, "stage0_mean_ious": 0.57127, "stage0_s": 0.0, "stage0_m": 0.0485, "stage0_l": 0.28388, "stage0_h": 0.60948, "stage1_loss_instance_mil": 0.0551, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03262, "stage1_mean_ious": 0.54592, "stage1_s": 0.0, "stage1_m": 0.04541, "stage1_l": 0.30918, "stage1_h": 0.57614, "loss": 0.09109, "grad_norm": 5.40752, "time": 5.18257}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.35363, "stage0_loss_instance_mil": 0.00557, "stage0_bag_acc": 99.8, "stage0_mean_ious": 0.56792, "stage0_s": 0.0, "stage0_m": 0.06087, "stage0_l": 0.25961, "stage0_h": 0.60228, "stage1_loss_instance_mil": 0.06381, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.03018, "stage1_mean_ious": 0.54133, "stage1_s": 0.0, "stage1_m": 0.05889, "stage1_l": 0.26735, "stage1_h": 0.56965, "loss": 0.09956, "grad_norm": 4.83982, "time": 4.57604}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.34104, "stage0_loss_instance_mil": 0.00674, "stage0_bag_acc": 99.66447, "stage0_mean_ious": 0.55725, "stage0_s": 0.0, "stage0_m": 0.0324, "stage0_l": 0.31219, "stage0_h": 0.58405, "stage1_loss_instance_mil": 0.05772, "stage1_bag_acc": 99.78947, "stage1_neg_loss": 0.03055, "stage1_mean_ious": 0.54061, "stage1_s": 0.0, "stage1_m": 0.03918, "stage1_l": 0.35087, "stage1_h": 0.55935, "loss": 0.09502, "grad_norm": 5.31375, "time": 3.71236}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.4126, "stage0_loss_instance_mil": 0.00496, "stage0_bag_acc": 99.77473, "stage0_mean_ious": 0.57728, "stage0_s": 0.0, "stage0_m": 0.0675, "stage0_l": 0.28598, "stage0_h": 0.61328, "stage1_loss_instance_mil": 0.06438, "stage1_bag_acc": 99.92857, "stage1_neg_loss": 0.0278, "stage1_mean_ious": 0.54189, "stage1_s": 0.0, "stage1_m": 0.0744, "stage1_l": 0.30527, "stage1_h": 0.56781, "loss": 0.09714, "grad_norm": 4.35209, "time": 4.6532}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.2801, "stage0_loss_instance_mil": 0.00193, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.57454, "stage0_s": 0.0, "stage0_m": 0.05415, "stage0_l": 0.31709, "stage0_h": 0.60639, "stage1_loss_instance_mil": 0.05018, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02812, "stage1_mean_ious": 0.54482, "stage1_s": 0.0, "stage1_m": 0.0532, "stage1_l": 0.33426, "stage1_h": 0.57007, "loss": 0.08023, "grad_norm": 3.91234, "time": 4.11537}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.28234, "stage0_loss_instance_mil": 0.00266, "stage0_bag_acc": 99.80235, "stage0_mean_ious": 0.5676, "stage0_s": 0.0, "stage0_m": 0.05636, "stage0_l": 0.29818, "stage0_h": 0.61032, "stage1_loss_instance_mil": 0.05288, "stage1_bag_acc": 99.80235, "stage1_neg_loss": 0.0262, "stage1_mean_ious": 0.54209, "stage1_s": 0.0, "stage1_m": 0.06294, "stage1_l": 0.32274, "stage1_h": 0.57612, "loss": 0.08175, "grad_norm": 4.77868, "time": 3.15572}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.54771, "stage0_loss_instance_mil": 0.00163, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.57198, "stage0_s": 0.0, "stage0_m": 0.05365, "stage0_l": 0.27592, "stage0_h": 0.60038, "stage1_loss_instance_mil": 0.05537, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.02713, "stage1_mean_ious": 0.54702, "stage1_s": 0.0, "stage1_m": 0.05811, "stage1_l": 0.28395, "stage1_h": 0.56961, "loss": 0.08413, "grad_norm": 4.82555, "time": 5.7783}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.39248, "stage0_loss_instance_mil": 0.00205, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.55398, "stage0_s": 0.0, "stage0_m": 0.10618, "stage0_l": 0.28314, "stage0_h": 0.5933, "stage1_loss_instance_mil": 0.04847, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02503, "stage1_mean_ious": 0.52465, "stage1_s": 0.0, "stage1_m": 0.1147, "stage1_l": 0.28786, "stage1_h": 0.55711, "loss": 0.07555, "grad_norm": 3.96659, "time": 5.01664}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.54303, "stage0_loss_instance_mil": 0.00138, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.57158, "stage0_s": 0.0, "stage0_m": 0.06165, "stage0_l": 0.27532, "stage0_h": 0.60762, "stage1_loss_instance_mil": 0.05088, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02702, "stage1_mean_ious": 0.54294, "stage1_s": 0.0, "stage1_m": 0.06528, "stage1_l": 0.29678, "stage1_h": 0.57223, "loss": 0.07928, "grad_norm": 4.20593, "time": 4.393}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.38529, "stage0_loss_instance_mil": 0.00113, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.5707, "stage0_s": 0.0, "stage0_m": 0.05498, "stage0_l": 0.28441, "stage0_h": 0.60671, "stage1_loss_instance_mil": 0.05308, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02534, "stage1_mean_ious": 0.54751, "stage1_s": 0.0, "stage1_m": 0.06903, "stage1_l": 0.29901, "stage1_h": 0.57702, "loss": 0.07954, "grad_norm": 4.21781, "time": 4.40523}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.34981, "stage0_loss_instance_mil": 0.0044, "stage0_bag_acc": 99.91304, "stage0_mean_ious": 0.56302, "stage0_s": 0.0, "stage0_m": 0.08097, "stage0_l": 0.30055, "stage0_h": 0.60463, "stage1_loss_instance_mil": 0.04858, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.02936, "stage1_mean_ious": 0.54972, "stage1_s": 0.0, "stage1_m": 0.08888, "stage1_l": 0.31969, "stage1_h": 0.58365, "loss": 0.08234, "grad_norm": 4.78162, "time": 4.4401}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.23, "bbox_mAP_50": 0.489, "bbox_mAP_75": 0.388, "bbox_mAP_s": 0.255, "bbox_mAP_m": 0.183, "bbox_mAP_l": 0.11, "bbox_mAP_copypaste": "0.230 0.489 0.388 0.255 0.183 0.110"}
