{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+963dd25", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=12,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 16742, "data_time": 0.08056, "stage0_loss_instance_mil": 0.64989, "stage0_bag_acc": 31.31609, "stage0_mean_ious": 0.33857, "stage0_s": 0.0, "stage0_m": 0.01141, "stage0_l": 0.1957, "stage0_h": 0.34947, "stage1_loss_instance_mil": 0.17997, "stage1_bag_acc": 24.20203, "stage1_neg_loss": 0.0087, "stage1_mean_ious": 0.31547, "stage1_s": 0.0, "stage1_m": 0.01119, "stage1_l": 0.171, "stage1_h": 0.32697, "loss": 0.83857, "grad_norm": 3.68754, "time": 1.50853}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 16742, "data_time": 0.03219, "stage0_loss_instance_mil": 0.3136, "stage0_bag_acc": 73.63717, "stage0_mean_ious": 0.41496, "stage0_s": 0.0, "stage0_m": 0.03481, "stage0_l": 0.27443, "stage0_h": 0.43761, "stage1_loss_instance_mil": 0.35639, "stage1_bag_acc": 65.5852, "stage1_neg_loss": 0.05992, "stage1_mean_ious": 0.39207, "stage1_s": 0.0, "stage1_m": 0.03366, "stage1_l": 0.27255, "stage1_h": 0.41102, "loss": 0.7299, "grad_norm": 7.69023, "time": 1.50329}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 16742, "data_time": 0.03069, "stage0_loss_instance_mil": 0.31386, "stage0_bag_acc": 75.38018, "stage0_mean_ious": 0.26576, "stage0_s": 0.0, "stage0_m": 0.0706, "stage0_l": 0.22605, "stage0_h": 0.26567, "stage1_loss_instance_mil": 0.34157, "stage1_bag_acc": 59.63879, "stage1_neg_loss": 0.07468, "stage1_mean_ious": 0.26483, "stage1_s": 0.0, "stage1_m": 0.07494, "stage1_l": 0.21503, "stage1_h": 0.26623, "loss": 0.73012, "grad_norm": 6.67129, "time": 1.44279}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00917, "memory": 16742, "data_time": 0.08474, "stage0_loss_instance_mil": 0.2864, "stage0_bag_acc": 80.67294, "stage0_mean_ious": 0.24475, "stage0_s": 0.0, "stage0_m": 0.06955, "stage0_l": 0.18587, "stage0_h": 0.24429, "stage1_loss_instance_mil": 0.43334, "stage1_bag_acc": 55.87271, "stage1_neg_loss": 0.05602, "stage1_mean_ious": 0.23209, "stage1_s": 0.0, "stage1_m": 0.06571, "stage1_l": 0.17626, "stage1_h": 0.23201, "loss": 0.77576, "grad_norm": 4.51791, "time": 1.51862}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01117, "memory": 16742, "data_time": 0.02729, "stage0_loss_instance_mil": 0.2639, "stage0_bag_acc": 85.03828, "stage0_mean_ious": 0.29587, "stage0_s": 0.0, "stage0_m": 0.05657, "stage0_l": 0.22467, "stage0_h": 0.29991, "stage1_loss_instance_mil": 0.4897, "stage1_bag_acc": 53.10604, "stage1_neg_loss": 0.08299, "stage1_mean_ious": 0.29994, "stage1_s": 0.0, "stage1_m": 0.05259, "stage1_l": 0.23967, "stage1_h": 0.30242, "loss": 0.83658, "grad_norm": 4.4384, "time": 1.45595}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01317, "memory": 16742, "data_time": 0.03556, "stage0_loss_instance_mil": 0.4362, "stage0_bag_acc": 60.92318, "stage0_mean_ious": 0.34607, "stage0_s": 0.0, "stage0_m": 0.06331, "stage0_l": 0.22407, "stage0_h": 0.36583, "stage1_loss_instance_mil": 0.26775, "stage1_bag_acc": 51.54027, "stage1_neg_loss": 0.03758, "stage1_mean_ious": 0.33235, "stage1_s": 0.0, "stage1_m": 0.0486, "stage1_l": 0.22281, "stage1_h": 0.35087, "loss": 0.74154, "grad_norm": 2.71008, "time": 1.46372}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01636, "memory": 16742, "data_time": 0.07707, "stage0_loss_instance_mil": 0.36086, "stage0_bag_acc": 72.01787, "stage0_mean_ious": 0.31864, "stage0_s": 0.0, "stage0_m": 0.04056, "stage0_l": 0.19574, "stage0_h": 0.33178, "stage1_loss_instance_mil": 0.32412, "stage1_bag_acc": 62.40618, "stage1_neg_loss": 0.0441, "stage1_mean_ious": 0.3037, "stage1_s": 0.0, "stage1_m": 0.03386, "stage1_l": 0.18264, "stage1_h": 0.31817, "loss": 0.72909, "grad_norm": 4.06633, "time": 1.48207}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01836, "memory": 16742, "data_time": 0.03562, "stage0_loss_instance_mil": 0.30008, "stage0_bag_acc": 76.31336, "stage0_mean_ious": 0.2833, "stage0_s": 0.0, "stage0_m": 0.03825, "stage0_l": 0.20501, "stage0_h": 0.28606, "stage1_loss_instance_mil": 0.3635, "stage1_bag_acc": 69.79809, "stage1_neg_loss": 0.07109, "stage1_mean_ious": 0.27467, "stage1_s": 0.0, "stage1_m": 0.02595, "stage1_l": 0.19427, "stage1_h": 0.27861, "loss": 0.73468, "grad_norm": 3.74878, "time": 1.462}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03015, "stage0_loss_instance_mil": 0.27577, "stage0_bag_acc": 82.21341, "stage0_mean_ious": 0.21403, "stage0_s": 0.00127, "stage0_m": 0.06544, "stage0_l": 0.20994, "stage0_h": 0.2083, "stage1_loss_instance_mil": 0.36153, "stage1_bag_acc": 71.53049, "stage1_neg_loss": 0.06127, "stage1_mean_ious": 0.20406, "stage1_s": 0.00238, "stage1_m": 0.04946, "stage1_l": 0.21015, "stage1_h": 0.19948, "loss": 0.69858, "grad_norm": 2.76409, "time": 1.46778}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08717, "stage0_loss_instance_mil": 0.4279, "stage0_bag_acc": 61.11629, "stage0_mean_ious": 0.27437, "stage0_s": 0.0, "stage0_m": 0.04973, "stage0_l": 0.23295, "stage0_h": 0.28074, "stage1_loss_instance_mil": 0.30731, "stage1_bag_acc": 47.65337, "stage1_neg_loss": 0.03373, "stage1_mean_ious": 0.26837, "stage1_s": 0.0, "stage1_m": 0.04615, "stage1_l": 0.23944, "stage1_h": 0.2726, "loss": 0.76894, "grad_norm": 2.15026, "time": 1.54498}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.03178, "stage0_loss_instance_mil": 0.31702, "stage0_bag_acc": 73.53388, "stage0_mean_ious": 0.24723, "stage0_s": 0.0, "stage0_m": 0.03853, "stage0_l": 0.22957, "stage0_h": 0.2497, "stage1_loss_instance_mil": 0.24619, "stage1_bag_acc": 77.28322, "stage1_neg_loss": 0.06451, "stage1_mean_ious": 0.24168, "stage1_s": 0.0, "stage1_m": 0.03018, "stage1_l": 0.22197, "stage1_h": 0.24535, "loss": 0.62772, "grad_norm": 2.9588, "time": 1.46772}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03341, "stage0_loss_instance_mil": 0.29358, "stage0_bag_acc": 79.02035, "stage0_mean_ious": 0.27312, "stage0_s": 0.0, "stage0_m": 0.03697, "stage0_l": 0.19563, "stage0_h": 0.27626, "stage1_loss_instance_mil": 0.36272, "stage1_bag_acc": 61.51896, "stage1_neg_loss": 0.05262, "stage1_mean_ious": 0.26694, "stage1_s": 0.0, "stage1_m": 0.02994, "stage1_l": 0.19612, "stage1_h": 0.27157, "loss": 0.70892, "grad_norm": 2.37621, "time": 1.45332}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08635, "stage0_loss_instance_mil": 0.38079, "stage0_bag_acc": 67.27112, "stage0_mean_ious": 0.37419, "stage0_s": 0.0, "stage0_m": 0.05527, "stage0_l": 0.25898, "stage0_h": 0.39402, "stage1_loss_instance_mil": 0.30494, "stage1_bag_acc": 60.14908, "stage1_neg_loss": 0.04892, "stage1_mean_ious": 0.35873, "stage1_s": 0.0, "stage1_m": 0.05495, "stage1_l": 0.25656, "stage1_h": 0.37602, "loss": 0.73465, "grad_norm": 2.09641, "time": 1.51822}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.0292, "stage0_loss_instance_mil": 0.2658, "stage0_bag_acc": 80.25976, "stage0_mean_ious": 0.36838, "stage0_s": 0.0, "stage0_m": 0.02852, "stage0_l": 0.26329, "stage0_h": 0.37977, "stage1_loss_instance_mil": 0.36439, "stage1_bag_acc": 68.20817, "stage1_neg_loss": 0.05652, "stage1_mean_ious": 0.36343, "stage1_s": 0.0, "stage1_m": 0.0278, "stage1_l": 0.27324, "stage1_h": 0.37097, "loss": 0.68671, "grad_norm": 2.14243, "time": 1.47528}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03008, "stage0_loss_instance_mil": 0.25208, "stage0_bag_acc": 83.49605, "stage0_mean_ious": 0.32934, "stage0_s": 0.0, "stage0_m": 0.03617, "stage0_l": 0.19521, "stage0_h": 0.33929, "stage1_loss_instance_mil": 0.35239, "stage1_bag_acc": 72.41315, "stage1_neg_loss": 0.06071, "stage1_mean_ious": 0.32639, "stage1_s": 0.0, "stage1_m": 0.03938, "stage1_l": 0.22873, "stage1_h": 0.32907, "loss": 0.66519, "grad_norm": 2.53772, "time": 1.46735}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07708, "stage0_loss_instance_mil": 0.21591, "stage0_bag_acc": 87.18727, "stage0_mean_ious": 0.3546, "stage0_s": 0.0, "stage0_m": 0.03423, "stage0_l": 0.18849, "stage0_h": 0.36891, "stage1_loss_instance_mil": 0.35021, "stage1_bag_acc": 80.44642, "stage1_neg_loss": 0.06578, "stage1_mean_ious": 0.33242, "stage1_s": 0.0, "stage1_m": 0.02834, "stage1_l": 0.18484, "stage1_h": 0.34444, "loss": 0.6319, "grad_norm": 2.5708, "time": 1.52921}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02488, "stage0_loss_instance_mil": 0.15565, "stage0_bag_acc": 88.79953, "stage0_mean_ious": 0.38851, "stage0_s": 0.0, "stage0_m": 0.0704, "stage0_l": 0.22337, "stage0_h": 0.40311, "stage1_loss_instance_mil": 0.30008, "stage1_bag_acc": 85.86751, "stage1_neg_loss": 0.07645, "stage1_mean_ious": 0.38404, "stage1_s": 0.0, "stage1_m": 0.07381, "stage1_l": 0.21508, "stage1_h": 0.39894, "loss": 0.53219, "grad_norm": 2.7202, "time": 1.42924}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03331, "stage0_loss_instance_mil": 0.2366, "stage0_bag_acc": 83.8575, "stage0_mean_ious": 0.35837, "stage0_s": 0.0, "stage0_m": 0.05044, "stage0_l": 0.24536, "stage0_h": 0.36751, "stage1_loss_instance_mil": 0.26797, "stage1_bag_acc": 87.31753, "stage1_neg_loss": 0.06444, "stage1_mean_ious": 0.35439, "stage1_s": 0.0, "stage1_m": 0.05131, "stage1_l": 0.249, "stage1_h": 0.36242, "loss": 0.56902, "grad_norm": 2.4365, "time": 1.45233}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08406, "stage0_loss_instance_mil": 0.19225, "stage0_bag_acc": 86.49862, "stage0_mean_ious": 0.39207, "stage0_s": 0.00187, "stage0_m": 0.03963, "stage0_l": 0.18226, "stage0_h": 0.417, "stage1_loss_instance_mil": 0.31313, "stage1_bag_acc": 75.19225, "stage1_neg_loss": 0.05426, "stage1_mean_ious": 0.39478, "stage1_s": 0.00213, "stage1_m": 0.03475, "stage1_l": 0.187, "stage1_h": 0.41774, "loss": 0.55964, "grad_norm": 2.05003, "time": 1.5635}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02891, "stage0_loss_instance_mil": 0.12474, "stage0_bag_acc": 91.93103, "stage0_mean_ious": 0.40054, "stage0_s": 0.0, "stage0_m": 0.04637, "stage0_l": 0.25264, "stage0_h": 0.42085, "stage1_loss_instance_mil": 0.26954, "stage1_bag_acc": 86.03587, "stage1_neg_loss": 0.06203, "stage1_mean_ious": 0.39514, "stage1_s": 0.0, "stage1_m": 0.04345, "stage1_l": 0.25652, "stage1_h": 0.41615, "loss": 0.45631, "grad_norm": 2.12609, "time": 1.46627}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03221, "stage0_loss_instance_mil": 0.08041, "stage0_bag_acc": 94.2093, "stage0_mean_ious": 0.41473, "stage0_s": 0.0, "stage0_m": 0.02783, "stage0_l": 0.21229, "stage0_h": 0.43214, "stage1_loss_instance_mil": 0.27831, "stage1_bag_acc": 94.83741, "stage1_neg_loss": 0.07291, "stage1_mean_ious": 0.40529, "stage1_s": 0.0, "stage1_m": 0.02651, "stage1_l": 0.22178, "stage1_h": 0.42122, "loss": 0.43163, "grad_norm": 2.04775, "time": 1.49005}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07866, "stage0_loss_instance_mil": 0.12036, "stage0_bag_acc": 93.04166, "stage0_mean_ious": 0.40776, "stage0_s": 0.0, "stage0_m": 0.0295, "stage0_l": 0.22362, "stage0_h": 0.4232, "stage1_loss_instance_mil": 0.29283, "stage1_bag_acc": 84.02482, "stage1_neg_loss": 0.05863, "stage1_mean_ious": 0.40292, "stage1_s": 0.0, "stage1_m": 0.02893, "stage1_l": 0.23854, "stage1_h": 0.41388, "loss": 0.47182, "grad_norm": 2.05582, "time": 1.51358}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02917, "stage0_loss_instance_mil": 0.11426, "stage0_bag_acc": 92.8046, "stage0_mean_ious": 0.4081, "stage0_s": 0.0, "stage0_m": 0.02983, "stage0_l": 0.28647, "stage0_h": 0.42446, "stage1_loss_instance_mil": 0.24026, "stage1_bag_acc": 94.09966, "stage1_neg_loss": 0.06862, "stage1_mean_ious": 0.40643, "stage1_s": 0.0, "stage1_m": 0.02806, "stage1_l": 0.29468, "stage1_h": 0.42082, "loss": 0.42314, "grad_norm": 1.94421, "time": 1.46883}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02668, "stage0_loss_instance_mil": 0.09435, "stage0_bag_acc": 94.95026, "stage0_mean_ious": 0.43154, "stage0_s": 0.0, "stage0_m": 0.04109, "stage0_l": 0.28306, "stage0_h": 0.45788, "stage1_loss_instance_mil": 0.21795, "stage1_bag_acc": 89.40748, "stage1_neg_loss": 0.06448, "stage1_mean_ious": 0.42787, "stage1_s": 0.0, "stage1_m": 0.0433, "stage1_l": 0.30486, "stage1_h": 0.44953, "loss": 0.37678, "grad_norm": 1.76402, "time": 1.46749}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.0796, "stage0_loss_instance_mil": 0.10101, "stage0_bag_acc": 93.90486, "stage0_mean_ious": 0.4267, "stage0_s": 0.0, "stage0_m": 0.04697, "stage0_l": 0.24912, "stage0_h": 0.44636, "stage1_loss_instance_mil": 0.23782, "stage1_bag_acc": 94.9948, "stage1_neg_loss": 0.04436, "stage1_mean_ious": 0.41818, "stage1_s": 0.0, "stage1_m": 0.05464, "stage1_l": 0.29685, "stage1_h": 0.43147, "loss": 0.3832, "grad_norm": 1.58595, "time": 1.52176}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.02779, "stage0_loss_instance_mil": 0.06949, "stage0_bag_acc": 95.901, "stage0_mean_ious": 0.43114, "stage0_s": 0.0, "stage0_m": 0.05472, "stage0_l": 0.28047, "stage0_h": 0.45509, "stage1_loss_instance_mil": 0.15055, "stage1_bag_acc": 97.43602, "stage1_neg_loss": 0.06113, "stage1_mean_ious": 0.42325, "stage1_s": 0.0, "stage1_m": 0.06063, "stage1_l": 0.3028, "stage1_h": 0.44159, "loss": 0.28117, "grad_norm": 1.29852, "time": 1.45699}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.02942, "stage0_loss_instance_mil": 0.06857, "stage0_bag_acc": 96.16838, "stage0_mean_ious": 0.43728, "stage0_s": 0.0, "stage0_m": 0.04961, "stage0_l": 0.23592, "stage0_h": 0.4614, "stage1_loss_instance_mil": 0.15984, "stage1_bag_acc": 97.3296, "stage1_neg_loss": 0.05552, "stage1_mean_ious": 0.43075, "stage1_s": 0.0, "stage1_m": 0.05467, "stage1_l": 0.25574, "stage1_h": 0.45015, "loss": 0.28392, "grad_norm": 1.32288, "time": 1.46467}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.07976, "stage0_loss_instance_mil": 0.06311, "stage0_bag_acc": 96.24056, "stage0_mean_ious": 0.43136, "stage0_s": 0.0, "stage0_m": 0.05398, "stage0_l": 0.2876, "stage0_h": 0.44935, "stage1_loss_instance_mil": 0.14758, "stage1_bag_acc": 97.94489, "stage1_neg_loss": 0.05777, "stage1_mean_ious": 0.4293, "stage1_s": 0.0, "stage1_m": 0.05483, "stage1_l": 0.31806, "stage1_h": 0.44049, "loss": 0.26846, "grad_norm": 1.33764, "time": 1.51864}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.0283, "stage0_loss_instance_mil": 0.05886, "stage0_bag_acc": 95.94253, "stage0_mean_ious": 0.44408, "stage0_s": 0.0, "stage0_m": 0.03916, "stage0_l": 0.2642, "stage0_h": 0.46696, "stage1_loss_instance_mil": 0.13884, "stage1_bag_acc": 98.25266, "stage1_neg_loss": 0.04985, "stage1_mean_ious": 0.43625, "stage1_s": 0.0, "stage1_m": 0.04321, "stage1_l": 0.28626, "stage1_h": 0.45313, "loss": 0.24754, "grad_norm": 1.13023, "time": 1.45265}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.02825, "stage0_loss_instance_mil": 0.04739, "stage0_bag_acc": 97.25687, "stage0_mean_ious": 0.43449, "stage0_s": 0.0, "stage0_m": 0.0276, "stage0_l": 0.26307, "stage0_h": 0.45949, "stage1_loss_instance_mil": 0.13925, "stage1_bag_acc": 98.26787, "stage1_neg_loss": 0.05428, "stage1_mean_ious": 0.43237, "stage1_s": 0.0, "stage1_m": 0.03088, "stage1_l": 0.28699, "stage1_h": 0.45342, "loss": 0.24092, "grad_norm": 1.20614, "time": 1.46391}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 16742, "data_time": 0.08501, "stage0_loss_instance_mil": 0.05894, "stage0_bag_acc": 96.16782, "stage0_mean_ious": 0.44332, "stage0_s": 0.0, "stage0_m": 0.02601, "stage0_l": 0.23657, "stage0_h": 0.47049, "stage1_loss_instance_mil": 0.13367, "stage1_bag_acc": 97.68602, "stage1_neg_loss": 0.05548, "stage1_mean_ious": 0.4354, "stage1_s": 0.0, "stage1_m": 0.03312, "stage1_l": 0.27267, "stage1_h": 0.45527, "loss": 0.24808, "grad_norm": 1.36398, "time": 1.50551}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 16742, "data_time": 0.02703, "stage0_loss_instance_mil": 0.05358, "stage0_bag_acc": 96.28517, "stage0_mean_ious": 0.43946, "stage0_s": 0.0, "stage0_m": 0.04917, "stage0_l": 0.27216, "stage0_h": 0.46296, "stage1_loss_instance_mil": 0.14784, "stage1_bag_acc": 97.18914, "stage1_neg_loss": 0.05055, "stage1_mean_ious": 0.43309, "stage1_s": 0.0, "stage1_m": 0.05373, "stage1_l": 0.29315, "stage1_h": 0.44948, "loss": 0.25197, "grad_norm": 1.30199, "time": 1.48837}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 16742, "data_time": 0.03783, "stage0_loss_instance_mil": 0.04602, "stage0_bag_acc": 96.94114, "stage0_mean_ious": 0.43328, "stage0_s": 0.0, "stage0_m": 0.05071, "stage0_l": 0.23681, "stage0_h": 0.46621, "stage1_loss_instance_mil": 0.1337, "stage1_bag_acc": 98.91569, "stage1_neg_loss": 0.04961, "stage1_mean_ious": 0.42523, "stage1_s": 0.0, "stage1_m": 0.05942, "stage1_l": 0.26885, "stage1_h": 0.44936, "loss": 0.22933, "grad_norm": 1.27968, "time": 1.47591}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 16742, "data_time": 0.08018, "stage0_loss_instance_mil": 0.04319, "stage0_bag_acc": 97.05367, "stage0_mean_ious": 0.44173, "stage0_s": 0.0, "stage0_m": 0.04163, "stage0_l": 0.23685, "stage0_h": 0.46681, "stage1_loss_instance_mil": 0.14232, "stage1_bag_acc": 98.3377, "stage1_neg_loss": 0.05127, "stage1_mean_ious": 0.43249, "stage1_s": 0.0, "stage1_m": 0.0442, "stage1_l": 0.26242, "stage1_h": 0.4518, "loss": 0.23678, "grad_norm": 1.37514, "time": 1.5131}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 16742, "data_time": 0.0305, "stage0_loss_instance_mil": 0.04424, "stage0_bag_acc": 96.96528, "stage0_mean_ious": 0.47085, "stage0_s": 0.0, "stage0_m": 0.03889, "stage0_l": 0.24512, "stage0_h": 0.49744, "stage1_loss_instance_mil": 0.13258, "stage1_bag_acc": 98.43669, "stage1_neg_loss": 0.05198, "stage1_mean_ious": 0.45178, "stage1_s": 0.0, "stage1_m": 0.04043, "stage1_l": 0.28407, "stage1_h": 0.4702, "loss": 0.22881, "grad_norm": 1.37658, "time": 1.46558}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 16742, "data_time": 0.03048, "stage0_loss_instance_mil": 0.04244, "stage0_bag_acc": 97.33208, "stage0_mean_ious": 0.43775, "stage0_s": 0.0, "stage0_m": 0.03119, "stage0_l": 0.23407, "stage0_h": 0.46463, "stage1_loss_instance_mil": 0.126, "stage1_bag_acc": 98.62909, "stage1_neg_loss": 0.06206, "stage1_mean_ious": 0.4375, "stage1_s": 0.0, "stage1_m": 0.0351, "stage1_l": 0.27599, "stage1_h": 0.45796, "loss": 0.2305, "grad_norm": 1.47924, "time": 1.47038}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0002, "eval_iter_num": 90, "bbox_mAP": 0.067, "bbox_mAP_50": 0.249, "bbox_mAP_75": 0.12, "bbox_mAP_s": 0.033, "bbox_mAP_m": 0.015, "bbox_mAP_l": 0.004, "bbox_mAP_copypaste": "0.067 0.249 0.120 0.033 0.015 0.004"}
