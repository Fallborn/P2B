{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17769, "data_time": 0.08934, "stage0_loss_instance_mil": 0.69316, "stage0_bag_acc": 29.95804, "stage0_mean_ious": 0.29585, "stage0_s": 0.0, "stage0_m": 0.03421, "stage0_l": 0.23068, "stage0_h": 0.29955, "stage1_loss_instance_mil": 0.1811, "stage1_bag_acc": 18.29551, "stage1_neg_loss": 0.0014, "stage1_mean_ious": 0.28212, "stage1_s": 0.0, "stage1_m": 0.03324, "stage1_l": 0.23401, "stage1_h": 0.28288, "loss": 0.87566, "grad_norm": 3.18652, "time": 1.71278}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17769, "data_time": 0.03756, "stage0_loss_instance_mil": 0.54368, "stage0_bag_acc": 61.61937, "stage0_mean_ious": 0.32094, "stage0_s": 0.0, "stage0_m": 0.06156, "stage0_l": 0.20536, "stage0_h": 0.32853, "stage1_loss_instance_mil": 0.24375, "stage1_bag_acc": 36.11805, "stage1_neg_loss": 0.01119, "stage1_mean_ious": 0.31162, "stage1_s": 0.0, "stage1_m": 0.06077, "stage1_l": 0.1978, "stage1_h": 0.31823, "loss": 0.79862, "grad_norm": 4.89176, "time": 1.64322}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17769, "data_time": 0.03794, "stage0_loss_instance_mil": 0.23654, "stage0_bag_acc": 92.5393, "stage0_mean_ious": 0.34459, "stage0_s": 0.0017, "stage0_m": 0.09696, "stage0_l": 0.20149, "stage0_h": 0.35951, "stage1_loss_instance_mil": 0.35543, "stage1_bag_acc": 82.96314, "stage1_neg_loss": 0.06892, "stage1_mean_ious": 0.32686, "stage1_s": 0.00135, "stage1_m": 0.08825, "stage1_l": 0.19459, "stage1_h": 0.33981, "loss": 0.66089, "grad_norm": 10.08144, "time": 1.66295}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17783, "data_time": 0.095, "stage0_loss_instance_mil": 0.08525, "stage0_bag_acc": 95.81488, "stage0_mean_ious": 0.30971, "stage0_s": 0.0, "stage0_m": 0.0395, "stage0_l": 0.16814, "stage0_h": 0.32417, "stage1_loss_instance_mil": 0.33678, "stage1_bag_acc": 97.35171, "stage1_neg_loss": 0.09007, "stage1_mean_ious": 0.27307, "stage1_s": 0.0, "stage1_m": 0.03651, "stage1_l": 0.14158, "stage1_h": 0.28622, "loss": 0.5121, "grad_norm": 12.8441, "time": 1.70108}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17783, "data_time": 0.04226, "stage0_loss_instance_mil": 0.06004, "stage0_bag_acc": 96.38675, "stage0_mean_ious": 0.29291, "stage0_s": 0.0, "stage0_m": 0.05832, "stage0_l": 0.14597, "stage0_h": 0.31301, "stage1_loss_instance_mil": 0.32609, "stage1_bag_acc": 97.74222, "stage1_neg_loss": 0.08934, "stage1_mean_ious": 0.26308, "stage1_s": 0.0, "stage1_m": 0.04492, "stage1_l": 0.13094, "stage1_h": 0.28101, "loss": 0.47548, "grad_norm": 14.73979, "time": 1.6538}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17783, "data_time": 0.04416, "stage0_loss_instance_mil": 0.05337, "stage0_bag_acc": 97.20556, "stage0_mean_ious": 0.31021, "stage0_s": 0.0, "stage0_m": 0.02754, "stage0_l": 0.13281, "stage0_h": 0.32569, "stage1_loss_instance_mil": 0.34216, "stage1_bag_acc": 97.83521, "stage1_neg_loss": 0.09819, "stage1_mean_ious": 0.26966, "stage1_s": 0.0, "stage1_m": 0.01949, "stage1_l": 0.11555, "stage1_h": 0.28382, "loss": 0.49372, "grad_norm": 18.57909, "time": 1.69685}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17783, "data_time": 0.09261, "stage0_loss_instance_mil": 0.04387, "stage0_bag_acc": 97.93906, "stage0_mean_ious": 0.33835, "stage0_s": 0.0, "stage0_m": 0.02699, "stage0_l": 0.11088, "stage0_h": 0.3646, "stage1_loss_instance_mil": 0.30189, "stage1_bag_acc": 98.67773, "stage1_neg_loss": 0.09022, "stage1_mean_ious": 0.29535, "stage1_s": 0.0, "stage1_m": 0.01654, "stage1_l": 0.09365, "stage1_h": 0.31995, "loss": 0.43598, "grad_norm": 16.66236, "time": 1.72108}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17783, "data_time": 0.04142, "stage0_loss_instance_mil": 0.02691, "stage0_bag_acc": 98.23679, "stage0_mean_ious": 0.35372, "stage0_s": 0.0, "stage0_m": 0.04978, "stage0_l": 0.13732, "stage0_h": 0.37835, "stage1_loss_instance_mil": 0.29349, "stage1_bag_acc": 99.36196, "stage1_neg_loss": 0.10084, "stage1_mean_ious": 0.30981, "stage1_s": 0.0, "stage1_m": 0.04736, "stage1_l": 0.11533, "stage1_h": 0.33303, "loss": 0.42125, "grad_norm": 20.1556, "time": 1.68967}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17783, "data_time": 0.04242, "stage0_loss_instance_mil": 0.02705, "stage0_bag_acc": 98.90988, "stage0_mean_ious": 0.35178, "stage0_s": 0.0, "stage0_m": 0.03624, "stage0_l": 0.13845, "stage0_h": 0.38426, "stage1_loss_instance_mil": 0.26538, "stage1_bag_acc": 98.53318, "stage1_neg_loss": 0.09476, "stage1_mean_ious": 0.30398, "stage1_s": 0.0, "stage1_m": 0.02621, "stage1_l": 0.11429, "stage1_h": 0.3341, "loss": 0.38719, "grad_norm": 19.21935, "time": 1.68179}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17792, "data_time": 0.09223, "stage0_loss_instance_mil": 0.03533, "stage0_bag_acc": 97.85891, "stage0_mean_ious": 0.3304, "stage0_s": 0.0015, "stage0_m": 0.04251, "stage0_l": 0.12954, "stage0_h": 0.3563, "stage1_loss_instance_mil": 0.24823, "stage1_bag_acc": 98.28424, "stage1_neg_loss": 0.08286, "stage1_mean_ious": 0.28074, "stage1_s": 0.00163, "stage1_m": 0.03044, "stage1_l": 0.11027, "stage1_h": 0.30483, "loss": 0.36643, "grad_norm": 15.73836, "time": 1.72448}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17792, "data_time": 0.04218, "stage0_loss_instance_mil": 0.04491, "stage0_bag_acc": 97.07045, "stage0_mean_ious": 0.29587, "stage0_s": 0.0, "stage0_m": 0.01896, "stage0_l": 0.12552, "stage0_h": 0.31488, "stage1_loss_instance_mil": 0.24173, "stage1_bag_acc": 98.61496, "stage1_neg_loss": 0.07136, "stage1_mean_ious": 0.24537, "stage1_s": 0.0, "stage1_m": 0.01359, "stage1_l": 0.11362, "stage1_h": 0.26026, "loss": 0.358, "grad_norm": 12.76873, "time": 1.69637}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17792, "data_time": 0.04229, "stage0_loss_instance_mil": 0.03077, "stage0_bag_acc": 98.11106, "stage0_mean_ious": 0.23297, "stage0_s": 0.0, "stage0_m": 0.03511, "stage0_l": 0.11565, "stage0_h": 0.25339, "stage1_loss_instance_mil": 0.26798, "stage1_bag_acc": 99.15941, "stage1_neg_loss": 0.08, "stage1_mean_ious": 0.205, "stage1_s": 0.0, "stage1_m": 0.02314, "stage1_l": 0.09651, "stage1_h": 0.22464, "loss": 0.37874, "grad_norm": 14.59125, "time": 1.68595}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17792, "data_time": 0.09759, "stage0_loss_instance_mil": 0.02758, "stage0_bag_acc": 98.54678, "stage0_mean_ious": 0.24484, "stage0_s": 0.0, "stage0_m": 0.04296, "stage0_l": 0.08316, "stage0_h": 0.26281, "stage1_loss_instance_mil": 0.21148, "stage1_bag_acc": 99.37562, "stage1_neg_loss": 0.0749, "stage1_mean_ious": 0.21621, "stage1_s": 0.0, "stage1_m": 0.03551, "stage1_l": 0.06794, "stage1_h": 0.23352, "loss": 0.31397, "grad_norm": 11.7939, "time": 1.71219}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17792, "data_time": 0.04235, "stage0_loss_instance_mil": 0.01683, "stage0_bag_acc": 98.9196, "stage0_mean_ious": 0.19748, "stage0_s": 0.0, "stage0_m": 0.01851, "stage0_l": 0.0906, "stage0_h": 0.20929, "stage1_loss_instance_mil": 0.20622, "stage1_bag_acc": 99.12162, "stage1_neg_loss": 0.07572, "stage1_mean_ious": 0.17609, "stage1_s": 0.0, "stage1_m": 0.01241, "stage1_l": 0.07425, "stage1_h": 0.18863, "loss": 0.29878, "grad_norm": 12.41388, "time": 1.69874}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17792, "data_time": 0.04456, "stage0_loss_instance_mil": 0.03367, "stage0_bag_acc": 97.27814, "stage0_mean_ious": 0.18985, "stage0_s": 0.0, "stage0_m": 0.01696, "stage0_l": 0.09199, "stage0_h": 0.19853, "stage1_loss_instance_mil": 0.19973, "stage1_bag_acc": 98.16468, "stage1_neg_loss": 0.0689, "stage1_mean_ious": 0.17245, "stage1_s": 0.0, "stage1_m": 0.01584, "stage1_l": 0.07647, "stage1_h": 0.18198, "loss": 0.3023, "grad_norm": 9.69906, "time": 1.69332}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17792, "data_time": 0.0928, "stage0_loss_instance_mil": 0.0142, "stage0_bag_acc": 98.96383, "stage0_mean_ious": 0.15575, "stage0_s": 0.0, "stage0_m": 0.03547, "stage0_l": 0.09147, "stage0_h": 0.16208, "stage1_loss_instance_mil": 0.19145, "stage1_bag_acc": 99.47936, "stage1_neg_loss": 0.07326, "stage1_mean_ious": 0.14035, "stage1_s": 0.0, "stage1_m": 0.02845, "stage1_l": 0.07167, "stage1_h": 0.1482, "loss": 0.27892, "grad_norm": 11.44101, "time": 1.70846}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17792, "data_time": 0.04523, "stage0_loss_instance_mil": 0.01847, "stage0_bag_acc": 99.00081, "stage0_mean_ious": 0.17044, "stage0_s": 0.0, "stage0_m": 0.01819, "stage0_l": 0.1031, "stage0_h": 0.17668, "stage1_loss_instance_mil": 0.17096, "stage1_bag_acc": 99.27079, "stage1_neg_loss": 0.06393, "stage1_mean_ious": 0.15326, "stage1_s": 0.0, "stage1_m": 0.01182, "stage1_l": 0.09042, "stage1_h": 0.16077, "loss": 0.25336, "grad_norm": 8.99124, "time": 1.7104}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17792, "data_time": 0.04594, "stage0_loss_instance_mil": 0.0248, "stage0_bag_acc": 98.2307, "stage0_mean_ious": 0.15549, "stage0_s": 0.00185, "stage0_m": 0.02011, "stage0_l": 0.09664, "stage0_h": 0.15884, "stage1_loss_instance_mil": 0.18851, "stage1_bag_acc": 98.69597, "stage1_neg_loss": 0.06976, "stage1_mean_ious": 0.13878, "stage1_s": 0.0014, "stage1_m": 0.01347, "stage1_l": 0.08107, "stage1_h": 0.14333, "loss": 0.28307, "grad_norm": 10.88969, "time": 1.68948}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.001, "bbox_mAP_50": 0.007, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.001, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.001 0.007 0.001 0.001 0.001 0.000"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17792, "data_time": 0.09459, "stage0_loss_instance_mil": 0.01183, "stage0_bag_acc": 99.5148, "stage0_mean_ious": 0.1654, "stage0_s": 0.00134, "stage0_m": 0.02709, "stage0_l": 0.10408, "stage0_h": 0.17062, "stage1_loss_instance_mil": 0.15445, "stage1_bag_acc": 99.2538, "stage1_neg_loss": 0.0618, "stage1_mean_ious": 0.14822, "stage1_s": 0.00217, "stage1_m": 0.01915, "stage1_l": 0.09055, "stage1_h": 0.15417, "loss": 0.22808, "grad_norm": 9.35917, "time": 1.7259}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17792, "data_time": 0.04258, "stage0_loss_instance_mil": 0.02115, "stage0_bag_acc": 98.67507, "stage0_mean_ious": 0.17353, "stage0_s": 0.0, "stage0_m": 0.0397, "stage0_l": 0.10092, "stage0_h": 0.17963, "stage1_loss_instance_mil": 0.14384, "stage1_bag_acc": 99.14406, "stage1_neg_loss": 0.06079, "stage1_mean_ious": 0.15737, "stage1_s": 0.0, "stage1_m": 0.03304, "stage1_l": 0.09595, "stage1_h": 0.16261, "loss": 0.22578, "grad_norm": 8.89561, "time": 1.65689}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17792, "data_time": 0.04218, "stage0_loss_instance_mil": 0.02297, "stage0_bag_acc": 98.50906, "stage0_mean_ious": 0.18932, "stage0_s": 0.0, "stage0_m": 0.03304, "stage0_l": 0.08827, "stage0_h": 0.19791, "stage1_loss_instance_mil": 0.15657, "stage1_bag_acc": 98.77551, "stage1_neg_loss": 0.0593, "stage1_mean_ious": 0.16894, "stage1_s": 0.0, "stage1_m": 0.02508, "stage1_l": 0.07876, "stage1_h": 0.17665, "loss": 0.23884, "grad_norm": 9.40484, "time": 1.67046}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17792, "data_time": 0.0904, "stage0_loss_instance_mil": 0.01399, "stage0_bag_acc": 99.58711, "stage0_mean_ious": 0.14411, "stage0_s": 0.0, "stage0_m": 0.04682, "stage0_l": 0.09012, "stage0_h": 0.15216, "stage1_loss_instance_mil": 0.14937, "stage1_bag_acc": 98.88525, "stage1_neg_loss": 0.05847, "stage1_mean_ious": 0.1313, "stage1_s": 0.0, "stage1_m": 0.03453, "stage1_l": 0.08128, "stage1_h": 0.14039, "loss": 0.22183, "grad_norm": 9.85681, "time": 1.7028}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17792, "data_time": 0.04385, "stage0_loss_instance_mil": 0.01728, "stage0_bag_acc": 99.04001, "stage0_mean_ious": 0.15328, "stage0_s": 0.0, "stage0_m": 0.01622, "stage0_l": 0.09084, "stage0_h": 0.15931, "stage1_loss_instance_mil": 0.13608, "stage1_bag_acc": 98.90335, "stage1_neg_loss": 0.06156, "stage1_mean_ious": 0.13886, "stage1_s": 0.0, "stage1_m": 0.01433, "stage1_l": 0.08148, "stage1_h": 0.14498, "loss": 0.21492, "grad_norm": 8.34955, "time": 1.70732}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17792, "data_time": 0.04484, "stage0_loss_instance_mil": 0.0158, "stage0_bag_acc": 99.05584, "stage0_mean_ious": 0.1478, "stage0_s": 0.0, "stage0_m": 0.03582, "stage0_l": 0.09459, "stage0_h": 0.14869, "stage1_loss_instance_mil": 0.13647, "stage1_bag_acc": 99.54902, "stage1_neg_loss": 0.05606, "stage1_mean_ious": 0.13492, "stage1_s": 0.0, "stage1_m": 0.03317, "stage1_l": 0.0834, "stage1_h": 0.13577, "loss": 0.20833, "grad_norm": 7.49148, "time": 1.67484}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17792, "data_time": 0.0967, "stage0_loss_instance_mil": 0.00842, "stage0_bag_acc": 99.38135, "stage0_mean_ious": 0.16502, "stage0_s": 0.0, "stage0_m": 0.02847, "stage0_l": 0.08675, "stage0_h": 0.17254, "stage1_loss_instance_mil": 0.10793, "stage1_bag_acc": 99.70383, "stage1_neg_loss": 0.04822, "stage1_mean_ious": 0.14486, "stage1_s": 0.0, "stage1_m": 0.02173, "stage1_l": 0.08243, "stage1_h": 0.15124, "loss": 0.16457, "grad_norm": 5.72782, "time": 1.74074}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17792, "data_time": 0.04138, "stage0_loss_instance_mil": 0.00944, "stage0_bag_acc": 99.37902, "stage0_mean_ious": 0.16608, "stage0_s": 0.0017, "stage0_m": 0.03145, "stage0_l": 0.08484, "stage0_h": 0.17374, "stage1_loss_instance_mil": 0.11385, "stage1_bag_acc": 99.46206, "stage1_neg_loss": 0.05411, "stage1_mean_ious": 0.14726, "stage1_s": 0.00235, "stage1_m": 0.03062, "stage1_l": 0.07869, "stage1_h": 0.15362, "loss": 0.1774, "grad_norm": 6.29294, "time": 1.66715}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17792, "data_time": 0.04076, "stage0_loss_instance_mil": 0.00292, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.16351, "stage0_s": 0.0, "stage0_m": 0.03136, "stage0_l": 0.09138, "stage0_h": 0.17124, "stage1_loss_instance_mil": 0.10657, "stage1_bag_acc": 99.90909, "stage1_neg_loss": 0.05513, "stage1_mean_ious": 0.14683, "stage1_s": 0.0, "stage1_m": 0.02528, "stage1_l": 0.07804, "stage1_h": 0.15432, "loss": 0.16463, "grad_norm": 6.00524, "time": 1.65721}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17795, "data_time": 0.08842, "stage0_loss_instance_mil": 0.00291, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.16771, "stage0_s": 0.00085, "stage0_m": 0.02872, "stage0_l": 0.08712, "stage0_h": 0.17448, "stage1_loss_instance_mil": 0.11302, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.05283, "stage1_mean_ious": 0.14939, "stage1_s": 6e-05, "stage1_m": 0.02401, "stage1_l": 0.07597, "stage1_h": 0.15566, "loss": 0.16875, "grad_norm": 6.43727, "time": 1.7191}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17795, "data_time": 0.04044, "stage0_loss_instance_mil": 0.00705, "stage0_bag_acc": 99.81818, "stage0_mean_ious": 0.18014, "stage0_s": 0.0, "stage0_m": 0.01542, "stage0_l": 0.09805, "stage0_h": 0.19041, "stage1_loss_instance_mil": 0.10332, "stage1_bag_acc": 99.81818, "stage1_neg_loss": 0.05266, "stage1_mean_ious": 0.16079, "stage1_s": 0.0, "stage1_m": 0.01072, "stage1_l": 0.09002, "stage1_h": 0.16996, "loss": 0.16304, "grad_norm": 6.08347, "time": 1.68833}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17795, "data_time": 0.04234, "stage0_loss_instance_mil": 0.00605, "stage0_bag_acc": 99.67124, "stage0_mean_ious": 0.17935, "stage0_s": 0.0, "stage0_m": 0.04407, "stage0_l": 0.08938, "stage0_h": 0.18929, "stage1_loss_instance_mil": 0.1041, "stage1_bag_acc": 99.69798, "stage1_neg_loss": 0.04984, "stage1_mean_ious": 0.15686, "stage1_s": 0.0, "stage1_m": 0.03498, "stage1_l": 0.07885, "stage1_h": 0.16567, "loss": 0.15998, "grad_norm": 5.67183, "time": 1.69202}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17795, "data_time": 0.09319, "stage0_loss_instance_mil": 0.00512, "stage0_bag_acc": 99.62235, "stage0_mean_ious": 0.19364, "stage0_s": 0.0, "stage0_m": 0.03469, "stage0_l": 0.10446, "stage0_h": 0.20341, "stage1_loss_instance_mil": 0.10312, "stage1_bag_acc": 99.74, "stage1_neg_loss": 0.04687, "stage1_mean_ious": 0.16958, "stage1_s": 0.0, "stage1_m": 0.02794, "stage1_l": 0.09445, "stage1_h": 0.17787, "loss": 0.15511, "grad_norm": 5.16878, "time": 1.76942}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17795, "data_time": 0.04022, "stage0_loss_instance_mil": 0.00541, "stage0_bag_acc": 99.72727, "stage0_mean_ious": 0.18842, "stage0_s": 0.0, "stage0_m": 0.0247, "stage0_l": 0.0837, "stage0_h": 0.19725, "stage1_loss_instance_mil": 0.09575, "stage1_bag_acc": 99.90909, "stage1_neg_loss": 0.04987, "stage1_mean_ious": 0.1672, "stage1_s": 0.0, "stage1_m": 0.02045, "stage1_l": 0.07492, "stage1_h": 0.17453, "loss": 0.15103, "grad_norm": 5.79764, "time": 1.67736}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17795, "data_time": 0.04043, "stage0_loss_instance_mil": 0.00269, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.19745, "stage0_s": 0.0, "stage0_m": 0.02321, "stage0_l": 0.08698, "stage0_h": 0.20967, "stage1_loss_instance_mil": 0.10415, "stage1_bag_acc": 99.81304, "stage1_neg_loss": 0.05123, "stage1_mean_ious": 0.17263, "stage1_s": 0.0, "stage1_m": 0.01641, "stage1_l": 0.07775, "stage1_h": 0.18357, "loss": 0.15807, "grad_norm": 5.98077, "time": 1.60827}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17795, "data_time": 0.09124, "stage0_loss_instance_mil": 0.00764, "stage0_bag_acc": 99.72461, "stage0_mean_ious": 0.18901, "stage0_s": 0.0, "stage0_m": 0.02081, "stage0_l": 0.08226, "stage0_h": 0.19815, "stage1_loss_instance_mil": 0.0946, "stage1_bag_acc": 99.52844, "stage1_neg_loss": 0.0467, "stage1_mean_ious": 0.16242, "stage1_s": 0.0, "stage1_m": 0.01902, "stage1_l": 0.07279, "stage1_h": 0.1694, "loss": 0.14894, "grad_norm": 5.4984, "time": 1.69891}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17795, "data_time": 0.0406, "stage0_loss_instance_mil": 0.00228, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.184, "stage0_s": 0.0, "stage0_m": 0.03509, "stage0_l": 0.09011, "stage0_h": 0.19539, "stage1_loss_instance_mil": 0.09566, "stage1_bag_acc": 99.7995, "stage1_neg_loss": 0.04691, "stage1_mean_ious": 0.165, "stage1_s": 0.0, "stage1_m": 0.02547, "stage1_l": 0.08158, "stage1_h": 0.1756, "loss": 0.14486, "grad_norm": 5.54123, "time": 1.65568}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17795, "data_time": 0.04121, "stage0_loss_instance_mil": 0.00199, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.18728, "stage0_s": 0.0, "stage0_m": 0.02192, "stage0_l": 0.10093, "stage0_h": 0.19781, "stage1_loss_instance_mil": 0.09333, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04633, "stage1_mean_ious": 0.16418, "stage1_s": 0.0, "stage1_m": 0.01784, "stage1_l": 0.08955, "stage1_h": 0.17375, "loss": 0.14165, "grad_norm": 5.30837, "time": 1.65463}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.002, "bbox_mAP_50": 0.009, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.002 0.009 0.001 0.000 0.000 0.000"}
