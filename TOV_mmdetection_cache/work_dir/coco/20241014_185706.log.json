{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bdcbe92", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 18775, "data_time": 0.08026, "stage0_loss_instance_mil": 0.70849, "stage0_bag_acc": 15.3174, "stage0_mean_ious": 0.0874, "stage0_s": 0.0, "stage0_m": 0.01642, "stage0_l": 0.12008, "stage0_h": 0.07856, "stage1_loss_instance_mil": 0.17664, "stage1_bag_acc": 14.06291, "stage1_neg_loss": 0.00079, "stage1_mean_ious": 0.08506, "stage1_s": 0.0, "stage1_m": 0.01893, "stage1_l": 0.1265, "stage1_h": 0.07473, "loss": 0.88592, "grad_norm": 3.14723, "time": 1.78275}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 18775, "data_time": 0.02849, "stage0_loss_instance_mil": 0.58413, "stage0_bag_acc": 49.27158, "stage0_mean_ious": 0.0973, "stage0_s": 0.0, "stage0_m": 0.01794, "stage0_l": 0.1336, "stage0_h": 0.08741, "stage1_loss_instance_mil": 0.23832, "stage1_bag_acc": 25.43518, "stage1_neg_loss": 0.00603, "stage1_mean_ious": 0.09795, "stage1_s": 0.0, "stage1_m": 0.02035, "stage1_l": 0.14154, "stage1_h": 0.08639, "loss": 0.82848, "grad_norm": 3.64597, "time": 1.7483}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 18775, "data_time": 0.02604, "stage0_loss_instance_mil": 0.28831, "stage0_bag_acc": 84.57996, "stage0_mean_ious": 0.09383, "stage0_s": 0.0, "stage0_m": 0.04435, "stage0_l": 0.1203, "stage0_h": 0.0853, "stage1_loss_instance_mil": 0.33937, "stage1_bag_acc": 78.90286, "stage1_neg_loss": 0.05818, "stage1_mean_ious": 0.09509, "stage1_s": 0.0, "stage1_m": 0.04214, "stage1_l": 0.12409, "stage1_h": 0.08644, "loss": 0.68586, "grad_norm": 8.48181, "time": 1.7302}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 18775, "data_time": 0.08301, "stage0_loss_instance_mil": 0.11606, "stage0_bag_acc": 94.43587, "stage0_mean_ious": 0.0958, "stage0_s": 0.0, "stage0_m": 0.03872, "stage0_l": 0.11577, "stage0_h": 0.0895, "stage1_loss_instance_mil": 0.35611, "stage1_bag_acc": 94.95393, "stage1_neg_loss": 0.07875, "stage1_mean_ious": 0.09469, "stage1_s": 0.0, "stage1_m": 0.03674, "stage1_l": 0.11719, "stage1_h": 0.08836, "loss": 0.55092, "grad_norm": 10.28918, "time": 1.81365}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 2e-05, "memory": 18775, "data_time": 0.03143, "stage0_loss_instance_mil": 0.0974, "stage0_bag_acc": 93.4711, "stage0_mean_ious": 0.09252, "stage0_s": 0.0, "stage0_m": 0.03332, "stage0_l": 0.09748, "stage0_h": 0.08695, "stage1_loss_instance_mil": 0.30492, "stage1_bag_acc": 94.07478, "stage1_neg_loss": 0.07193, "stage1_mean_ious": 0.09047, "stage1_s": 0.0, "stage1_m": 0.03064, "stage1_l": 0.0989, "stage1_h": 0.08467, "loss": 0.47426, "grad_norm": 9.71947, "time": 1.70912}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 18775, "data_time": 0.03305, "stage0_loss_instance_mil": 0.0957, "stage0_bag_acc": 93.44202, "stage0_mean_ious": 0.10076, "stage0_s": 0.0, "stage0_m": 0.03346, "stage0_l": 0.11476, "stage0_h": 0.09689, "stage1_loss_instance_mil": 0.2793, "stage1_bag_acc": 95.02865, "stage1_neg_loss": 0.07728, "stage1_mean_ious": 0.09831, "stage1_s": 0.0, "stage1_m": 0.03315, "stage1_l": 0.11296, "stage1_h": 0.09422, "loss": 0.45228, "grad_norm": 10.83867, "time": 1.77432}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 3e-05, "memory": 18775, "data_time": 0.07517, "stage0_loss_instance_mil": 0.06616, "stage0_bag_acc": 95.93259, "stage0_mean_ious": 0.09871, "stage0_s": 0.0, "stage0_m": 0.01902, "stage0_l": 0.09569, "stage0_h": 0.09667, "stage1_loss_instance_mil": 0.24344, "stage1_bag_acc": 96.92652, "stage1_neg_loss": 0.06939, "stage1_mean_ious": 0.09684, "stage1_s": 0.0, "stage1_m": 0.01737, "stage1_l": 0.09437, "stage1_h": 0.0946, "loss": 0.37899, "grad_norm": 9.84293, "time": 1.75784}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 4e-05, "memory": 18775, "data_time": 0.02625, "stage0_loss_instance_mil": 0.07467, "stage0_bag_acc": 94.37686, "stage0_mean_ious": 0.09652, "stage0_s": 0.0, "stage0_m": 0.02293, "stage0_l": 0.10319, "stage0_h": 0.09467, "stage1_loss_instance_mil": 0.22437, "stage1_bag_acc": 96.25031, "stage1_neg_loss": 0.07004, "stage1_mean_ious": 0.09499, "stage1_s": 0.0, "stage1_m": 0.02085, "stage1_l": 0.10413, "stage1_h": 0.09308, "loss": 0.36908, "grad_norm": 11.32084, "time": 1.73004}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 4e-05, "memory": 18775, "data_time": 0.02624, "stage0_loss_instance_mil": 0.07855, "stage0_bag_acc": 94.62924, "stage0_mean_ious": 0.10578, "stage0_s": 0.0, "stage0_m": 0.02264, "stage0_l": 0.12118, "stage0_h": 0.0997, "stage1_loss_instance_mil": 0.20054, "stage1_bag_acc": 95.24761, "stage1_neg_loss": 0.05968, "stage1_mean_ious": 0.1041, "stage1_s": 0.0, "stage1_m": 0.02144, "stage1_l": 0.11782, "stage1_h": 0.09829, "loss": 0.33877, "grad_norm": 11.0263, "time": 1.71875}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 18775, "data_time": 0.07539, "stage0_loss_instance_mil": 0.06983, "stage0_bag_acc": 95.05012, "stage0_mean_ious": 0.10097, "stage0_s": 0.0, "stage0_m": 0.04293, "stage0_l": 0.10565, "stage0_h": 0.09667, "stage1_loss_instance_mil": 0.18796, "stage1_bag_acc": 97.0684, "stage1_neg_loss": 0.06239, "stage1_mean_ious": 0.10162, "stage1_s": 0.0, "stage1_m": 0.04328, "stage1_l": 0.1113, "stage1_h": 0.09662, "loss": 0.32018, "grad_norm": 11.07904, "time": 1.75955}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 18775, "data_time": 0.02607, "stage0_loss_instance_mil": 0.05809, "stage0_bag_acc": 96.22954, "stage0_mean_ious": 0.10926, "stage0_s": 0.00351, "stage0_m": 0.04046, "stage0_l": 0.14009, "stage0_h": 0.10074, "stage1_loss_instance_mil": 0.17456, "stage1_bag_acc": 97.67844, "stage1_neg_loss": 0.0557, "stage1_mean_ious": 0.10745, "stage1_s": 0.00266, "stage1_m": 0.04077, "stage1_l": 0.14065, "stage1_h": 0.09863, "loss": 0.28835, "grad_norm": 9.80605, "time": 1.72849}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 18775, "data_time": 0.02615, "stage0_loss_instance_mil": 0.04164, "stage0_bag_acc": 97.63594, "stage0_mean_ious": 0.10685, "stage0_s": 0.0, "stage0_m": 0.03439, "stage0_l": 0.12194, "stage0_h": 0.09857, "stage1_loss_instance_mil": 0.14196, "stage1_bag_acc": 98.29322, "stage1_neg_loss": 0.05878, "stage1_mean_ious": 0.10559, "stage1_s": 0.0, "stage1_m": 0.03428, "stage1_l": 0.12158, "stage1_h": 0.09683, "loss": 0.24238, "grad_norm": 9.5031, "time": 1.70235}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 18775, "data_time": 0.08049, "stage0_loss_instance_mil": 0.04103, "stage0_bag_acc": 96.49485, "stage0_mean_ious": 0.11246, "stage0_s": 0.0, "stage0_m": 0.04031, "stage0_l": 0.1429, "stage0_h": 0.10374, "stage1_loss_instance_mil": 0.15803, "stage1_bag_acc": 95.65878, "stage1_neg_loss": 0.05144, "stage1_mean_ious": 0.11185, "stage1_s": 0.0, "stage1_m": 0.04345, "stage1_l": 0.14524, "stage1_h": 0.10264, "loss": 0.25051, "grad_norm": 9.2019, "time": 1.8027}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 18775, "data_time": 0.03078, "stage0_loss_instance_mil": 0.03503, "stage0_bag_acc": 97.54871, "stage0_mean_ious": 0.10736, "stage0_s": 0.0, "stage0_m": 0.03624, "stage0_l": 0.13003, "stage0_h": 0.09943, "stage1_loss_instance_mil": 0.13416, "stage1_bag_acc": 98.48765, "stage1_neg_loss": 0.05074, "stage1_mean_ious": 0.10686, "stage1_s": 0.0, "stage1_m": 0.03915, "stage1_l": 0.13463, "stage1_h": 0.09756, "loss": 0.21992, "grad_norm": 7.90581, "time": 1.75785}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 18775, "data_time": 0.03089, "stage0_loss_instance_mil": 0.04273, "stage0_bag_acc": 97.26796, "stage0_mean_ious": 0.10328, "stage0_s": 0.0, "stage0_m": 0.03484, "stage0_l": 0.12577, "stage0_h": 0.09557, "stage1_loss_instance_mil": 0.12859, "stage1_bag_acc": 97.27841, "stage1_neg_loss": 0.05249, "stage1_mean_ious": 0.10295, "stage1_s": 0.0, "stage1_m": 0.03656, "stage1_l": 0.12528, "stage1_h": 0.09519, "loss": 0.22381, "grad_norm": 8.39585, "time": 1.75427}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 18775, "data_time": 0.077, "stage0_loss_instance_mil": 0.03804, "stage0_bag_acc": 97.17224, "stage0_mean_ious": 0.10466, "stage0_s": 0.0, "stage0_m": 0.03597, "stage0_l": 0.12274, "stage0_h": 0.09647, "stage1_loss_instance_mil": 0.12018, "stage1_bag_acc": 97.77774, "stage1_neg_loss": 0.05041, "stage1_mean_ious": 0.10497, "stage1_s": 0.0, "stage1_m": 0.03606, "stage1_l": 0.12908, "stage1_h": 0.09568, "loss": 0.20863, "grad_norm": 7.2449, "time": 1.81658}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 18775, "data_time": 0.02689, "stage0_loss_instance_mil": 0.02592, "stage0_bag_acc": 98.51436, "stage0_mean_ious": 0.10313, "stage0_s": 0.0, "stage0_m": 0.02616, "stage0_l": 0.1147, "stage0_h": 0.0971, "stage1_loss_instance_mil": 0.11066, "stage1_bag_acc": 99.04876, "stage1_neg_loss": 0.04904, "stage1_mean_ious": 0.10397, "stage1_s": 0.0, "stage1_m": 0.02925, "stage1_l": 0.11871, "stage1_h": 0.09708, "loss": 0.18563, "grad_norm": 6.81561, "time": 1.76331}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 18775, "data_time": 0.0254, "stage0_loss_instance_mil": 0.02754, "stage0_bag_acc": 97.85656, "stage0_mean_ious": 0.11008, "stage0_s": 0.00755, "stage0_m": 0.03747, "stage0_l": 0.13039, "stage0_h": 0.10212, "stage1_loss_instance_mil": 0.11219, "stage1_bag_acc": 98.94044, "stage1_neg_loss": 0.04593, "stage1_mean_ious": 0.10917, "stage1_s": 0.00754, "stage1_m": 0.03618, "stage1_l": 0.1323, "stage1_h": 0.10078, "loss": 0.18566, "grad_norm": 7.00656, "time": 1.73662}
{"mode": "val", "epoch": 6, "iter": 150, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.061, "bbox_mAP_50": 0.163, "bbox_mAP_75": 0.111, "bbox_mAP_s": 0.061, "bbox_mAP_m": 0.035, "bbox_mAP_l": 0.017, "bbox_mAP_copypaste": "0.061 0.163 0.111 0.061 0.035 0.017"}
