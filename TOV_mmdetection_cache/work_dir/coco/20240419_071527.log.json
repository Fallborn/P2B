{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09395, "stage0_loss_instance_mil": 0.72096, "stage0_bag_acc": 17.32954, "stage0_mean_ious": 0.37442, "stage0_s": 0.0, "stage0_m": 0.0715, "stage0_l": 0.24156, "stage0_h": 0.38117, "stage1_loss_instance_mil": 0.16896, "stage1_bag_acc": 12.09885, "stage1_neg_loss": 0.00234, "stage1_mean_ious": 0.36793, "stage1_s": 0.0, "stage1_m": 0.07897, "stage1_l": 0.25029, "stage1_h": 0.37107, "loss": 0.89226, "grad_norm": 3.0372, "time": 1.68343}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04264, "stage0_loss_instance_mil": 0.56648, "stage0_bag_acc": 57.73602, "stage0_mean_ious": 0.40513, "stage0_s": 0.0, "stage0_m": 0.02083, "stage0_l": 0.22016, "stage0_h": 0.43292, "stage1_loss_instance_mil": 0.25593, "stage1_bag_acc": 20.61862, "stage1_neg_loss": 0.00483, "stage1_mean_ious": 0.39557, "stage1_s": 0.0, "stage1_m": 0.01975, "stage1_l": 0.23409, "stage1_h": 0.4199, "loss": 0.82724, "grad_norm": 3.54013, "time": 1.69393}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04244, "stage0_loss_instance_mil": 0.22196, "stage0_bag_acc": 88.83228, "stage0_mean_ious": 0.4506, "stage0_s": 0.0, "stage0_m": 0.02164, "stage0_l": 0.23146, "stage0_h": 0.46824, "stage1_loss_instance_mil": 0.32803, "stage1_bag_acc": 84.02679, "stage1_neg_loss": 0.06799, "stage1_mean_ious": 0.43122, "stage1_s": 0.0, "stage1_m": 0.02043, "stage1_l": 0.22899, "stage1_h": 0.44623, "loss": 0.61798, "grad_norm": 9.22575, "time": 1.66911}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09493, "stage0_loss_instance_mil": 0.06438, "stage0_bag_acc": 97.54097, "stage0_mean_ious": 0.45493, "stage0_s": 0.0, "stage0_m": 0.01771, "stage0_l": 0.30226, "stage0_h": 0.46899, "stage1_loss_instance_mil": 0.30692, "stage1_bag_acc": 98.18362, "stage1_neg_loss": 0.08536, "stage1_mean_ious": 0.44184, "stage1_s": 0.0, "stage1_m": 0.0176, "stage1_l": 0.31555, "stage1_h": 0.45263, "loss": 0.45667, "grad_norm": 13.37107, "time": 1.72566}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04155, "stage0_loss_instance_mil": 0.05645, "stage0_bag_acc": 96.64897, "stage0_mean_ious": 0.4232, "stage0_s": 0.0, "stage0_m": 0.05135, "stage0_l": 0.19982, "stage0_h": 0.44307, "stage1_loss_instance_mil": 0.30129, "stage1_bag_acc": 97.62445, "stage1_neg_loss": 0.09457, "stage1_mean_ious": 0.41015, "stage1_s": 0.0, "stage1_m": 0.05069, "stage1_l": 0.21108, "stage1_h": 0.42608, "loss": 0.45231, "grad_norm": 15.59466, "time": 1.65326}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04443, "stage0_loss_instance_mil": 0.06683, "stage0_bag_acc": 95.67791, "stage0_mean_ious": 0.43159, "stage0_s": 0.0, "stage0_m": 0.0794, "stage0_l": 0.28303, "stage0_h": 0.45273, "stage1_loss_instance_mil": 0.2797, "stage1_bag_acc": 97.08112, "stage1_neg_loss": 0.06871, "stage1_mean_ious": 0.4187, "stage1_s": 0.0, "stage1_m": 0.08387, "stage1_l": 0.30131, "stage1_h": 0.43533, "loss": 0.41524, "grad_norm": 12.36808, "time": 1.70966}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09807, "stage0_loss_instance_mil": 0.03747, "stage0_bag_acc": 98.26291, "stage0_mean_ious": 0.44714, "stage0_s": 0.0, "stage0_m": 0.07843, "stage0_l": 0.28736, "stage0_h": 0.45833, "stage1_loss_instance_mil": 0.2719, "stage1_bag_acc": 98.00127, "stage1_neg_loss": 0.07488, "stage1_mean_ious": 0.43794, "stage1_s": 0.0, "stage1_m": 0.09278, "stage1_l": 0.3092, "stage1_h": 0.44194, "loss": 0.38424, "grad_norm": 15.91393, "time": 1.75224}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04239, "stage0_loss_instance_mil": 0.04523, "stage0_bag_acc": 97.29858, "stage0_mean_ious": 0.44678, "stage0_s": 0.0, "stage0_m": 0.08795, "stage0_l": 0.29819, "stage0_h": 0.46447, "stage1_loss_instance_mil": 0.22165, "stage1_bag_acc": 98.20298, "stage1_neg_loss": 0.09066, "stage1_mean_ious": 0.42799, "stage1_s": 0.0, "stage1_m": 0.10254, "stage1_l": 0.29887, "stage1_h": 0.43991, "loss": 0.35754, "grad_norm": 20.26556, "time": 1.67912}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04156, "stage0_loss_instance_mil": 0.02756, "stage0_bag_acc": 98.30657, "stage0_mean_ious": 0.51123, "stage0_s": 0.0, "stage0_m": 0.06677, "stage0_l": 0.35219, "stage0_h": 0.52354, "stage1_loss_instance_mil": 0.21466, "stage1_bag_acc": 98.60129, "stage1_neg_loss": 0.06437, "stage1_mean_ious": 0.50897, "stage1_s": 0.0, "stage1_m": 0.07738, "stage1_l": 0.36791, "stage1_h": 0.51634, "loss": 0.30659, "grad_norm": 14.68743, "time": 1.66537}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09758, "stage0_loss_instance_mil": 0.03451, "stage0_bag_acc": 98.25876, "stage0_mean_ious": 0.54822, "stage0_s": 0.0, "stage0_m": 0.10946, "stage0_l": 0.31672, "stage0_h": 0.57542, "stage1_loss_instance_mil": 0.16109, "stage1_bag_acc": 98.5566, "stage1_neg_loss": 0.06168, "stage1_mean_ious": 0.52676, "stage1_s": 0.0, "stage1_m": 0.12193, "stage1_l": 0.35492, "stage1_h": 0.54363, "loss": 0.25728, "grad_norm": 14.88984, "time": 1.73386}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04259, "stage0_loss_instance_mil": 0.0204, "stage0_bag_acc": 98.81062, "stage0_mean_ious": 0.54781, "stage0_s": 0.0, "stage0_m": 0.07707, "stage0_l": 0.31613, "stage0_h": 0.56301, "stage1_loss_instance_mil": 0.15359, "stage1_bag_acc": 99.28566, "stage1_neg_loss": 0.05464, "stage1_mean_ious": 0.53076, "stage1_s": 0.0, "stage1_m": 0.09125, "stage1_l": 0.34988, "stage1_h": 0.53761, "loss": 0.22863, "grad_norm": 13.01625, "time": 1.65582}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04467, "stage0_loss_instance_mil": 0.01981, "stage0_bag_acc": 98.68373, "stage0_mean_ious": 0.52069, "stage0_s": 0.0, "stage0_m": 0.04325, "stage0_l": 0.33934, "stage0_h": 0.54717, "stage1_loss_instance_mil": 0.14735, "stage1_bag_acc": 99.41299, "stage1_neg_loss": 0.07037, "stage1_mean_ious": 0.50187, "stage1_s": 0.0, "stage1_m": 0.05099, "stage1_l": 0.37268, "stage1_h": 0.51945, "loss": 0.23753, "grad_norm": 16.68346, "time": 1.73263}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09463, "stage0_loss_instance_mil": 0.01381, "stage0_bag_acc": 98.92958, "stage0_mean_ious": 0.51346, "stage0_s": 0.0, "stage0_m": 0.08121, "stage0_l": 0.41776, "stage0_h": 0.52138, "stage1_loss_instance_mil": 0.15613, "stage1_bag_acc": 99.43125, "stage1_neg_loss": 0.05194, "stage1_mean_ious": 0.50071, "stage1_s": 0.0, "stage1_m": 0.0922, "stage1_l": 0.44475, "stage1_h": 0.50198, "loss": 0.22189, "grad_norm": 10.2962, "time": 1.73715}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04242, "stage0_loss_instance_mil": 0.01713, "stage0_bag_acc": 99.37254, "stage0_mean_ious": 0.53199, "stage0_s": 0.0, "stage0_m": 0.09888, "stage0_l": 0.34759, "stage0_h": 0.55101, "stage1_loss_instance_mil": 0.14686, "stage1_bag_acc": 99.31129, "stage1_neg_loss": 0.05112, "stage1_mean_ious": 0.51315, "stage1_s": 0.0, "stage1_m": 0.10649, "stage1_l": 0.35909, "stage1_h": 0.52643, "loss": 0.21511, "grad_norm": 11.88108, "time": 1.68634}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04173, "stage0_loss_instance_mil": 0.01634, "stage0_bag_acc": 98.97155, "stage0_mean_ious": 0.50011, "stage0_s": 0.0, "stage0_m": 0.06939, "stage0_l": 0.38148, "stage0_h": 0.50263, "stage1_loss_instance_mil": 0.13424, "stage1_bag_acc": 99.32941, "stage1_neg_loss": 0.05122, "stage1_mean_ious": 0.48683, "stage1_s": 0.0, "stage1_m": 0.08115, "stage1_l": 0.3922, "stage1_h": 0.48347, "loss": 0.2018, "grad_norm": 8.71981, "time": 1.66837}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09704, "stage0_loss_instance_mil": 0.00667, "stage0_bag_acc": 99.6254, "stage0_mean_ious": 0.53618, "stage0_s": 0.0, "stage0_m": 0.07752, "stage0_l": 0.39558, "stage0_h": 0.54094, "stage1_loss_instance_mil": 0.12564, "stage1_bag_acc": 99.59365, "stage1_neg_loss": 0.04625, "stage1_mean_ious": 0.5173, "stage1_s": 0.0, "stage1_m": 0.08765, "stage1_l": 0.40603, "stage1_h": 0.51858, "loss": 0.17856, "grad_norm": 9.65358, "time": 1.7575}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04246, "stage0_loss_instance_mil": 0.01171, "stage0_bag_acc": 99.23637, "stage0_mean_ious": 0.48702, "stage0_s": 0.0, "stage0_m": 0.09961, "stage0_l": 0.42728, "stage0_h": 0.48889, "stage1_loss_instance_mil": 0.1263, "stage1_bag_acc": 99.62978, "stage1_neg_loss": 0.0511, "stage1_mean_ious": 0.47495, "stage1_s": 0.0, "stage1_m": 0.10777, "stage1_l": 0.4548, "stage1_h": 0.47083, "loss": 0.18911, "grad_norm": 11.15746, "time": 1.70581}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04334, "stage0_loss_instance_mil": 0.03865, "stage0_bag_acc": 97.79702, "stage0_mean_ious": 0.52243, "stage0_s": 0.0, "stage0_m": 0.09441, "stage0_l": 0.31744, "stage0_h": 0.53201, "stage1_loss_instance_mil": 0.1262, "stage1_bag_acc": 98.71268, "stage1_neg_loss": 0.04888, "stage1_mean_ious": 0.49517, "stage1_s": 0.0, "stage1_m": 0.11059, "stage1_l": 0.33748, "stage1_h": 0.49688, "loss": 0.21372, "grad_norm": 11.19664, "time": 1.67134}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.12, "bbox_mAP_50": 0.325, "bbox_mAP_75": 0.212, "bbox_mAP_s": 0.113, "bbox_mAP_m": 0.068, "bbox_mAP_l": 0.033, "bbox_mAP_copypaste": "0.120 0.325 0.212 0.113 0.068 0.033"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09651, "stage0_loss_instance_mil": 0.02129, "stage0_bag_acc": 99.23114, "stage0_mean_ious": 0.48897, "stage0_s": 0.0, "stage0_m": 0.10701, "stage0_l": 0.39491, "stage0_h": 0.49583, "stage1_loss_instance_mil": 0.13017, "stage1_bag_acc": 98.30882, "stage1_neg_loss": 0.0478, "stage1_mean_ious": 0.4706, "stage1_s": 0.0, "stage1_m": 0.1228, "stage1_l": 0.41142, "stage1_h": 0.46934, "loss": 0.19925, "grad_norm": 7.837, "time": 1.72581}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04404, "stage0_loss_instance_mil": 0.00991, "stage0_bag_acc": 99.67019, "stage0_mean_ious": 0.51605, "stage0_s": 0.0, "stage0_m": 0.08291, "stage0_l": 0.38426, "stage0_h": 0.52763, "stage1_loss_instance_mil": 0.122, "stage1_bag_acc": 99.40188, "stage1_neg_loss": 0.04719, "stage1_mean_ious": 0.49588, "stage1_s": 0.0, "stage1_m": 0.09163, "stage1_l": 0.3928, "stage1_h": 0.50105, "loss": 0.17911, "grad_norm": 8.36187, "time": 1.7109}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04355, "stage0_loss_instance_mil": 0.00582, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.52239, "stage0_s": 0.0, "stage0_m": 0.0714, "stage0_l": 0.35207, "stage0_h": 0.53041, "stage1_loss_instance_mil": 0.1155, "stage1_bag_acc": 99.73217, "stage1_neg_loss": 0.05692, "stage1_mean_ious": 0.50032, "stage1_s": 0.0, "stage1_m": 0.07002, "stage1_l": 0.35325, "stage1_h": 0.50478, "loss": 0.17824, "grad_norm": 9.56334, "time": 1.69313}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09404, "stage0_loss_instance_mil": 0.01258, "stage0_bag_acc": 99.35002, "stage0_mean_ious": 0.5016, "stage0_s": 0.0, "stage0_m": 0.09077, "stage0_l": 0.33256, "stage0_h": 0.50901, "stage1_loss_instance_mil": 0.10983, "stage1_bag_acc": 99.25884, "stage1_neg_loss": 0.04392, "stage1_mean_ious": 0.47965, "stage1_s": 0.0, "stage1_m": 0.09587, "stage1_l": 0.3459, "stage1_h": 0.48286, "loss": 0.16633, "grad_norm": 9.59539, "time": 1.73596}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04229, "stage0_loss_instance_mil": 0.0058, "stage0_bag_acc": 99.70476, "stage0_mean_ious": 0.53307, "stage0_s": 0.00157, "stage0_m": 0.06099, "stage0_l": 0.37652, "stage0_h": 0.54488, "stage1_loss_instance_mil": 0.10521, "stage1_bag_acc": 99.60952, "stage1_neg_loss": 0.04692, "stage1_mean_ious": 0.51052, "stage1_s": 0.0015, "stage1_m": 0.06096, "stage1_l": 0.40918, "stage1_h": 0.5142, "loss": 0.15792, "grad_norm": 8.90716, "time": 1.69134}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04302, "stage0_loss_instance_mil": 0.00744, "stage0_bag_acc": 99.69376, "stage0_mean_ious": 0.54481, "stage0_s": 0.0, "stage0_m": 0.09573, "stage0_l": 0.37725, "stage0_h": 0.55885, "stage1_loss_instance_mil": 0.07805, "stage1_bag_acc": 99.6154, "stage1_neg_loss": 0.03858, "stage1_mean_ious": 0.52897, "stage1_s": 0.0, "stage1_m": 0.10637, "stage1_l": 0.40076, "stage1_h": 0.53503, "loss": 0.12408, "grad_norm": 6.41886, "time": 1.69689}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09748, "stage0_loss_instance_mil": 0.00849, "stage0_bag_acc": 99.25186, "stage0_mean_ious": 0.56061, "stage0_s": 0.0, "stage0_m": 0.04923, "stage0_l": 0.40984, "stage0_h": 0.57216, "stage1_loss_instance_mil": 0.07592, "stage1_bag_acc": 99.35471, "stage1_neg_loss": 0.04727, "stage1_mean_ious": 0.5396, "stage1_s": 0.0, "stage1_m": 0.05198, "stage1_l": 0.45026, "stage1_h": 0.54105, "loss": 0.13169, "grad_norm": 9.28171, "time": 1.76686}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04284, "stage0_loss_instance_mil": 0.00586, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.56362, "stage0_s": 0.0, "stage0_m": 0.10727, "stage0_l": 0.41252, "stage0_h": 0.57383, "stage1_loss_instance_mil": 0.06566, "stage1_bag_acc": 99.7995, "stage1_neg_loss": 0.0362, "stage1_mean_ious": 0.53856, "stage1_s": 0.0, "stage1_m": 0.11953, "stage1_l": 0.43149, "stage1_h": 0.542, "loss": 0.10772, "grad_norm": 5.68916, "time": 1.67591}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04189, "stage0_loss_instance_mil": 0.00572, "stage0_bag_acc": 99.53495, "stage0_mean_ious": 0.55717, "stage0_s": 0.0, "stage0_m": 0.06252, "stage0_l": 0.44686, "stage0_h": 0.56396, "stage1_loss_instance_mil": 0.07185, "stage1_bag_acc": 99.29983, "stage1_neg_loss": 0.03564, "stage1_mean_ious": 0.53342, "stage1_s": 0.0, "stage1_m": 0.06514, "stage1_l": 0.44777, "stage1_h": 0.53551, "loss": 0.11321, "grad_norm": 5.77402, "time": 1.68105}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09459, "stage0_loss_instance_mil": 0.008, "stage0_bag_acc": 99.71385, "stage0_mean_ious": 0.53971, "stage0_s": 0.0, "stage0_m": 0.14171, "stage0_l": 0.39894, "stage0_h": 0.55625, "stage1_loss_instance_mil": 0.06265, "stage1_bag_acc": 99.69365, "stage1_neg_loss": 0.03305, "stage1_mean_ious": 0.5147, "stage1_s": 0.0, "stage1_m": 0.15148, "stage1_l": 0.4122, "stage1_h": 0.52471, "loss": 0.1037, "grad_norm": 4.5693, "time": 1.71798}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04365, "stage0_loss_instance_mil": 0.00205, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.54508, "stage0_s": 0.0, "stage0_m": 0.07157, "stage0_l": 0.37629, "stage0_h": 0.55503, "stage1_loss_instance_mil": 0.06204, "stage1_bag_acc": 99.6, "stage1_neg_loss": 0.03929, "stage1_mean_ious": 0.52388, "stage1_s": 0.0, "stage1_m": 0.07116, "stage1_l": 0.40271, "stage1_h": 0.52699, "loss": 0.10338, "grad_norm": 6.32266, "time": 1.70599}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04269, "stage0_loss_instance_mil": 0.0028, "stage0_bag_acc": 99.86667, "stage0_mean_ious": 0.54797, "stage0_s": 0.0, "stage0_m": 0.05528, "stage0_l": 0.34739, "stage0_h": 0.55688, "stage1_loss_instance_mil": 0.0738, "stage1_bag_acc": 99.55029, "stage1_neg_loss": 0.03178, "stage1_mean_ious": 0.53061, "stage1_s": 0.0, "stage1_m": 0.06725, "stage1_l": 0.36425, "stage1_h": 0.53293, "loss": 0.10838, "grad_norm": 5.73438, "time": 1.71376}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09639, "stage0_loss_instance_mil": 0.00779, "stage0_bag_acc": 99.8114, "stage0_mean_ious": 0.5398, "stage0_s": 0.00161, "stage0_m": 0.16676, "stage0_l": 0.38109, "stage0_h": 0.54975, "stage1_loss_instance_mil": 0.07014, "stage1_bag_acc": 99.79474, "stage1_neg_loss": 0.03179, "stage1_mean_ious": 0.5197, "stage1_s": 0.00163, "stage1_m": 0.18918, "stage1_l": 0.39396, "stage1_h": 0.5229, "loss": 0.10973, "grad_norm": 5.10956, "time": 1.76841}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04138, "stage0_loss_instance_mil": 0.00272, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.53933, "stage0_s": 0.0, "stage0_m": 0.12863, "stage0_l": 0.38903, "stage0_h": 0.5491, "stage1_loss_instance_mil": 0.07102, "stage1_bag_acc": 99.78711, "stage1_neg_loss": 0.03385, "stage1_mean_ious": 0.52627, "stage1_s": 0.0, "stage1_m": 0.13904, "stage1_l": 0.41485, "stage1_h": 0.52866, "loss": 0.10759, "grad_norm": 5.25535, "time": 1.65126}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04229, "stage0_loss_instance_mil": 0.00825, "stage0_bag_acc": 99.32234, "stage0_mean_ious": 0.53436, "stage0_s": 0.0, "stage0_m": 0.05469, "stage0_l": 0.35412, "stage0_h": 0.54063, "stage1_loss_instance_mil": 0.06266, "stage1_bag_acc": 99.73504, "stage1_neg_loss": 0.03347, "stage1_mean_ious": 0.51646, "stage1_s": 0.0, "stage1_m": 0.06086, "stage1_l": 0.3585, "stage1_h": 0.52029, "loss": 0.10437, "grad_norm": 5.7775, "time": 1.69536}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09629, "stage0_loss_instance_mil": 0.00594, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.53405, "stage0_s": 0.0, "stage0_m": 0.11746, "stage0_l": 0.38989, "stage0_h": 0.54799, "stage1_loss_instance_mil": 0.0617, "stage1_bag_acc": 99.78804, "stage1_neg_loss": 0.03665, "stage1_mean_ious": 0.51637, "stage1_s": 0.0, "stage1_m": 0.13085, "stage1_l": 0.4201, "stage1_h": 0.52273, "loss": 0.10429, "grad_norm": 6.04291, "time": 1.75485}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04473, "stage0_loss_instance_mil": 0.00336, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.54556, "stage0_s": 0.0, "stage0_m": 0.08617, "stage0_l": 0.3862, "stage0_h": 0.55316, "stage1_loss_instance_mil": 0.07107, "stage1_bag_acc": 99.86667, "stage1_neg_loss": 0.03086, "stage1_mean_ious": 0.52455, "stage1_s": 0.0, "stage1_m": 0.09117, "stage1_l": 0.39363, "stage1_h": 0.52664, "loss": 0.10529, "grad_norm": 5.87746, "time": 1.69339}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04478, "stage0_loss_instance_mil": 0.00186, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.54297, "stage0_s": 0.0, "stage0_m": 0.0781, "stage0_l": 0.37313, "stage0_h": 0.55253, "stage1_loss_instance_mil": 0.06724, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.03452, "stage1_mean_ious": 0.52015, "stage1_s": 0.0, "stage1_m": 0.09161, "stage1_l": 0.39104, "stage1_h": 0.524, "loss": 0.10362, "grad_norm": 5.48807, "time": 1.7095}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.167, "bbox_mAP_50": 0.439, "bbox_mAP_75": 0.301, "bbox_mAP_s": 0.167, "bbox_mAP_m": 0.092, "bbox_mAP_l": 0.041, "bbox_mAP_copypaste": "0.167 0.439 0.301 0.167 0.092 0.041"}
