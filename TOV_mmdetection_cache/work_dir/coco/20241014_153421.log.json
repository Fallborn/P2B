{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bdcbe92", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 18767, "data_time": 0.0772, "stage0_loss_instance_mil": 0.68854, "stage0_bag_acc": 20.00012, "stage0_mean_ious": 0.09519, "stage0_s": 0.0, "stage0_m": 0.02447, "stage0_l": 0.12578, "stage0_h": 0.08617, "stage1_loss_instance_mil": 0.18168, "stage1_bag_acc": 3.62583, "stage1_neg_loss": 0.00183, "stage1_mean_ious": 0.09352, "stage1_s": 0.0, "stage1_m": 0.0291, "stage1_l": 0.12066, "stage1_h": 0.08397, "loss": 0.87205, "grad_norm": 3.60313, "time": 1.75085}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 18767, "data_time": 0.02766, "stage0_loss_instance_mil": 0.58423, "stage0_bag_acc": 45.66335, "stage0_mean_ious": 0.11121, "stage0_s": 0.00038, "stage0_m": 0.02422, "stage0_l": 0.14572, "stage0_h": 0.10374, "stage1_loss_instance_mil": 0.24006, "stage1_bag_acc": 18.2741, "stage1_neg_loss": 0.00624, "stage1_mean_ious": 0.10945, "stage1_s": 0.0, "stage1_m": 0.02624, "stage1_l": 0.1407, "stage1_h": 0.10242, "loss": 0.83052, "grad_norm": 5.40612, "time": 1.73858}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 18767, "data_time": 0.0286, "stage0_loss_instance_mil": 0.27855, "stage0_bag_acc": 83.73984, "stage0_mean_ious": 0.12719, "stage0_s": 0.0, "stage0_m": 0.0256, "stage0_l": 0.1453, "stage0_h": 0.12124, "stage1_loss_instance_mil": 0.38918, "stage1_bag_acc": 73.32025, "stage1_neg_loss": 0.06244, "stage1_mean_ious": 0.1273, "stage1_s": 0.0, "stage1_m": 0.02693, "stage1_l": 0.1525, "stage1_h": 0.12051, "loss": 0.73017, "grad_norm": 12.94057, "time": 1.77499}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 18767, "data_time": 0.08151, "stage0_loss_instance_mil": 0.14249, "stage0_bag_acc": 92.1288, "stage0_mean_ious": 0.13527, "stage0_s": 0.0, "stage0_m": 0.01348, "stage0_l": 0.14316, "stage0_h": 0.13058, "stage1_loss_instance_mil": 0.35753, "stage1_bag_acc": 93.89869, "stage1_neg_loss": 0.08627, "stage1_mean_ious": 0.13487, "stage1_s": 0.0, "stage1_m": 0.01306, "stage1_l": 0.14847, "stage1_h": 0.12905, "loss": 0.5863, "grad_norm": 12.07839, "time": 1.79461}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 2e-05, "memory": 18767, "data_time": 0.03293, "stage0_loss_instance_mil": 0.06992, "stage0_bag_acc": 96.3916, "stage0_mean_ious": 0.14806, "stage0_s": 0.0, "stage0_m": 0.02779, "stage0_l": 0.14986, "stage0_h": 0.14414, "stage1_loss_instance_mil": 0.31494, "stage1_bag_acc": 97.64736, "stage1_neg_loss": 0.08648, "stage1_mean_ious": 0.14504, "stage1_s": 0.0, "stage1_m": 0.03062, "stage1_l": 0.14463, "stage1_h": 0.14081, "loss": 0.47135, "grad_norm": 10.54541, "time": 1.74345}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 18767, "data_time": 0.03544, "stage0_loss_instance_mil": 0.082, "stage0_bag_acc": 94.55166, "stage0_mean_ious": 0.14092, "stage0_s": 0.0, "stage0_m": 0.02353, "stage0_l": 0.14839, "stage0_h": 0.13946, "stage1_loss_instance_mil": 0.27566, "stage1_bag_acc": 96.18262, "stage1_neg_loss": 0.07644, "stage1_mean_ious": 0.13707, "stage1_s": 0.0, "stage1_m": 0.02606, "stage1_l": 0.14421, "stage1_h": 0.13472, "loss": 0.4341, "grad_norm": 14.96822, "time": 1.77936}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 3e-05, "memory": 18767, "data_time": 0.07932, "stage0_loss_instance_mil": 0.05918, "stage0_bag_acc": 96.29385, "stage0_mean_ious": 0.13835, "stage0_s": 0.0012, "stage0_m": 0.02257, "stage0_l": 0.12187, "stage0_h": 0.1373, "stage1_loss_instance_mil": 0.24485, "stage1_bag_acc": 97.2501, "stage1_neg_loss": 0.08933, "stage1_mean_ious": 0.13502, "stage1_s": 0.00126, "stage1_m": 0.02232, "stage1_l": 0.12377, "stage1_h": 0.13324, "loss": 0.39336, "grad_norm": 17.04918, "time": 1.77746}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 4e-05, "memory": 18767, "data_time": 0.02793, "stage0_loss_instance_mil": 0.05239, "stage0_bag_acc": 96.27064, "stage0_mean_ious": 0.14088, "stage0_s": 0.0, "stage0_m": 0.0272, "stage0_l": 0.14146, "stage0_h": 0.14061, "stage1_loss_instance_mil": 0.20911, "stage1_bag_acc": 97.80265, "stage1_neg_loss": 0.07229, "stage1_mean_ious": 0.13495, "stage1_s": 0.0, "stage1_m": 0.0307, "stage1_l": 0.13598, "stage1_h": 0.13353, "loss": 0.33379, "grad_norm": 14.89507, "time": 1.74876}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 4e-05, "memory": 18767, "data_time": 0.02824, "stage0_loss_instance_mil": 0.05017, "stage0_bag_acc": 96.72482, "stage0_mean_ious": 0.13733, "stage0_s": 0.0, "stage0_m": 0.02474, "stage0_l": 0.12222, "stage0_h": 0.13768, "stage1_loss_instance_mil": 0.206, "stage1_bag_acc": 97.17687, "stage1_neg_loss": 0.06738, "stage1_mean_ious": 0.1315, "stage1_s": 0.0, "stage1_m": 0.02365, "stage1_l": 0.12745, "stage1_h": 0.13012, "loss": 0.32354, "grad_norm": 13.91698, "time": 1.74919}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 18767, "data_time": 0.07865, "stage0_loss_instance_mil": 0.0532, "stage0_bag_acc": 95.15315, "stage0_mean_ious": 0.13262, "stage0_s": 0.0, "stage0_m": 0.02822, "stage0_l": 0.10693, "stage0_h": 0.13476, "stage1_loss_instance_mil": 0.19654, "stage1_bag_acc": 97.09178, "stage1_neg_loss": 0.07374, "stage1_mean_ious": 0.12595, "stage1_s": 0.0, "stage1_m": 0.02905, "stage1_l": 0.11243, "stage1_h": 0.12629, "loss": 0.32348, "grad_norm": 14.61541, "time": 1.78546}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 18767, "data_time": 0.02631, "stage0_loss_instance_mil": 0.05528, "stage0_bag_acc": 95.9915, "stage0_mean_ious": 0.12786, "stage0_s": 0.0001, "stage0_m": 0.02745, "stage0_l": 0.0961, "stage0_h": 0.12705, "stage1_loss_instance_mil": 0.18959, "stage1_bag_acc": 97.42561, "stage1_neg_loss": 0.06302, "stage1_mean_ious": 0.11863, "stage1_s": 0.00013, "stage1_m": 0.02941, "stage1_l": 0.09071, "stage1_h": 0.11711, "loss": 0.30789, "grad_norm": 13.17149, "time": 1.73905}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.027, "stage0_loss_instance_mil": 0.04921, "stage0_bag_acc": 96.69358, "stage0_mean_ious": 0.12017, "stage0_s": 0.0, "stage0_m": 0.03684, "stage0_l": 0.1012, "stage0_h": 0.12003, "stage1_loss_instance_mil": 0.20144, "stage1_bag_acc": 97.31643, "stage1_neg_loss": 0.06305, "stage1_mean_ious": 0.11133, "stage1_s": 0.0, "stage1_m": 0.0365, "stage1_l": 0.09672, "stage1_h": 0.11017, "loss": 0.3137, "grad_norm": 13.03124, "time": 1.72801}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 18767, "data_time": 0.07858, "stage0_loss_instance_mil": 0.036, "stage0_bag_acc": 97.29676, "stage0_mean_ious": 0.12749, "stage0_s": 4e-05, "stage0_m": 0.03424, "stage0_l": 0.10961, "stage0_h": 0.12634, "stage1_loss_instance_mil": 0.16777, "stage1_bag_acc": 98.3191, "stage1_neg_loss": 0.05987, "stage1_mean_ious": 0.1182, "stage1_s": 0.00036, "stage1_m": 0.0332, "stage1_l": 0.11153, "stage1_h": 0.11551, "loss": 0.26364, "grad_norm": 9.93548, "time": 1.76584}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 18767, "data_time": 0.02726, "stage0_loss_instance_mil": 0.0375, "stage0_bag_acc": 97.79206, "stage0_mean_ious": 0.119, "stage0_s": 0.0, "stage0_m": 0.04304, "stage0_l": 0.11663, "stage0_h": 0.11676, "stage1_loss_instance_mil": 0.15507, "stage1_bag_acc": 98.39039, "stage1_neg_loss": 0.05823, "stage1_mean_ious": 0.11012, "stage1_s": 0.0, "stage1_m": 0.04124, "stage1_l": 0.11475, "stage1_h": 0.10653, "loss": 0.25081, "grad_norm": 9.54711, "time": 1.71566}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.0273, "stage0_loss_instance_mil": 0.04026, "stage0_bag_acc": 97.24084, "stage0_mean_ious": 0.1311, "stage0_s": 0.0, "stage0_m": 0.02567, "stage0_l": 0.13672, "stage0_h": 0.1296, "stage1_loss_instance_mil": 0.16648, "stage1_bag_acc": 97.98698, "stage1_neg_loss": 0.06732, "stage1_mean_ious": 0.12185, "stage1_s": 0.0, "stage1_m": 0.02792, "stage1_l": 0.1343, "stage1_h": 0.11896, "loss": 0.27406, "grad_norm": 13.03985, "time": 1.71951}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 18767, "data_time": 0.07961, "stage0_loss_instance_mil": 0.03636, "stage0_bag_acc": 97.7898, "stage0_mean_ious": 0.11595, "stage0_s": 0.0, "stage0_m": 0.03593, "stage0_l": 0.12702, "stage0_h": 0.11002, "stage1_loss_instance_mil": 0.15122, "stage1_bag_acc": 98.40127, "stage1_neg_loss": 0.05375, "stage1_mean_ious": 0.10753, "stage1_s": 0.0, "stage1_m": 0.03615, "stage1_l": 0.12408, "stage1_h": 0.10086, "loss": 0.24133, "grad_norm": 10.09754, "time": 1.78245}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 18767, "data_time": 0.02676, "stage0_loss_instance_mil": 0.04236, "stage0_bag_acc": 96.53304, "stage0_mean_ious": 0.12277, "stage0_s": 0.0, "stage0_m": 0.0279, "stage0_l": 0.14459, "stage0_h": 0.11696, "stage1_loss_instance_mil": 0.15265, "stage1_bag_acc": 97.56977, "stage1_neg_loss": 0.05488, "stage1_mean_ious": 0.11365, "stage1_s": 0.0, "stage1_m": 0.0283, "stage1_l": 0.13777, "stage1_h": 0.10732, "loss": 0.2499, "grad_norm": 9.82457, "time": 1.7259}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.02762, "stage0_loss_instance_mil": 0.03745, "stage0_bag_acc": 97.03984, "stage0_mean_ious": 0.11461, "stage0_s": 0.0, "stage0_m": 0.03066, "stage0_l": 0.12521, "stage0_h": 0.10848, "stage1_loss_instance_mil": 0.14055, "stage1_bag_acc": 98.33967, "stage1_neg_loss": 0.05942, "stage1_mean_ious": 0.10521, "stage1_s": 0.0, "stage1_m": 0.0332, "stage1_l": 0.11783, "stage1_h": 0.0989, "loss": 0.23743, "grad_norm": 9.2487, "time": 1.71467}
{"mode": "val", "epoch": 6, "iter": 150, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.008, "bbox_mAP_50": 0.029, "bbox_mAP_75": 0.014, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.008 0.029 0.014 0.005 0.003 0.002"}
