{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+e1fb402", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/images/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.3, momentum=0.9, weight_decay=0.001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=18)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.02967, "memory": 8615, "data_time": 0.06143, "stage0_loss_instance_mil": 0.67216, "stage0_bag_acc": 28.5043, "stage0_mean_ious": 0.32151, "stage0_s": 0.0, "stage0_m": 0.00542, "stage0_l": 0.08719, "stage0_h": 0.34102, "stage1_loss_instance_mil": 0.19691, "stage1_bag_acc": 26.17793, "stage1_neg_loss": 0.02771, "stage1_mean_ious": 0.30881, "stage1_s": 0.0, "stage1_m": 0.00561, "stage1_l": 0.08975, "stage1_h": 0.32652, "loss": 0.89678, "grad_norm": 5.01997, "time": 0.6975}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.05964, "memory": 8615, "data_time": 0.01475, "stage0_loss_instance_mil": 0.7097, "stage0_bag_acc": 26.43577, "stage0_mean_ious": 0.28337, "stage0_s": 0.0, "stage0_m": 0.00482, "stage0_l": 0.07582, "stage0_h": 0.30491, "stage1_loss_instance_mil": 0.17606, "stage1_bag_acc": 20.47364, "stage1_neg_loss": 0.00814, "stage1_mean_ious": 0.27397, "stage1_s": 0.0, "stage1_m": 0.0071, "stage1_l": 0.07869, "stage1_h": 0.29387, "loss": 0.8939, "grad_norm": 1.72701, "time": 0.60304}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.08961, "memory": 8633, "data_time": 0.01437, "stage0_loss_instance_mil": 0.7037, "stage0_bag_acc": 16.32698, "stage0_mean_ious": 0.2821, "stage0_s": 0.0, "stage0_m": 0.01067, "stage0_l": 0.09547, "stage0_h": 0.29884, "stage1_loss_instance_mil": 0.14702, "stage1_bag_acc": 17.89271, "stage1_neg_loss": 0.00641, "stage1_mean_ious": 0.27428, "stage1_s": 0.0, "stage1_m": 0.00812, "stage1_l": 0.09284, "stage1_h": 0.29125, "loss": 0.85713, "grad_norm": 0.77775, "time": 0.59858}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.11958, "memory": 8633, "data_time": 0.01421, "stage0_loss_instance_mil": 0.69616, "stage0_bag_acc": 18.00582, "stage0_mean_ious": 0.30973, "stage0_s": 0.0, "stage0_m": 0.00768, "stage0_l": 0.09784, "stage0_h": 0.33269, "stage1_loss_instance_mil": 0.13154, "stage1_bag_acc": 16.62023, "stage1_neg_loss": 0.00861, "stage1_mean_ious": 0.30417, "stage1_s": 0.0, "stage1_m": 0.00608, "stage1_l": 0.09094, "stage1_h": 0.32793, "loss": 0.83631, "grad_norm": 0.56138, "time": 0.59007}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.14955, "memory": 8633, "data_time": 0.01463, "stage0_loss_instance_mil": 0.68888, "stage0_bag_acc": 26.01651, "stage0_mean_ious": 0.25713, "stage0_s": 0.0, "stage0_m": 0.00655, "stage0_l": 0.06159, "stage0_h": 0.27536, "stage1_loss_instance_mil": 0.12136, "stage1_bag_acc": 37.76571, "stage1_neg_loss": 0.01538, "stage1_mean_ious": 0.2552, "stage1_s": 0.0, "stage1_m": 0.00756, "stage1_l": 0.0724, "stage1_h": 0.27007, "loss": 0.82562, "grad_norm": 0.50879, "time": 0.59996}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.17952, "memory": 8633, "data_time": 0.01397, "stage0_loss_instance_mil": 0.67201, "stage0_bag_acc": 28.23256, "stage0_mean_ious": 0.24792, "stage0_s": 0.0, "stage0_m": 0.00641, "stage0_l": 0.06977, "stage0_h": 0.27099, "stage1_loss_instance_mil": 0.11999, "stage1_bag_acc": 32.6556, "stage1_neg_loss": 0.02251, "stage1_mean_ious": 0.24553, "stage1_s": 0.0, "stage1_m": 0.00656, "stage1_l": 0.06547, "stage1_h": 0.26858, "loss": 0.81451, "grad_norm": 0.68274, "time": 0.5805}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.20949, "memory": 8633, "data_time": 0.01426, "stage0_loss_instance_mil": 0.71123, "stage0_bag_acc": 16.25873, "stage0_mean_ious": 0.30995, "stage0_s": 0.0, "stage0_m": 0.00168, "stage0_l": 0.05719, "stage0_h": 0.33392, "stage1_loss_instance_mil": 0.10155, "stage1_bag_acc": 24.50108, "stage1_neg_loss": 0.0169, "stage1_mean_ious": 0.29939, "stage1_s": 0.0, "stage1_m": 0.00113, "stage1_l": 0.05555, "stage1_h": 0.32244, "loss": 0.82968, "grad_norm": 0.62888, "time": 0.58998}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.21548, "eval_iter_num": 720, "bbox_mAP": 0.105, "bbox_mAP_50": 0.312, "bbox_mAP_75": 0.194, "bbox_mAP_s": 0.073, "bbox_mAP_m": 0.043, "bbox_mAP_l": 0.025, "bbox_mAP_copypaste": "0.105 0.312 0.194 0.073 0.043 0.025"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.24545, "memory": 8633, "data_time": 0.05774, "stage0_loss_instance_mil": 0.68254, "stage0_bag_acc": 20.88627, "stage0_mean_ious": 0.23611, "stage0_s": 0.0, "stage0_m": 0.01793, "stage0_l": 0.07196, "stage0_h": 0.2465, "stage1_loss_instance_mil": 0.10102, "stage1_bag_acc": 19.77238, "stage1_neg_loss": 0.02078, "stage1_mean_ious": 0.23633, "stage1_s": 0.0, "stage1_m": 0.01859, "stage1_l": 0.07469, "stage1_h": 0.24856, "loss": 0.80434, "grad_norm": 0.20893, "time": 0.64428}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.27542, "memory": 8633, "data_time": 0.01384, "stage0_loss_instance_mil": 29.20433, "stage0_bag_acc": 14.15047, "stage0_mean_ious": 0.14831, "stage0_s": 0.0, "stage0_m": 0.0, "stage0_l": 0.01745, "stage0_h": 0.17044, "stage1_loss_instance_mil": 0.15932, "stage1_bag_acc": 27.89944, "stage1_neg_loss": 266.45261, "stage1_mean_ious": 0.13643, "stage1_s": 0.0, "stage1_m": 0.0, "stage1_l": 0.01708, "stage1_h": 0.15367, "loss": 295.81626, "grad_norm": 26.56497, "time": 0.57398}
