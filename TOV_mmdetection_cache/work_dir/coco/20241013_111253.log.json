{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bdcbe92", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[16, 16, 32, 32, 32, 32],\n            base_ratios=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=100),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='Adam', lr=0.003, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [1]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0003, "memory": 8725, "data_time": 0.05771, "stage0_loss_instance_mil": 0.46997, "stage0_bag_acc": 56.61569, "stage0_mean_ious": 0.09751, "stage0_s": 0.0, "stage0_m": 0.02125, "stage0_l": 0.09366, "stage0_h": 0.09011, "stage1_loss_instance_mil": 0.22633, "stage1_bag_acc": 49.29013, "stage1_neg_loss": 0.06715, "stage1_mean_ious": 0.09674, "stage1_s": 0.0, "stage1_m": 0.02178, "stage1_l": 0.09446, "stage1_h": 0.08877, "loss": 0.76345, "grad_norm": 13.46934, "time": 0.69988}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0006, "memory": 8725, "data_time": 0.01155, "stage0_loss_instance_mil": 0.61683, "stage0_bag_acc": 44.49802, "stage0_mean_ious": 0.09773, "stage0_s": 0.0, "stage0_m": 0.01814, "stage0_l": 0.0824, "stage0_h": 0.08875, "stage1_loss_instance_mil": 0.17597, "stage1_bag_acc": 43.0606, "stage1_neg_loss": 0.02508, "stage1_mean_ious": 0.0986, "stage1_s": 0.0, "stage1_m": 0.01722, "stage1_l": 0.08338, "stage1_h": 0.08962, "loss": 0.81788, "grad_norm": 8.75924, "time": 0.6402}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0009, "memory": 8737, "data_time": 0.012, "stage0_loss_instance_mil": 0.52419, "stage0_bag_acc": 46.56465, "stage0_mean_ious": 0.09071, "stage0_s": 0.0, "stage0_m": 0.01139, "stage0_l": 0.0796, "stage0_h": 0.08593, "stage1_loss_instance_mil": 0.18983, "stage1_bag_acc": 42.35454, "stage1_neg_loss": 0.034, "stage1_mean_ious": 0.08769, "stage1_s": 0.0, "stage1_m": 0.01412, "stage1_l": 0.07623, "stage1_h": 0.08194, "loss": 0.74801, "grad_norm": 5.48071, "time": 0.63755}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0012, "memory": 8737, "data_time": 0.0117, "stage0_loss_instance_mil": 0.58448, "stage0_bag_acc": 40.02706, "stage0_mean_ious": 0.09227, "stage0_s": 0.0, "stage0_m": 0.00669, "stage0_l": 0.09855, "stage0_h": 0.08509, "stage1_loss_instance_mil": 0.1989, "stage1_bag_acc": 43.0343, "stage1_neg_loss": 0.02876, "stage1_mean_ious": 0.08823, "stage1_s": 0.0, "stage1_m": 0.00794, "stage1_l": 0.10121, "stage1_h": 0.07864, "loss": 0.81214, "grad_norm": 5.26035, "time": 0.62161}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0015, "memory": 8737, "data_time": 0.01207, "stage0_loss_instance_mil": 0.62538, "stage0_bag_acc": 31.74882, "stage0_mean_ious": 0.10273, "stage0_s": 0.0, "stage0_m": 0.01507, "stage0_l": 0.0934, "stage0_h": 0.09361, "stage1_loss_instance_mil": 0.18551, "stage1_bag_acc": 27.89824, "stage1_neg_loss": 0.01732, "stage1_mean_ious": 0.09607, "stage1_s": 0.0, "stage1_m": 0.01662, "stage1_l": 0.08824, "stage1_h": 0.08657, "loss": 0.82821, "grad_norm": 3.85353, "time": 0.63819}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0018, "memory": 8737, "data_time": 0.01213, "stage0_loss_instance_mil": 0.62463, "stage0_bag_acc": 31.47759, "stage0_mean_ious": 0.09553, "stage0_s": 0.0, "stage0_m": 0.01941, "stage0_l": 0.09186, "stage0_h": 0.08639, "stage1_loss_instance_mil": 0.17858, "stage1_bag_acc": 31.36557, "stage1_neg_loss": 0.0182, "stage1_mean_ious": 0.09116, "stage1_s": 0.0, "stage1_m": 0.02177, "stage1_l": 0.09352, "stage1_h": 0.08084, "loss": 0.82141, "grad_norm": 2.59523, "time": 0.65064}
{"mode": "val", "epoch": 1, "iter": 300, "lr": 0.0018, "eval_iter_num": 720, "bbox_mAP": 0.011, "bbox_mAP_50": 0.042, "bbox_mAP_75": 0.019, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.011 0.042 0.019 0.007 0.003 0.002"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00209, "memory": 8738, "data_time": 0.05769, "stage0_loss_instance_mil": 0.61692, "stage0_bag_acc": 33.95122, "stage0_mean_ious": 0.09661, "stage0_s": 0.0, "stage0_m": 0.01429, "stage0_l": 0.08762, "stage0_h": 0.09078, "stage1_loss_instance_mil": 0.1611, "stage1_bag_acc": 28.72315, "stage1_neg_loss": 0.01955, "stage1_mean_ious": 0.09076, "stage1_s": 0.0, "stage1_m": 0.01437, "stage1_l": 0.08787, "stage1_h": 0.083, "loss": 0.79757, "grad_norm": 2.60328, "time": 0.664}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00239, "memory": 8738, "data_time": 0.01249, "stage0_loss_instance_mil": 0.63995, "stage0_bag_acc": 30.09916, "stage0_mean_ious": 0.10155, "stage0_s": 0.0, "stage0_m": 0.01144, "stage0_l": 0.09748, "stage0_h": 0.09615, "stage1_loss_instance_mil": 0.17769, "stage1_bag_acc": 21.84574, "stage1_neg_loss": 0.02048, "stage1_mean_ious": 0.09074, "stage1_s": 0.0, "stage1_m": 0.01308, "stage1_l": 0.09258, "stage1_h": 0.08395, "loss": 0.83812, "grad_norm": 2.64791, "time": 0.64319}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00269, "memory": 8738, "data_time": 0.01265, "stage0_loss_instance_mil": 0.60227, "stage0_bag_acc": 33.29587, "stage0_mean_ious": 0.09456, "stage0_s": 0.0, "stage0_m": 0.00874, "stage0_l": 0.07705, "stage0_h": 0.08802, "stage1_loss_instance_mil": 0.17492, "stage1_bag_acc": 27.0923, "stage1_neg_loss": 0.01695, "stage1_mean_ious": 0.08911, "stage1_s": 0.0, "stage1_m": 0.00882, "stage1_l": 0.07766, "stage1_h": 0.08146, "loss": 0.79414, "grad_norm": 2.16761, "time": 0.66184}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00299, "memory": 8738, "data_time": 0.01203, "stage0_loss_instance_mil": 0.69089, "stage0_bag_acc": 22.65199, "stage0_mean_ious": 0.10075, "stage0_s": 0.0, "stage0_m": 0.02103, "stage0_l": 0.08642, "stage0_h": 0.09387, "stage1_loss_instance_mil": 0.16622, "stage1_bag_acc": 22.16288, "stage1_neg_loss": 0.37773, "stage1_mean_ious": 0.09466, "stage1_s": 0.0, "stage1_m": 0.02428, "stage1_l": 0.09018, "stage1_h": 0.08581, "loss": 1.23484, "grad_norm": 13.23086, "time": 0.6255}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.003, "memory": 8738, "data_time": 0.01256, "stage0_loss_instance_mil": 0.64802, "stage0_bag_acc": 20.64059, "stage0_mean_ious": 0.10124, "stage0_s": 0.0, "stage0_m": 0.00924, "stage0_l": 0.08345, "stage0_h": 0.09636, "stage1_loss_instance_mil": 0.14286, "stage1_bag_acc": 18.95206, "stage1_neg_loss": 0.02853, "stage1_mean_ious": 0.09087, "stage1_s": 0.0, "stage1_m": 0.00934, "stage1_l": 0.08251, "stage1_h": 0.08438, "loss": 0.81941, "grad_norm": 1.90861, "time": 0.64263}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.003, "memory": 8738, "data_time": 0.01257, "stage0_loss_instance_mil": 0.63405, "stage0_bag_acc": 19.63834, "stage0_mean_ious": 0.08338, "stage0_s": 0.0, "stage0_m": 0.01149, "stage0_l": 0.09876, "stage0_h": 0.07427, "stage1_loss_instance_mil": 0.17068, "stage1_bag_acc": 17.55134, "stage1_neg_loss": 0.00398, "stage1_mean_ious": 0.08589, "stage1_s": 0.0, "stage1_m": 0.01154, "stage1_l": 0.10298, "stage1_h": 0.07615, "loss": 0.80871, "grad_norm": 0.61382, "time": 0.66563}
{"mode": "val", "epoch": 2, "iter": 300, "lr": 0.003, "eval_iter_num": 720, "bbox_mAP": 0.0, "bbox_mAP_50": 0.001, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.001 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.003, "memory": 8738, "data_time": 0.0569, "stage0_loss_instance_mil": 0.62444, "stage0_bag_acc": 25.44677, "stage0_mean_ious": 0.08752, "stage0_s": 0.0, "stage0_m": 0.01484, "stage0_l": 0.09395, "stage0_h": 0.07967, "stage1_loss_instance_mil": 0.10487, "stage1_bag_acc": 23.73291, "stage1_neg_loss": 0.01693, "stage1_mean_ious": 0.08946, "stage1_s": 0.0, "stage1_m": 0.01395, "stage1_l": 0.10298, "stage1_h": 0.08097, "loss": 0.74624, "grad_norm": 0.7022, "time": 0.68901}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.003, "memory": 8738, "data_time": 0.01093, "stage0_loss_instance_mil": 0.6938, "stage0_bag_acc": 27.83765, "stage0_mean_ious": 0.09324, "stage0_s": 0.0, "stage0_m": 0.01291, "stage0_l": 0.08814, "stage0_h": 0.08485, "stage1_loss_instance_mil": 0.14031, "stage1_bag_acc": 20.42733, "stage1_neg_loss": 0.29133, "stage1_mean_ious": 0.09086, "stage1_s": 0.0, "stage1_m": 0.01465, "stage1_l": 0.08827, "stage1_h": 0.08142, "loss": 1.12544, "grad_norm": 26.31293, "time": 0.62079}
