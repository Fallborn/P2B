{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bdcbe92", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[16, 16, 32, 32, 32, 32],\n            base_ratios=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='Adam', lr=0.003, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [1]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0003, "memory": 9702, "data_time": 0.06079, "stage0_loss_instance_mil": 0.59602, "stage0_bag_acc": 44.37354, "stage0_mean_ious": 0.09558, "stage0_s": 0.0, "stage0_m": 0.02065, "stage0_l": 0.0786, "stage0_h": 0.08922, "stage1_loss_instance_mil": 0.25555, "stage1_bag_acc": 34.54704, "stage1_neg_loss": 0.05632, "stage1_mean_ious": 0.09327, "stage1_s": 0.0, "stage1_m": 0.02102, "stage1_l": 0.08075, "stage1_h": 0.08593, "loss": 0.90789, "grad_norm": 16.60324, "time": 0.96024}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0006, "memory": 9724, "data_time": 0.01333, "stage0_loss_instance_mil": 0.53178, "stage0_bag_acc": 47.50408, "stage0_mean_ious": 0.10273, "stage0_s": 0.0, "stage0_m": 0.0082, "stage0_l": 0.10975, "stage0_h": 0.093, "stage1_loss_instance_mil": 0.3097, "stage1_bag_acc": 44.8371, "stage1_neg_loss": 0.03162, "stage1_mean_ious": 0.09819, "stage1_s": 0.0, "stage1_m": 0.00922, "stage1_l": 0.10304, "stage1_h": 0.08896, "loss": 0.8731, "grad_norm": 8.02109, "time": 0.88933}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0009, "memory": 9765, "data_time": 0.01386, "stage0_loss_instance_mil": 0.50365, "stage0_bag_acc": 52.32444, "stage0_mean_ious": 0.09369, "stage0_s": 0.0, "stage0_m": 0.01522, "stage0_l": 0.07595, "stage0_h": 0.08814, "stage1_loss_instance_mil": 0.34193, "stage1_bag_acc": 44.05338, "stage1_neg_loss": 0.03418, "stage1_mean_ious": 0.09227, "stage1_s": 0.0, "stage1_m": 0.01522, "stage1_l": 0.07784, "stage1_h": 0.08617, "loss": 0.87976, "grad_norm": 8.14547, "time": 0.91688}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0012, "memory": 9765, "data_time": 0.01312, "stage0_loss_instance_mil": 0.57193, "stage0_bag_acc": 42.50429, "stage0_mean_ious": 0.09722, "stage0_s": 0.0, "stage0_m": 0.00645, "stage0_l": 0.09031, "stage0_h": 0.09114, "stage1_loss_instance_mil": 0.28527, "stage1_bag_acc": 36.2968, "stage1_neg_loss": 0.25714, "stage1_mean_ious": 0.09504, "stage1_s": 0.0, "stage1_m": 0.0073, "stage1_l": 0.08646, "stage1_h": 0.0885, "loss": 1.11434, "grad_norm": 24.58405, "time": 0.88477}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0015, "memory": 9765, "data_time": 0.01356, "stage0_loss_instance_mil": 0.56818, "stage0_bag_acc": 41.1441, "stage0_mean_ious": 0.09498, "stage0_s": 0.0, "stage0_m": 0.00348, "stage0_l": 0.09699, "stage0_h": 0.0861, "stage1_loss_instance_mil": 0.25699, "stage1_bag_acc": 36.11284, "stage1_neg_loss": 0.06111, "stage1_mean_ious": 0.09465, "stage1_s": 0.0, "stage1_m": 0.00424, "stage1_l": 0.09836, "stage1_h": 0.08482, "loss": 0.88628, "grad_norm": 12.61557, "time": 0.92073}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0018, "memory": 9765, "data_time": 0.01259, "stage0_loss_instance_mil": 0.60115, "stage0_bag_acc": 32.32692, "stage0_mean_ious": 0.08898, "stage0_s": 0.0, "stage0_m": 0.01507, "stage0_l": 0.07302, "stage0_h": 0.0848, "stage1_loss_instance_mil": 0.23418, "stage1_bag_acc": 23.94152, "stage1_neg_loss": 0.01525, "stage1_mean_ious": 0.08426, "stage1_s": 0.0, "stage1_m": 0.0143, "stage1_l": 0.0726, "stage1_h": 0.07967, "loss": 0.85058, "grad_norm": 2.65199, "time": 0.90233}
{"mode": "val", "epoch": 1, "iter": 300, "lr": 0.0018, "eval_iter_num": 720, "bbox_mAP": 0.001, "bbox_mAP_50": 0.006, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.001 0.006 0.002 0.000 0.000 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00209, "memory": 9765, "data_time": 0.05689, "stage0_loss_instance_mil": 0.62763, "stage0_bag_acc": 32.35307, "stage0_mean_ious": 0.1044, "stage0_s": 0.0, "stage0_m": 0.01218, "stage0_l": 0.09839, "stage0_h": 0.09848, "stage1_loss_instance_mil": 0.19911, "stage1_bag_acc": 23.20796, "stage1_neg_loss": 0.01127, "stage1_mean_ious": 0.10293, "stage1_s": 0.0, "stage1_m": 0.01099, "stage1_l": 0.09827, "stage1_h": 0.09656, "loss": 0.83801, "grad_norm": 1.47203, "time": 0.93539}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00239, "memory": 9765, "data_time": 0.01251, "stage0_loss_instance_mil": 0.61308, "stage0_bag_acc": 27.38341, "stage0_mean_ious": 0.09212, "stage0_s": 0.0, "stage0_m": 0.01224, "stage0_l": 0.08427, "stage0_h": 0.08829, "stage1_loss_instance_mil": 0.17591, "stage1_bag_acc": 28.17104, "stage1_neg_loss": 0.01668, "stage1_mean_ious": 0.09145, "stage1_s": 0.0, "stage1_m": 0.01332, "stage1_l": 0.09039, "stage1_h": 0.0856, "loss": 0.80567, "grad_norm": 1.36866, "time": 0.90119}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00269, "memory": 9765, "data_time": 0.01244, "stage0_loss_instance_mil": 0.6272, "stage0_bag_acc": 28.10303, "stage0_mean_ious": 0.09677, "stage0_s": 0.0, "stage0_m": 0.01825, "stage0_l": 0.09183, "stage0_h": 0.09032, "stage1_loss_instance_mil": 0.17871, "stage1_bag_acc": 27.08416, "stage1_neg_loss": 0.11464, "stage1_mean_ious": 0.09574, "stage1_s": 0.0, "stage1_m": 0.01852, "stage1_l": 0.09738, "stage1_h": 0.08815, "loss": 0.92055, "grad_norm": 15.01373, "time": 0.88506}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00299, "memory": 9765, "data_time": 0.01198, "stage0_loss_instance_mil": 0.6358, "stage0_bag_acc": 21.92342, "stage0_mean_ious": 0.10319, "stage0_s": 0.00109, "stage0_m": 0.01361, "stage0_l": 0.1031, "stage0_h": 0.09519, "stage1_loss_instance_mil": 0.16917, "stage1_bag_acc": 25.46647, "stage1_neg_loss": 0.01589, "stage1_mean_ious": 0.09803, "stage1_s": 0.00068, "stage1_m": 0.01413, "stage1_l": 0.10156, "stage1_h": 0.08924, "loss": 0.82085, "grad_norm": 1.36411, "time": 0.86981}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.003, "memory": 9765, "data_time": 0.01267, "stage0_loss_instance_mil": 0.63337, "stage0_bag_acc": 23.60181, "stage0_mean_ious": 0.1001, "stage0_s": 0.0, "stage0_m": 0.01438, "stage0_l": 0.05953, "stage0_h": 0.09755, "stage1_loss_instance_mil": 0.16421, "stage1_bag_acc": 22.82336, "stage1_neg_loss": 0.01726, "stage1_mean_ious": 0.09534, "stage1_s": 0.0, "stage1_m": 0.01407, "stage1_l": 0.05566, "stage1_h": 0.09291, "loss": 0.81484, "grad_norm": 0.99478, "time": 0.91045}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.003, "memory": 9765, "data_time": 0.01391, "stage0_loss_instance_mil": 0.63811, "stage0_bag_acc": 21.59214, "stage0_mean_ious": 0.0953, "stage0_s": 0.0, "stage0_m": 0.01187, "stage0_l": 0.09164, "stage0_h": 0.0873, "stage1_loss_instance_mil": 0.16506, "stage1_bag_acc": 27.20181, "stage1_neg_loss": 0.01577, "stage1_mean_ious": 0.09375, "stage1_s": 0.0, "stage1_m": 0.01027, "stage1_l": 0.09119, "stage1_h": 0.08595, "loss": 0.81894, "grad_norm": 0.90359, "time": 0.9065}
{"mode": "val", "epoch": 2, "iter": 300, "lr": 0.003, "eval_iter_num": 720, "bbox_mAP": 0.005, "bbox_mAP_50": 0.016, "bbox_mAP_75": 0.01, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.005 0.016 0.010 0.004 0.003 0.001"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.003, "memory": 9765, "data_time": 0.05741, "stage0_loss_instance_mil": 0.63395, "stage0_bag_acc": 23.07071, "stage0_mean_ious": 0.09263, "stage0_s": 0.0, "stage0_m": 0.00942, "stage0_l": 0.08636, "stage0_h": 0.08685, "stage1_loss_instance_mil": 0.15383, "stage1_bag_acc": 18.02136, "stage1_neg_loss": 0.01794, "stage1_mean_ious": 0.09131, "stage1_s": 0.0, "stage1_m": 0.00909, "stage1_l": 0.08423, "stage1_h": 0.0852, "loss": 0.80573, "grad_norm": 1.0921, "time": 0.93886}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.003, "memory": 9765, "data_time": 0.01263, "stage0_loss_instance_mil": 0.62998, "stage0_bag_acc": 23.66842, "stage0_mean_ious": 0.09933, "stage0_s": 0.0, "stage0_m": 0.01368, "stage0_l": 0.10233, "stage0_h": 0.08904, "stage1_loss_instance_mil": 0.16285, "stage1_bag_acc": 29.5781, "stage1_neg_loss": 0.01763, "stage1_mean_ious": 0.10068, "stage1_s": 0.0, "stage1_m": 0.01423, "stage1_l": 0.10541, "stage1_h": 0.08997, "loss": 0.81046, "grad_norm": 0.89024, "time": 0.89978}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.003, "memory": 9765, "data_time": 0.01267, "stage0_loss_instance_mil": 0.65534, "stage0_bag_acc": 29.45241, "stage0_mean_ious": 0.09991, "stage0_s": 0.0, "stage0_m": 0.02224, "stage0_l": 0.09153, "stage0_h": 0.0916, "stage1_loss_instance_mil": 0.16812, "stage1_bag_acc": 27.25383, "stage1_neg_loss": 0.02037, "stage1_mean_ious": 0.09967, "stage1_s": 0.0, "stage1_m": 0.02053, "stage1_l": 0.09713, "stage1_h": 0.09091, "loss": 0.84383, "grad_norm": 1.6434, "time": 0.90898}
