{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09561, "stage0_loss_instance_mil": 0.72223, "stage0_bag_acc": 10.40915, "stage0_mean_ious": 0.35879, "stage0_s": 0.0, "stage0_m": 0.05815, "stage0_l": 0.20271, "stage0_h": 0.36999, "stage1_loss_instance_mil": 0.16386, "stage1_bag_acc": 16.48773, "stage1_neg_loss": 0.00098, "stage1_mean_ious": 0.35362, "stage1_s": 0.0, "stage1_m": 0.06212, "stage1_l": 0.20675, "stage1_h": 0.36311, "loss": 0.88707, "grad_norm": 3.33571, "time": 1.74791}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04129, "stage0_loss_instance_mil": 0.5857, "stage0_bag_acc": 57.0633, "stage0_mean_ious": 0.32464, "stage0_s": 0.0, "stage0_m": 0.05207, "stage0_l": 0.2065, "stage0_h": 0.33968, "stage1_loss_instance_mil": 0.24267, "stage1_bag_acc": 28.80864, "stage1_neg_loss": 0.00367, "stage1_mean_ious": 0.32158, "stage1_s": 0.0, "stage1_m": 0.05422, "stage1_l": 0.21404, "stage1_h": 0.33507, "loss": 0.83204, "grad_norm": 4.03237, "time": 1.68918}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04084, "stage0_loss_instance_mil": 0.28735, "stage0_bag_acc": 84.58465, "stage0_mean_ious": 0.36449, "stage0_s": 0.0, "stage0_m": 0.04958, "stage0_l": 0.20256, "stage0_h": 0.38792, "stage1_loss_instance_mil": 0.28789, "stage1_bag_acc": 76.91039, "stage1_neg_loss": 0.06626, "stage1_mean_ious": 0.33581, "stage1_s": 0.0, "stage1_m": 0.04647, "stage1_l": 0.19939, "stage1_h": 0.35446, "loss": 0.6415, "grad_norm": 11.26033, "time": 1.70465}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09203, "stage0_loss_instance_mil": 0.08365, "stage0_bag_acc": 95.2494, "stage0_mean_ious": 0.35213, "stage0_s": 0.0, "stage0_m": 0.03308, "stage0_l": 0.19445, "stage0_h": 0.37044, "stage1_loss_instance_mil": 0.31245, "stage1_bag_acc": 96.65522, "stage1_neg_loss": 0.08238, "stage1_mean_ious": 0.32784, "stage1_s": 0.0, "stage1_m": 0.02738, "stage1_l": 0.17779, "stage1_h": 0.34433, "loss": 0.47848, "grad_norm": 12.52406, "time": 1.73098}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04197, "stage0_loss_instance_mil": 0.05205, "stage0_bag_acc": 97.38203, "stage0_mean_ious": 0.33977, "stage0_s": 0.0, "stage0_m": 0.05313, "stage0_l": 0.18938, "stage0_h": 0.35967, "stage1_loss_instance_mil": 0.29075, "stage1_bag_acc": 98.49026, "stage1_neg_loss": 0.08825, "stage1_mean_ious": 0.32133, "stage1_s": 0.0, "stage1_m": 0.04271, "stage1_l": 0.1783, "stage1_h": 0.34141, "loss": 0.43104, "grad_norm": 13.43111, "time": 1.70918}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04034, "stage0_loss_instance_mil": 0.06436, "stage0_bag_acc": 95.65748, "stage0_mean_ious": 0.38249, "stage0_s": 0.0, "stage0_m": 0.04104, "stage0_l": 0.16613, "stage0_h": 0.40409, "stage1_loss_instance_mil": 0.26462, "stage1_bag_acc": 97.39584, "stage1_neg_loss": 0.07825, "stage1_mean_ious": 0.36626, "stage1_s": 0.0, "stage1_m": 0.02981, "stage1_l": 0.15586, "stage1_h": 0.38787, "loss": 0.40722, "grad_norm": 12.88412, "time": 1.65976}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.0972, "stage0_loss_instance_mil": 0.04873, "stage0_bag_acc": 97.30819, "stage0_mean_ious": 0.3736, "stage0_s": 0.0, "stage0_m": 0.03336, "stage0_l": 0.17987, "stage0_h": 0.3982, "stage1_loss_instance_mil": 0.23805, "stage1_bag_acc": 97.42935, "stage1_neg_loss": 0.08082, "stage1_mean_ious": 0.36095, "stage1_s": 0.0, "stage1_m": 0.02118, "stage1_l": 0.1635, "stage1_h": 0.38789, "loss": 0.3676, "grad_norm": 14.44086, "time": 1.73272}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04243, "stage0_loss_instance_mil": 0.03565, "stage0_bag_acc": 98.29394, "stage0_mean_ious": 0.36477, "stage0_s": 0.00088, "stage0_m": 0.03082, "stage0_l": 0.17735, "stage0_h": 0.38624, "stage1_loss_instance_mil": 0.29396, "stage1_bag_acc": 98.35149, "stage1_neg_loss": 0.08232, "stage1_mean_ious": 0.35253, "stage1_s": 0.00092, "stage1_m": 0.01947, "stage1_l": 0.17424, "stage1_h": 0.37373, "loss": 0.41194, "grad_norm": 15.5948, "time": 1.67195}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04336, "stage0_loss_instance_mil": 0.03236, "stage0_bag_acc": 97.83201, "stage0_mean_ious": 0.37063, "stage0_s": 0.0, "stage0_m": 0.04422, "stage0_l": 0.20436, "stage0_h": 0.39335, "stage1_loss_instance_mil": 0.24798, "stage1_bag_acc": 98.89115, "stage1_neg_loss": 0.08188, "stage1_mean_ious": 0.34337, "stage1_s": 0.0, "stage1_m": 0.03876, "stage1_l": 0.2036, "stage1_h": 0.36286, "loss": 0.36222, "grad_norm": 14.16864, "time": 1.68141}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09497, "stage0_loss_instance_mil": 0.03901, "stage0_bag_acc": 97.89811, "stage0_mean_ious": 0.39752, "stage0_s": 0.0, "stage0_m": 0.03512, "stage0_l": 0.14987, "stage0_h": 0.43011, "stage1_loss_instance_mil": 0.20783, "stage1_bag_acc": 98.53338, "stage1_neg_loss": 0.06476, "stage1_mean_ious": 0.37623, "stage1_s": 0.0, "stage1_m": 0.02089, "stage1_l": 0.14474, "stage1_h": 0.40743, "loss": 0.3116, "grad_norm": 11.35161, "time": 1.69742}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0433, "stage0_loss_instance_mil": 0.04609, "stage0_bag_acc": 97.06184, "stage0_mean_ious": 0.38379, "stage0_s": 0.0, "stage0_m": 0.03543, "stage0_l": 0.15477, "stage0_h": 0.40831, "stage1_loss_instance_mil": 0.18383, "stage1_bag_acc": 98.13195, "stage1_neg_loss": 0.06932, "stage1_mean_ious": 0.36586, "stage1_s": 0.0, "stage1_m": 0.02418, "stage1_l": 0.14965, "stage1_h": 0.39071, "loss": 0.29923, "grad_norm": 12.33846, "time": 1.72154}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04292, "stage0_loss_instance_mil": 0.04718, "stage0_bag_acc": 96.83849, "stage0_mean_ious": 0.39829, "stage0_s": 0.0, "stage0_m": 0.04234, "stage0_l": 0.1512, "stage0_h": 0.42831, "stage1_loss_instance_mil": 0.17049, "stage1_bag_acc": 98.63188, "stage1_neg_loss": 0.05639, "stage1_mean_ious": 0.38137, "stage1_s": 0.0, "stage1_m": 0.03121, "stage1_l": 0.13945, "stage1_h": 0.4111, "loss": 0.27406, "grad_norm": 9.64716, "time": 1.70808}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0945, "stage0_loss_instance_mil": 0.01131, "stage0_bag_acc": 99.35543, "stage0_mean_ious": 0.39165, "stage0_s": 0.0, "stage0_m": 0.04293, "stage0_l": 0.1784, "stage0_h": 0.42284, "stage1_loss_instance_mil": 0.17518, "stage1_bag_acc": 99.72213, "stage1_neg_loss": 0.0628, "stage1_mean_ious": 0.36903, "stage1_s": 0.0, "stage1_m": 0.02816, "stage1_l": 0.17199, "stage1_h": 0.39919, "loss": 0.24929, "grad_norm": 11.09361, "time": 1.73276}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0432, "stage0_loss_instance_mil": 0.02049, "stage0_bag_acc": 98.65471, "stage0_mean_ious": 0.38372, "stage0_s": 0.0, "stage0_m": 0.01559, "stage0_l": 0.21314, "stage0_h": 0.40256, "stage1_loss_instance_mil": 0.16514, "stage1_bag_acc": 98.87863, "stage1_neg_loss": 0.06003, "stage1_mean_ious": 0.36375, "stage1_s": 0.0, "stage1_m": 0.01206, "stage1_l": 0.21015, "stage1_h": 0.38054, "loss": 0.24566, "grad_norm": 9.90067, "time": 1.69397}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04374, "stage0_loss_instance_mil": 0.01454, "stage0_bag_acc": 99.42374, "stage0_mean_ious": 0.39249, "stage0_s": 0.00176, "stage0_m": 0.02191, "stage0_l": 0.15144, "stage0_h": 0.42703, "stage1_loss_instance_mil": 0.17381, "stage1_bag_acc": 99.15863, "stage1_neg_loss": 0.06009, "stage1_mean_ious": 0.37577, "stage1_s": 0.00163, "stage1_m": 0.01384, "stage1_l": 0.14823, "stage1_h": 0.408, "loss": 0.24844, "grad_norm": 10.88343, "time": 1.68986}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09611, "stage0_loss_instance_mil": 0.01471, "stage0_bag_acc": 98.96461, "stage0_mean_ious": 0.38112, "stage0_s": 0.00147, "stage0_m": 0.03433, "stage0_l": 0.16761, "stage0_h": 0.40515, "stage1_loss_instance_mil": 0.14214, "stage1_bag_acc": 99.20103, "stage1_neg_loss": 0.05937, "stage1_mean_ious": 0.36141, "stage1_s": 0.0015, "stage1_m": 0.02144, "stage1_l": 0.15914, "stage1_h": 0.38461, "loss": 0.21622, "grad_norm": 8.90398, "time": 1.74538}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04271, "stage0_loss_instance_mil": 0.01748, "stage0_bag_acc": 98.76192, "stage0_mean_ious": 0.39185, "stage0_s": 0.0, "stage0_m": 0.03128, "stage0_l": 0.1751, "stage0_h": 0.42463, "stage1_loss_instance_mil": 0.13968, "stage1_bag_acc": 99.07075, "stage1_neg_loss": 0.05733, "stage1_mean_ious": 0.37204, "stage1_s": 0.0, "stage1_m": 0.01952, "stage1_l": 0.16622, "stage1_h": 0.40372, "loss": 0.2145, "grad_norm": 9.56735, "time": 1.67318}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0424, "stage0_loss_instance_mil": 0.00996, "stage0_bag_acc": 99.52687, "stage0_mean_ious": 0.42774, "stage0_s": 0.0, "stage0_m": 0.01559, "stage0_l": 0.1843, "stage0_h": 0.45462, "stage1_loss_instance_mil": 0.13171, "stage1_bag_acc": 99.71798, "stage1_neg_loss": 0.05989, "stage1_mean_ious": 0.41172, "stage1_s": 0.0, "stage1_m": 0.01057, "stage1_l": 0.18139, "stage1_h": 0.43723, "loss": 0.20156, "grad_norm": 9.09737, "time": 1.67189}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.118, "bbox_mAP_50": 0.315, "bbox_mAP_75": 0.213, "bbox_mAP_s": 0.112, "bbox_mAP_m": 0.067, "bbox_mAP_l": 0.032, "bbox_mAP_copypaste": "0.118 0.315 0.213 0.112 0.067 0.032"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09399, "stage0_loss_instance_mil": 0.00777, "stage0_bag_acc": 99.69444, "stage0_mean_ious": 0.38949, "stage0_s": 0.0, "stage0_m": 0.02177, "stage0_l": 0.17823, "stage0_h": 0.4194, "stage1_loss_instance_mil": 0.12905, "stage1_bag_acc": 99.17655, "stage1_neg_loss": 0.06011, "stage1_mean_ious": 0.3704, "stage1_s": 0.0, "stage1_m": 0.01398, "stage1_l": 0.17423, "stage1_h": 0.39865, "loss": 0.19694, "grad_norm": 8.97441, "time": 1.72376}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04077, "stage0_loss_instance_mil": 0.02283, "stage0_bag_acc": 98.6414, "stage0_mean_ious": 0.41119, "stage0_s": 0.00176, "stage0_m": 0.0221, "stage0_l": 0.14255, "stage0_h": 0.43892, "stage1_loss_instance_mil": 0.12227, "stage1_bag_acc": 99.25812, "stage1_neg_loss": 0.04971, "stage1_mean_ious": 0.38993, "stage1_s": 0.00155, "stage1_m": 0.01492, "stage1_l": 0.13105, "stage1_h": 0.41747, "loss": 0.1948, "grad_norm": 8.03942, "time": 1.66314}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04059, "stage0_loss_instance_mil": 0.01039, "stage0_bag_acc": 99.191, "stage0_mean_ious": 0.42829, "stage0_s": 0.0, "stage0_m": 0.04808, "stage0_l": 0.20381, "stage0_h": 0.45649, "stage1_loss_instance_mil": 0.10257, "stage1_bag_acc": 99.1468, "stage1_neg_loss": 0.04671, "stage1_mean_ious": 0.40873, "stage1_s": 0.0, "stage1_m": 0.03815, "stage1_l": 0.19764, "stage1_h": 0.43627, "loss": 0.15966, "grad_norm": 6.97409, "time": 1.64795}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09607, "stage0_loss_instance_mil": 0.00684, "stage0_bag_acc": 99.47445, "stage0_mean_ious": 0.4124, "stage0_s": 0.0, "stage0_m": 0.0215, "stage0_l": 0.15387, "stage0_h": 0.44011, "stage1_loss_instance_mil": 0.09957, "stage1_bag_acc": 99.65522, "stage1_neg_loss": 0.04561, "stage1_mean_ious": 0.39689, "stage1_s": 0.0, "stage1_m": 0.01441, "stage1_l": 0.1483, "stage1_h": 0.42416, "loss": 0.15202, "grad_norm": 7.22038, "time": 1.74859}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04293, "stage0_loss_instance_mil": 0.00807, "stage0_bag_acc": 99.349, "stage0_mean_ious": 0.388, "stage0_s": 0.0, "stage0_m": 0.03513, "stage0_l": 0.15464, "stage0_h": 0.4143, "stage1_loss_instance_mil": 0.11422, "stage1_bag_acc": 99.32156, "stage1_neg_loss": 0.05105, "stage1_mean_ious": 0.3645, "stage1_s": 0.0, "stage1_m": 0.02263, "stage1_l": 0.13632, "stage1_h": 0.39212, "loss": 0.17334, "grad_norm": 8.29941, "time": 1.69669}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04284, "stage0_loss_instance_mil": 0.01401, "stage0_bag_acc": 99.39209, "stage0_mean_ious": 0.41766, "stage0_s": 0.00194, "stage0_m": 0.03217, "stage0_l": 0.2461, "stage0_h": 0.43586, "stage1_loss_instance_mil": 0.10627, "stage1_bag_acc": 99.32235, "stage1_neg_loss": 0.04276, "stage1_mean_ious": 0.40368, "stage1_s": 0.00164, "stage1_m": 0.02339, "stage1_l": 0.23122, "stage1_h": 0.42292, "loss": 0.16303, "grad_norm": 6.6171, "time": 1.68682}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09755, "stage0_loss_instance_mil": 0.0113, "stage0_bag_acc": 99.56922, "stage0_mean_ious": 0.40487, "stage0_s": 0.0, "stage0_m": 0.03561, "stage0_l": 0.19986, "stage0_h": 0.42422, "stage1_loss_instance_mil": 0.09182, "stage1_bag_acc": 99.62478, "stage1_neg_loss": 0.02988, "stage1_mean_ious": 0.38779, "stage1_s": 0.0, "stage1_m": 0.02713, "stage1_l": 0.19277, "stage1_h": 0.40697, "loss": 0.133, "grad_norm": 4.90472, "time": 1.75433}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04002, "stage0_loss_instance_mil": 0.00753, "stage0_bag_acc": 99.71781, "stage0_mean_ious": 0.39691, "stage0_s": 0.0, "stage0_m": 0.03278, "stage0_l": 0.18569, "stage0_h": 0.43684, "stage1_loss_instance_mil": 0.07673, "stage1_bag_acc": 99.73447, "stage1_neg_loss": 0.03856, "stage1_mean_ious": 0.3814, "stage1_s": 0.0, "stage1_m": 0.0246, "stage1_l": 0.18146, "stage1_h": 0.42046, "loss": 0.12282, "grad_norm": 5.02746, "time": 1.63329}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04161, "stage0_loss_instance_mil": 0.00329, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.40247, "stage0_s": 0.0, "stage0_m": 0.0219, "stage0_l": 0.17967, "stage0_h": 0.41959, "stage1_loss_instance_mil": 0.08934, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03881, "stage1_mean_ious": 0.38782, "stage1_s": 0.0, "stage1_m": 0.01553, "stage1_l": 0.17553, "stage1_h": 0.40443, "loss": 0.13143, "grad_norm": 4.94028, "time": 1.64566}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09214, "stage0_loss_instance_mil": 0.00742, "stage0_bag_acc": 99.75735, "stage0_mean_ious": 0.40422, "stage0_s": 0.0, "stage0_m": 0.02877, "stage0_l": 0.17479, "stage0_h": 0.43491, "stage1_loss_instance_mil": 0.0742, "stage1_bag_acc": 99.75735, "stage1_neg_loss": 0.04097, "stage1_mean_ious": 0.39492, "stage1_s": 0.0, "stage1_m": 0.02087, "stage1_l": 0.17561, "stage1_h": 0.42544, "loss": 0.1226, "grad_norm": 4.95321, "time": 1.70322}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.03995, "stage0_loss_instance_mil": 0.00307, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.39173, "stage0_s": 0.0, "stage0_m": 0.03425, "stage0_l": 0.22837, "stage0_h": 0.41757, "stage1_loss_instance_mil": 0.08087, "stage1_bag_acc": 99.92593, "stage1_neg_loss": 0.03809, "stage1_mean_ious": 0.3716, "stage1_s": 0.0, "stage1_m": 0.02499, "stage1_l": 0.22987, "stage1_h": 0.39642, "loss": 0.12203, "grad_norm": 5.67744, "time": 1.65057}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04262, "stage0_loss_instance_mil": 0.00349, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.38546, "stage0_s": 0.0, "stage0_m": 0.0285, "stage0_l": 0.15934, "stage0_h": 0.4163, "stage1_loss_instance_mil": 0.0799, "stage1_bag_acc": 99.78667, "stage1_neg_loss": 0.0413, "stage1_mean_ious": 0.36718, "stage1_s": 0.0, "stage1_m": 0.01929, "stage1_l": 0.14266, "stage1_h": 0.39863, "loss": 0.12469, "grad_norm": 5.07673, "time": 1.71076}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09801, "stage0_loss_instance_mil": 0.00288, "stage0_bag_acc": 99.91304, "stage0_mean_ious": 0.40089, "stage0_s": 0.0, "stage0_m": 0.03345, "stage0_l": 0.23279, "stage0_h": 0.42477, "stage1_loss_instance_mil": 0.08302, "stage1_bag_acc": 99.86667, "stage1_neg_loss": 0.03942, "stage1_mean_ious": 0.385, "stage1_s": 0.0, "stage1_m": 0.02006, "stage1_l": 0.24267, "stage1_h": 0.40655, "loss": 0.12532, "grad_norm": 5.05001, "time": 1.76128}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04273, "stage0_loss_instance_mil": 0.00442, "stage0_bag_acc": 99.80952, "stage0_mean_ious": 0.38649, "stage0_s": 0.0, "stage0_m": 0.02658, "stage0_l": 0.19319, "stage0_h": 0.41481, "stage1_loss_instance_mil": 0.08671, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.04016, "stage1_mean_ious": 0.36655, "stage1_s": 0.0, "stage1_m": 0.01619, "stage1_l": 0.18317, "stage1_h": 0.39443, "loss": 0.13129, "grad_norm": 5.26464, "time": 1.71821}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04063, "stage0_loss_instance_mil": 0.00265, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.40496, "stage0_s": 0.0, "stage0_m": 0.01656, "stage0_l": 0.22258, "stage0_h": 0.42501, "stage1_loss_instance_mil": 0.07892, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03463, "stage1_mean_ious": 0.39366, "stage1_s": 0.0, "stage1_m": 0.00956, "stage1_l": 0.22336, "stage1_h": 0.41111, "loss": 0.1162, "grad_norm": 4.85083, "time": 1.66362}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09641, "stage0_loss_instance_mil": 0.00574, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.39943, "stage0_s": 0.0, "stage0_m": 0.03078, "stage0_l": 0.20983, "stage0_h": 0.41946, "stage1_loss_instance_mil": 0.08147, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.03435, "stage1_mean_ious": 0.3895, "stage1_s": 0.0, "stage1_m": 0.0196, "stage1_l": 0.21992, "stage1_h": 0.40876, "loss": 0.12156, "grad_norm": 4.78386, "time": 1.7262}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04163, "stage0_loss_instance_mil": 0.0036, "stage0_bag_acc": 99.78363, "stage0_mean_ious": 0.38837, "stage0_s": 0.0, "stage0_m": 0.0449, "stage0_l": 0.1709, "stage0_h": 0.41697, "stage1_loss_instance_mil": 0.08264, "stage1_bag_acc": 99.71746, "stage1_neg_loss": 0.03904, "stage1_mean_ious": 0.37876, "stage1_s": 0.0, "stage1_m": 0.03174, "stage1_l": 0.15227, "stage1_h": 0.41084, "loss": 0.12528, "grad_norm": 5.14013, "time": 1.68895}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04135, "stage0_loss_instance_mil": 0.00222, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.38959, "stage0_s": 0.0, "stage0_m": 0.04306, "stage0_l": 0.18666, "stage0_h": 0.4221, "stage1_loss_instance_mil": 0.07567, "stage1_bag_acc": 99.89474, "stage1_neg_loss": 0.03457, "stage1_mean_ious": 0.37407, "stage1_s": 0.0, "stage1_m": 0.03313, "stage1_l": 0.17672, "stage1_h": 0.40614, "loss": 0.11246, "grad_norm": 4.3815, "time": 1.69784}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.127, "bbox_mAP_50": 0.333, "bbox_mAP_75": 0.228, "bbox_mAP_s": 0.129, "bbox_mAP_m": 0.074, "bbox_mAP_l": 0.032, "bbox_mAP_copypaste": "0.127 0.333 0.228 0.129 0.074 0.032"}
