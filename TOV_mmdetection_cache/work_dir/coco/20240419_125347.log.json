{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09491, "stage0_loss_instance_mil": 0.71639, "stage0_bag_acc": 22.06942, "stage0_mean_ious": 0.32918, "stage0_s": 0.0, "stage0_m": 0.02802, "stage0_l": 0.14445, "stage0_h": 0.34783, "stage1_loss_instance_mil": 0.1669, "stage1_bag_acc": 19.73615, "stage1_neg_loss": 0.00067, "stage1_mean_ious": 0.32762, "stage1_s": 0.0, "stage1_m": 0.03096, "stage1_l": 0.14911, "stage1_h": 0.34479, "loss": 0.88396, "grad_norm": 3.36801, "time": 1.73358}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04602, "stage0_loss_instance_mil": 0.57371, "stage0_bag_acc": 64.10377, "stage0_mean_ious": 0.3749, "stage0_s": 0.0, "stage0_m": 0.0079, "stage0_l": 0.20266, "stage0_h": 0.39868, "stage1_loss_instance_mil": 0.25984, "stage1_bag_acc": 23.14848, "stage1_neg_loss": 0.00291, "stage1_mean_ious": 0.36893, "stage1_s": 0.0, "stage1_m": 0.00865, "stage1_l": 0.20575, "stage1_h": 0.39104, "loss": 0.83645, "grad_norm": 3.90317, "time": 1.72586}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04488, "stage0_loss_instance_mil": 0.22244, "stage0_bag_acc": 92.72053, "stage0_mean_ious": 0.36884, "stage0_s": 0.0, "stage0_m": 0.05447, "stage0_l": 0.19456, "stage0_h": 0.3969, "stage1_loss_instance_mil": 0.38189, "stage1_bag_acc": 76.59449, "stage1_neg_loss": 0.07071, "stage1_mean_ious": 0.34051, "stage1_s": 0.0, "stage1_m": 0.04736, "stage1_l": 0.18005, "stage1_h": 0.36504, "loss": 0.67504, "grad_norm": 12.08269, "time": 1.71544}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09865, "stage0_loss_instance_mil": 0.09919, "stage0_bag_acc": 95.2181, "stage0_mean_ious": 0.32738, "stage0_s": 0.0, "stage0_m": 0.05681, "stage0_l": 0.2014, "stage0_h": 0.34327, "stage1_loss_instance_mil": 0.36913, "stage1_bag_acc": 95.30322, "stage1_neg_loss": 0.09951, "stage1_mean_ious": 0.3025, "stage1_s": 0.0, "stage1_m": 0.05611, "stage1_l": 0.18352, "stage1_h": 0.31812, "loss": 0.56783, "grad_norm": 17.2053, "time": 1.75943}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04328, "stage0_loss_instance_mil": 0.07033, "stage0_bag_acc": 96.11736, "stage0_mean_ious": 0.30728, "stage0_s": 0.0, "stage0_m": 0.03412, "stage0_l": 0.12121, "stage0_h": 0.32961, "stage1_loss_instance_mil": 0.31605, "stage1_bag_acc": 96.83257, "stage1_neg_loss": 0.08781, "stage1_mean_ious": 0.27434, "stage1_s": 0.0, "stage1_m": 0.02979, "stage1_l": 0.10494, "stage1_h": 0.295, "loss": 0.47419, "grad_norm": 12.7219, "time": 1.6746}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04515, "stage0_loss_instance_mil": 0.05495, "stage0_bag_acc": 96.83465, "stage0_mean_ious": 0.3479, "stage0_s": 0.0, "stage0_m": 0.023, "stage0_l": 0.12111, "stage0_h": 0.37643, "stage1_loss_instance_mil": 0.31215, "stage1_bag_acc": 98.28721, "stage1_neg_loss": 0.08776, "stage1_mean_ious": 0.30085, "stage1_s": 0.0, "stage1_m": 0.01717, "stage1_l": 0.10615, "stage1_h": 0.32561, "loss": 0.45486, "grad_norm": 13.09473, "time": 1.70452}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09878, "stage0_loss_instance_mil": 0.03372, "stage0_bag_acc": 98.05748, "stage0_mean_ious": 0.36336, "stage0_s": 0.00141, "stage0_m": 0.05054, "stage0_l": 0.11317, "stage0_h": 0.3976, "stage1_loss_instance_mil": 0.2759, "stage1_bag_acc": 99.17545, "stage1_neg_loss": 0.08441, "stage1_mean_ious": 0.31399, "stage1_s": 0.00148, "stage1_m": 0.04525, "stage1_l": 0.09419, "stage1_h": 0.34483, "loss": 0.39402, "grad_norm": 12.36963, "time": 1.74827}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04312, "stage0_loss_instance_mil": 0.06913, "stage0_bag_acc": 96.2822, "stage0_mean_ious": 0.37118, "stage0_s": 0.0, "stage0_m": 0.03021, "stage0_l": 0.13806, "stage0_h": 0.39948, "stage1_loss_instance_mil": 0.26452, "stage1_bag_acc": 96.87324, "stage1_neg_loss": 0.07687, "stage1_mean_ious": 0.331, "stage1_s": 0.0, "stage1_m": 0.02558, "stage1_l": 0.12411, "stage1_h": 0.35627, "loss": 0.41051, "grad_norm": 13.09871, "time": 1.65572}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0437, "stage0_loss_instance_mil": 0.05402, "stage0_bag_acc": 96.70443, "stage0_mean_ious": 0.37087, "stage0_s": 0.0, "stage0_m": 0.03385, "stage0_l": 0.14058, "stage0_h": 0.4036, "stage1_loss_instance_mil": 0.23602, "stage1_bag_acc": 97.77812, "stage1_neg_loss": 0.0801, "stage1_mean_ious": 0.32689, "stage1_s": 0.0, "stage1_m": 0.03233, "stage1_l": 0.12111, "stage1_h": 0.35589, "loss": 0.37014, "grad_norm": 12.11217, "time": 1.69439}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0902, "stage0_loss_instance_mil": 0.02445, "stage0_bag_acc": 98.52666, "stage0_mean_ious": 0.39671, "stage0_s": 0.0, "stage0_m": 0.02973, "stage0_l": 0.14782, "stage0_h": 0.43055, "stage1_loss_instance_mil": 0.19656, "stage1_bag_acc": 98.49372, "stage1_neg_loss": 0.07287, "stage1_mean_ious": 0.36372, "stage1_s": 0.0, "stage1_m": 0.02584, "stage1_l": 0.12912, "stage1_h": 0.39529, "loss": 0.29388, "grad_norm": 10.2237, "time": 1.71017}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04462, "stage0_loss_instance_mil": 0.02191, "stage0_bag_acc": 98.83999, "stage0_mean_ious": 0.41915, "stage0_s": 0.0, "stage0_m": 0.04992, "stage0_l": 0.12931, "stage0_h": 0.45163, "stage1_loss_instance_mil": 0.18277, "stage1_bag_acc": 98.99453, "stage1_neg_loss": 0.06534, "stage1_mean_ious": 0.38707, "stage1_s": 0.0, "stage1_m": 0.03915, "stage1_l": 0.10945, "stage1_h": 0.4201, "loss": 0.27002, "grad_norm": 9.06928, "time": 1.67953}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04403, "stage0_loss_instance_mil": 0.02139, "stage0_bag_acc": 98.41744, "stage0_mean_ious": 0.42556, "stage0_s": 0.0, "stage0_m": 0.04189, "stage0_l": 0.14212, "stage0_h": 0.45733, "stage1_loss_instance_mil": 0.17145, "stage1_bag_acc": 99.24417, "stage1_neg_loss": 0.06042, "stage1_mean_ious": 0.41013, "stage1_s": 0.0, "stage1_m": 0.04659, "stage1_l": 0.13476, "stage1_h": 0.44061, "loss": 0.25326, "grad_norm": 9.22711, "time": 1.65986}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09192, "stage0_loss_instance_mil": 0.01893, "stage0_bag_acc": 99.05363, "stage0_mean_ious": 0.46657, "stage0_s": 0.0, "stage0_m": 0.0466, "stage0_l": 0.14981, "stage0_h": 0.50863, "stage1_loss_instance_mil": 0.12546, "stage1_bag_acc": 99.67807, "stage1_neg_loss": 0.05631, "stage1_mean_ious": 0.44788, "stage1_s": 0.0, "stage1_m": 0.05326, "stage1_l": 0.15808, "stage1_h": 0.4855, "loss": 0.20071, "grad_norm": 7.68797, "time": 1.69586}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04298, "stage0_loss_instance_mil": 0.01554, "stage0_bag_acc": 99.02965, "stage0_mean_ious": 0.47433, "stage0_s": 0.00147, "stage0_m": 0.03728, "stage0_l": 0.17409, "stage0_h": 0.52364, "stage1_loss_instance_mil": 0.12264, "stage1_bag_acc": 99.32277, "stage1_neg_loss": 0.05064, "stage1_mean_ious": 0.45468, "stage1_s": 0.00146, "stage1_m": 0.04009, "stage1_l": 0.17152, "stage1_h": 0.50071, "loss": 0.18882, "grad_norm": 6.48578, "time": 1.67316}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04157, "stage0_loss_instance_mil": 0.01976, "stage0_bag_acc": 98.87585, "stage0_mean_ious": 0.52853, "stage0_s": 0.0, "stage0_m": 0.0399, "stage0_l": 0.22856, "stage0_h": 0.57081, "stage1_loss_instance_mil": 0.09902, "stage1_bag_acc": 99.10762, "stage1_neg_loss": 0.04411, "stage1_mean_ious": 0.51144, "stage1_s": 0.0, "stage1_m": 0.03749, "stage1_l": 0.24066, "stage1_h": 0.54966, "loss": 0.16289, "grad_norm": 6.56129, "time": 1.63721}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09582, "stage0_loss_instance_mil": 0.00792, "stage0_bag_acc": 99.77185, "stage0_mean_ious": 0.50849, "stage0_s": 0.0, "stage0_m": 0.04604, "stage0_l": 0.22128, "stage0_h": 0.54962, "stage1_loss_instance_mil": 0.09479, "stage1_bag_acc": 99.65481, "stage1_neg_loss": 0.03339, "stage1_mean_ious": 0.48884, "stage1_s": 0.0, "stage1_m": 0.04858, "stage1_l": 0.23148, "stage1_h": 0.52521, "loss": 0.13609, "grad_norm": 5.55713, "time": 1.70619}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04466, "stage0_loss_instance_mil": 0.03039, "stage0_bag_acc": 97.89002, "stage0_mean_ious": 0.53855, "stage0_s": 0.0, "stage0_m": 0.03733, "stage0_l": 0.25065, "stage0_h": 0.58175, "stage1_loss_instance_mil": 0.12593, "stage1_bag_acc": 97.98718, "stage1_neg_loss": 0.04718, "stage1_mean_ious": 0.5273, "stage1_s": 0.0, "stage1_m": 0.03991, "stage1_l": 0.25424, "stage1_h": 0.56716, "loss": 0.2035, "grad_norm": 8.11406, "time": 1.70729}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04403, "stage0_loss_instance_mil": 0.01001, "stage0_bag_acc": 99.50822, "stage0_mean_ious": 0.52515, "stage0_s": 0.0, "stage0_m": 0.0545, "stage0_l": 0.24122, "stage0_h": 0.55298, "stage1_loss_instance_mil": 0.07743, "stage1_bag_acc": 99.6721, "stage1_neg_loss": 0.0403, "stage1_mean_ious": 0.51443, "stage1_s": 0.0, "stage1_m": 0.062, "stage1_l": 0.24936, "stage1_h": 0.5386, "loss": 0.12774, "grad_norm": 4.94458, "time": 1.687}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.242, "bbox_mAP_50": 0.497, "bbox_mAP_75": 0.4, "bbox_mAP_s": 0.275, "bbox_mAP_m": 0.21, "bbox_mAP_l": 0.136, "bbox_mAP_copypaste": "0.242 0.497 0.400 0.275 0.210 0.136"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09615, "stage0_loss_instance_mil": 0.00563, "stage0_bag_acc": 99.6686, "stage0_mean_ious": 0.56425, "stage0_s": 0.0, "stage0_m": 0.05686, "stage0_l": 0.2232, "stage0_h": 0.60472, "stage1_loss_instance_mil": 0.08143, "stage1_bag_acc": 99.81746, "stage1_neg_loss": 0.0369, "stage1_mean_ious": 0.54999, "stage1_s": 0.0, "stage1_m": 0.06518, "stage1_l": 0.24629, "stage1_h": 0.58353, "loss": 0.12396, "grad_norm": 5.72921, "time": 1.74355}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0441, "stage0_loss_instance_mil": 0.00788, "stage0_bag_acc": 99.71102, "stage0_mean_ious": 0.51179, "stage0_s": 0.0, "stage0_m": 0.08477, "stage0_l": 0.24276, "stage0_h": 0.55669, "stage1_loss_instance_mil": 0.0821, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.04073, "stage1_mean_ious": 0.5008, "stage1_s": 0.0, "stage1_m": 0.08903, "stage1_l": 0.25272, "stage1_h": 0.54104, "loss": 0.13071, "grad_norm": 5.77358, "time": 1.6639}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0432, "stage0_loss_instance_mil": 0.0197, "stage0_bag_acc": 98.93558, "stage0_mean_ious": 0.50518, "stage0_s": 0.0, "stage0_m": 0.03621, "stage0_l": 0.21197, "stage0_h": 0.53915, "stage1_loss_instance_mil": 0.08473, "stage1_bag_acc": 99.36327, "stage1_neg_loss": 0.03682, "stage1_mean_ious": 0.4888, "stage1_s": 0.0, "stage1_m": 0.03868, "stage1_l": 0.21162, "stage1_h": 0.52053, "loss": 0.14125, "grad_norm": 6.16813, "time": 1.66324}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.10094, "stage0_loss_instance_mil": 0.01289, "stage0_bag_acc": 99.17775, "stage0_mean_ious": 0.55602, "stage0_s": 0.0, "stage0_m": 0.06446, "stage0_l": 0.21176, "stage0_h": 0.58323, "stage1_loss_instance_mil": 0.07337, "stage1_bag_acc": 99.64902, "stage1_neg_loss": 0.03653, "stage1_mean_ious": 0.54162, "stage1_s": 0.0, "stage1_m": 0.06149, "stage1_l": 0.21903, "stage1_h": 0.56601, "loss": 0.12279, "grad_norm": 6.09252, "time": 1.74423}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04486, "stage0_loss_instance_mil": 0.01567, "stage0_bag_acc": 98.94449, "stage0_mean_ious": 0.54936, "stage0_s": 0.00153, "stage0_m": 0.05786, "stage0_l": 0.26198, "stage0_h": 0.57913, "stage1_loss_instance_mil": 0.06715, "stage1_bag_acc": 99.21306, "stage1_neg_loss": 0.03166, "stage1_mean_ious": 0.54023, "stage1_s": 0.00194, "stage1_m": 0.06529, "stage1_l": 0.27967, "stage1_h": 0.56553, "loss": 0.11448, "grad_norm": 5.08941, "time": 1.71261}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04413, "stage0_loss_instance_mil": 0.00693, "stage0_bag_acc": 99.43021, "stage0_mean_ious": 0.51371, "stage0_s": 0.0, "stage0_m": 0.03889, "stage0_l": 0.28254, "stage0_h": 0.53936, "stage1_loss_instance_mil": 0.06538, "stage1_bag_acc": 99.60926, "stage1_neg_loss": 0.03917, "stage1_mean_ious": 0.50014, "stage1_s": 0.0, "stage1_m": 0.04559, "stage1_l": 0.31027, "stage1_h": 0.5191, "loss": 0.11148, "grad_norm": 5.575, "time": 1.68047}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.10208, "stage0_loss_instance_mil": 0.01024, "stage0_bag_acc": 99.54332, "stage0_mean_ious": 0.52778, "stage0_s": 0.00182, "stage0_m": 0.06681, "stage0_l": 0.22508, "stage0_h": 0.56198, "stage1_loss_instance_mil": 0.05998, "stage1_bag_acc": 99.58618, "stage1_neg_loss": 0.03356, "stage1_mean_ious": 0.52218, "stage1_s": 0.00161, "stage1_m": 0.07029, "stage1_l": 0.23572, "stage1_h": 0.55392, "loss": 0.10378, "grad_norm": 4.13756, "time": 1.7391}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04977, "stage0_loss_instance_mil": 0.00584, "stage0_bag_acc": 99.71102, "stage0_mean_ious": 0.52247, "stage0_s": 0.0, "stage0_m": 0.05441, "stage0_l": 0.29783, "stage0_h": 0.55011, "stage1_loss_instance_mil": 0.05194, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.02703, "stage1_mean_ious": 0.51129, "stage1_s": 0.0, "stage1_m": 0.05345, "stage1_l": 0.30184, "stage1_h": 0.53709, "loss": 0.08482, "grad_norm": 3.10687, "time": 1.74343}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04771, "stage0_loss_instance_mil": 0.00527, "stage0_bag_acc": 99.57049, "stage0_mean_ious": 0.53593, "stage0_s": 0.0, "stage0_m": 0.03476, "stage0_l": 0.26131, "stage0_h": 0.56819, "stage1_loss_instance_mil": 0.04888, "stage1_bag_acc": 99.76667, "stage1_neg_loss": 0.02454, "stage1_mean_ious": 0.51922, "stage1_s": 0.0, "stage1_m": 0.0368, "stage1_l": 0.26592, "stage1_h": 0.54865, "loss": 0.07869, "grad_norm": 3.0935, "time": 1.68579}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.10003, "stage0_loss_instance_mil": 0.0035, "stage0_bag_acc": 99.85714, "stage0_mean_ious": 0.54196, "stage0_s": 0.0, "stage0_m": 0.0533, "stage0_l": 0.23626, "stage0_h": 0.57614, "stage1_loss_instance_mil": 0.04572, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02771, "stage1_mean_ious": 0.53283, "stage1_s": 0.0, "stage1_m": 0.06285, "stage1_l": 0.25239, "stage1_h": 0.56328, "loss": 0.07693, "grad_norm": 2.99518, "time": 1.75856}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04572, "stage0_loss_instance_mil": 0.0074, "stage0_bag_acc": 99.70016, "stage0_mean_ious": 0.54014, "stage0_s": 0.0, "stage0_m": 0.03563, "stage0_l": 0.2105, "stage0_h": 0.5663, "stage1_loss_instance_mil": 0.04796, "stage1_bag_acc": 99.70449, "stage1_neg_loss": 0.0257, "stage1_mean_ious": 0.52301, "stage1_s": 0.0, "stage1_m": 0.03765, "stage1_l": 0.21, "stage1_h": 0.54642, "loss": 0.08106, "grad_norm": 3.2811, "time": 1.70061}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04453, "stage0_loss_instance_mil": 0.00276, "stage0_bag_acc": 99.92593, "stage0_mean_ious": 0.5413, "stage0_s": 0.0, "stage0_m": 0.11343, "stage0_l": 0.26842, "stage0_h": 0.5822, "stage1_loss_instance_mil": 0.04446, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.03013, "stage1_mean_ious": 0.52014, "stage1_s": 0.0, "stage1_m": 0.11649, "stage1_l": 0.27724, "stage1_h": 0.55578, "loss": 0.07734, "grad_norm": 3.36995, "time": 1.70396}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.10107, "stage0_loss_instance_mil": 0.00195, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.51328, "stage0_s": 0.0, "stage0_m": 0.06168, "stage0_l": 0.27515, "stage0_h": 0.54824, "stage1_loss_instance_mil": 0.04721, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02221, "stage1_mean_ious": 0.50426, "stage1_s": 0.0, "stage1_m": 0.06598, "stage1_l": 0.28352, "stage1_h": 0.53609, "loss": 0.07137, "grad_norm": 2.84304, "time": 1.75525}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04461, "stage0_loss_instance_mil": 0.00267, "stage0_bag_acc": 99.76667, "stage0_mean_ious": 0.53072, "stage0_s": 0.0, "stage0_m": 0.0599, "stage0_l": 0.26749, "stage0_h": 0.56997, "stage1_loss_instance_mil": 0.04527, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.0299, "stage1_mean_ious": 0.5219, "stage1_s": 0.0, "stage1_m": 0.05979, "stage1_l": 0.27144, "stage1_h": 0.55834, "loss": 0.07783, "grad_norm": 3.61857, "time": 1.70879}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04413, "stage0_loss_instance_mil": 0.00628, "stage0_bag_acc": 99.80476, "stage0_mean_ious": 0.55771, "stage0_s": 0.0, "stage0_m": 0.03435, "stage0_l": 0.23691, "stage0_h": 0.59422, "stage1_loss_instance_mil": 0.03714, "stage1_bag_acc": 99.82143, "stage1_neg_loss": 0.02039, "stage1_mean_ious": 0.53749, "stage1_s": 0.0, "stage1_m": 0.03885, "stage1_l": 0.24978, "stage1_h": 0.56862, "loss": 0.06381, "grad_norm": 2.68161, "time": 1.68474}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09902, "stage0_loss_instance_mil": 0.003, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.51211, "stage0_s": 0.0, "stage0_m": 0.09538, "stage0_l": 0.27944, "stage0_h": 0.55199, "stage1_loss_instance_mil": 0.04377, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.0256, "stage1_mean_ious": 0.49332, "stage1_s": 0.0, "stage1_m": 0.09172, "stage1_l": 0.28069, "stage1_h": 0.52986, "loss": 0.07237, "grad_norm": 3.02529, "time": 1.73925}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04368, "stage0_loss_instance_mil": 0.0022, "stage0_bag_acc": 99.88889, "stage0_mean_ious": 0.54548, "stage0_s": 0.0, "stage0_m": 0.04703, "stage0_l": 0.26077, "stage0_h": 0.57979, "stage1_loss_instance_mil": 0.04108, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.02153, "stage1_mean_ious": 0.53309, "stage1_s": 0.0, "stage1_m": 0.05149, "stage1_l": 0.27114, "stage1_h": 0.56286, "loss": 0.06481, "grad_norm": 2.83255, "time": 1.67194}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04474, "stage0_loss_instance_mil": 0.00292, "stage0_bag_acc": 99.76623, "stage0_mean_ious": 0.54388, "stage0_s": 0.0, "stage0_m": 0.07795, "stage0_l": 0.24298, "stage0_h": 0.57879, "stage1_loss_instance_mil": 0.04284, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02362, "stage1_mean_ious": 0.52622, "stage1_s": 0.0, "stage1_m": 0.07919, "stage1_l": 0.24114, "stage1_h": 0.5596, "loss": 0.06938, "grad_norm": 3.00377, "time": 1.68957}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.258, "bbox_mAP_50": 0.529, "bbox_mAP_75": 0.435, "bbox_mAP_s": 0.304, "bbox_mAP_m": 0.224, "bbox_mAP_l": 0.133, "bbox_mAP_copypaste": "0.258 0.529 0.435 0.304 0.224 0.133"}
