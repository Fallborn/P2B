{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=2,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [5]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17879, "data_time": 0.07547, "stage0_loss_instance_mil": 0.69422, "stage0_bag_acc": 23.55166, "stage0_mean_ious": 0.38931, "stage0_s": 0.0, "stage0_m": 0.069, "stage0_l": 0.2806, "stage0_h": 0.40616, "stage1_loss_instance_mil": 0.18041, "stage1_bag_acc": 15.52273, "stage1_neg_loss": 0.00131, "stage1_mean_ious": 0.39026, "stage1_s": 0.0, "stage1_m": 0.06565, "stage1_l": 0.30628, "stage1_h": 0.40268, "loss": 0.87594, "grad_norm": 3.05438, "time": 1.62018}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17879, "data_time": 0.02652, "stage0_loss_instance_mil": 0.54008, "stage0_bag_acc": 63.10614, "stage0_mean_ious": 0.38842, "stage0_s": 0.0, "stage0_m": 0.02458, "stage0_l": 0.26474, "stage0_h": 0.39495, "stage1_loss_instance_mil": 0.26052, "stage1_bag_acc": 39.88569, "stage1_neg_loss": 0.01047, "stage1_mean_ious": 0.37718, "stage1_s": 0.0, "stage1_m": 0.02106, "stage1_l": 0.26706, "stage1_h": 0.38116, "loss": 0.81106, "grad_norm": 5.12943, "time": 1.56245}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17879, "data_time": 0.02557, "stage0_loss_instance_mil": 0.21264, "stage0_bag_acc": 92.86816, "stage0_mean_ious": 0.40159, "stage0_s": 0.0, "stage0_m": 0.06111, "stage0_l": 0.21041, "stage0_h": 0.42126, "stage1_loss_instance_mil": 0.36326, "stage1_bag_acc": 85.3884, "stage1_neg_loss": 0.08901, "stage1_mean_ious": 0.37925, "stage1_s": 0.0, "stage1_m": 0.05489, "stage1_l": 0.19087, "stage1_h": 0.39985, "loss": 0.66491, "grad_norm": 14.56301, "time": 1.54724}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17879, "data_time": 0.07525, "stage0_loss_instance_mil": 0.07896, "stage0_bag_acc": 96.20723, "stage0_mean_ious": 0.38185, "stage0_s": 0.0, "stage0_m": 0.05734, "stage0_l": 0.17371, "stage0_h": 0.40965, "stage1_loss_instance_mil": 0.33904, "stage1_bag_acc": 97.99248, "stage1_neg_loss": 0.08862, "stage1_mean_ious": 0.35513, "stage1_s": 0.0, "stage1_m": 0.04757, "stage1_l": 0.16499, "stage1_h": 0.38056, "loss": 0.50662, "grad_norm": 13.87727, "time": 1.60552}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17879, "data_time": 0.02621, "stage0_loss_instance_mil": 0.06241, "stage0_bag_acc": 96.86123, "stage0_mean_ious": 0.38045, "stage0_s": 0.0, "stage0_m": 0.06196, "stage0_l": 0.17772, "stage0_h": 0.4101, "stage1_loss_instance_mil": 0.29549, "stage1_bag_acc": 97.66293, "stage1_neg_loss": 0.08583, "stage1_mean_ious": 0.35903, "stage1_s": 0.0, "stage1_m": 0.05069, "stage1_l": 0.17559, "stage1_h": 0.38616, "loss": 0.44373, "grad_norm": 12.64798, "time": 1.52726}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17879, "data_time": 0.02649, "stage0_loss_instance_mil": 0.05371, "stage0_bag_acc": 96.73387, "stage0_mean_ious": 0.38974, "stage0_s": 0.0, "stage0_m": 0.02816, "stage0_l": 0.14534, "stage0_h": 0.41994, "stage1_loss_instance_mil": 0.24657, "stage1_bag_acc": 97.96955, "stage1_neg_loss": 0.0778, "stage1_mean_ious": 0.36998, "stage1_s": 0.0, "stage1_m": 0.02486, "stage1_l": 0.14098, "stage1_h": 0.39944, "loss": 0.37807, "grad_norm": 11.17602, "time": 1.53817}
{"mode": "val", "epoch": 2, "iter": 180, "lr": 4e-05, "eval_iter_num": 90, "bbox_mAP": 0.338, "bbox_mAP_50": 0.338, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.338 0.338 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17879, "data_time": 0.07686, "stage0_loss_instance_mil": 0.03314, "stage0_bag_acc": 98.08354, "stage0_mean_ious": 0.37075, "stage0_s": 0.0, "stage0_m": 0.06266, "stage0_l": 0.12693, "stage0_h": 0.39674, "stage1_loss_instance_mil": 0.2138, "stage1_bag_acc": 99.11577, "stage1_neg_loss": 0.06955, "stage1_mean_ious": 0.35677, "stage1_s": 0.0, "stage1_m": 0.06692, "stage1_l": 0.12113, "stage1_h": 0.38198, "loss": 0.31649, "grad_norm": 11.07008, "time": 1.56332}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17879, "data_time": 0.02568, "stage0_loss_instance_mil": 0.03505, "stage0_bag_acc": 97.42396, "stage0_mean_ious": 0.35052, "stage0_s": 0.0, "stage0_m": 0.02106, "stage0_l": 0.11252, "stage0_h": 0.37298, "stage1_loss_instance_mil": 0.19108, "stage1_bag_acc": 98.7554, "stage1_neg_loss": 0.07485, "stage1_mean_ious": 0.33374, "stage1_s": 0.0, "stage1_m": 0.01515, "stage1_l": 0.10945, "stage1_h": 0.3547, "loss": 0.30098, "grad_norm": 11.44282, "time": 1.55}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17879, "data_time": 0.02617, "stage0_loss_instance_mil": 0.02485, "stage0_bag_acc": 98.87137, "stage0_mean_ious": 0.36818, "stage0_s": 0.0, "stage0_m": 0.04253, "stage0_l": 0.15418, "stage0_h": 0.39001, "stage1_loss_instance_mil": 0.21372, "stage1_bag_acc": 98.90454, "stage1_neg_loss": 0.07077, "stage1_mean_ious": 0.34867, "stage1_s": 0.0, "stage1_m": 0.03311, "stage1_l": 0.15112, "stage1_h": 0.36897, "loss": 0.30935, "grad_norm": 11.90044, "time": 1.58058}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17879, "data_time": 0.07581, "stage0_loss_instance_mil": 0.02858, "stage0_bag_acc": 98.37315, "stage0_mean_ious": 0.44059, "stage0_s": 0.0, "stage0_m": 0.01535, "stage0_l": 0.15854, "stage0_h": 0.46851, "stage1_loss_instance_mil": 0.15945, "stage1_bag_acc": 98.35752, "stage1_neg_loss": 0.05508, "stage1_mean_ious": 0.41128, "stage1_s": 0.0, "stage1_m": 0.01621, "stage1_l": 0.14718, "stage1_h": 0.4374, "loss": 0.24311, "grad_norm": 8.69225, "time": 1.6156}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17879, "data_time": 0.0254, "stage0_loss_instance_mil": 0.05953, "stage0_bag_acc": 95.88539, "stage0_mean_ious": 0.4399, "stage0_s": 0.0, "stage0_m": 0.07284, "stage0_l": 0.21141, "stage0_h": 0.47975, "stage1_loss_instance_mil": 0.12081, "stage1_bag_acc": 97.07334, "stage1_neg_loss": 0.04957, "stage1_mean_ious": 0.41258, "stage1_s": 0.0, "stage1_m": 0.07639, "stage1_l": 0.21066, "stage1_h": 0.44731, "loss": 0.2299, "grad_norm": 9.33871, "time": 1.5384}
