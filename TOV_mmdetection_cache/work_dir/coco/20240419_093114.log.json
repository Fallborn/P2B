{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09788, "stage0_loss_instance_mil": 0.72879, "stage0_bag_acc": 23.72132, "stage0_mean_ious": 0.43096, "stage0_s": 0.0, "stage0_m": 0.05633, "stage0_l": 0.23814, "stage0_h": 0.45173, "stage1_loss_instance_mil": 0.1576, "stage1_bag_acc": 11.95341, "stage1_neg_loss": 0.00119, "stage1_mean_ious": 0.40813, "stage1_s": 0.0, "stage1_m": 0.05759, "stage1_l": 0.23004, "stage1_h": 0.42641, "loss": 0.88758, "grad_norm": 3.26209, "time": 1.75691}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04135, "stage0_loss_instance_mil": 0.57733, "stage0_bag_acc": 59.31833, "stage0_mean_ious": 0.36846, "stage0_s": 0.0, "stage0_m": 0.05239, "stage0_l": 0.23456, "stage0_h": 0.38524, "stage1_loss_instance_mil": 0.2484, "stage1_bag_acc": 27.28181, "stage1_neg_loss": 0.00396, "stage1_mean_ious": 0.34875, "stage1_s": 0.0, "stage1_m": 0.05547, "stage1_l": 0.22821, "stage1_h": 0.3638, "loss": 0.82968, "grad_norm": 4.41753, "time": 1.62667}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04223, "stage0_loss_instance_mil": 0.26919, "stage0_bag_acc": 84.78936, "stage0_mean_ious": 0.33146, "stage0_s": 0.0, "stage0_m": 0.03314, "stage0_l": 0.2268, "stage0_h": 0.34067, "stage1_loss_instance_mil": 0.3374, "stage1_bag_acc": 81.83548, "stage1_neg_loss": 0.06777, "stage1_mean_ious": 0.31656, "stage1_s": 0.0, "stage1_m": 0.03037, "stage1_l": 0.23609, "stage1_h": 0.32104, "loss": 0.67436, "grad_norm": 12.32247, "time": 1.68654}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09515, "stage0_loss_instance_mil": 0.08496, "stage0_bag_acc": 96.08305, "stage0_mean_ious": 0.31477, "stage0_s": 0.0017, "stage0_m": 0.04452, "stage0_l": 0.16756, "stage0_h": 0.33557, "stage1_loss_instance_mil": 0.40506, "stage1_bag_acc": 96.78694, "stage1_neg_loss": 0.09048, "stage1_mean_ious": 0.29024, "stage1_s": 0.00185, "stage1_m": 0.05009, "stage1_l": 0.17278, "stage1_h": 0.30633, "loss": 0.5805, "grad_norm": 12.36974, "time": 1.74912}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04272, "stage0_loss_instance_mil": 0.07616, "stage0_bag_acc": 95.64167, "stage0_mean_ious": 0.32999, "stage0_s": 0.0, "stage0_m": 0.0587, "stage0_l": 0.13554, "stage0_h": 0.35679, "stage1_loss_instance_mil": 0.35055, "stage1_bag_acc": 96.57096, "stage1_neg_loss": 0.09304, "stage1_mean_ious": 0.30488, "stage1_s": 0.0, "stage1_m": 0.05437, "stage1_l": 0.13501, "stage1_h": 0.32748, "loss": 0.51975, "grad_norm": 13.56795, "time": 1.6897}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04354, "stage0_loss_instance_mil": 0.05928, "stage0_bag_acc": 96.4716, "stage0_mean_ious": 0.33168, "stage0_s": 0.0, "stage0_m": 0.06465, "stage0_l": 0.13003, "stage0_h": 0.3511, "stage1_loss_instance_mil": 0.31806, "stage1_bag_acc": 97.62309, "stage1_neg_loss": 0.0974, "stage1_mean_ious": 0.30098, "stage1_s": 0.0, "stage1_m": 0.05463, "stage1_l": 0.11568, "stage1_h": 0.31844, "loss": 0.47474, "grad_norm": 16.88729, "time": 1.6801}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.0968, "stage0_loss_instance_mil": 0.0381, "stage0_bag_acc": 97.43841, "stage0_mean_ious": 0.38902, "stage0_s": 0.0, "stage0_m": 0.03878, "stage0_l": 0.12666, "stage0_h": 0.4219, "stage1_loss_instance_mil": 0.27493, "stage1_bag_acc": 98.85967, "stage1_neg_loss": 0.09157, "stage1_mean_ious": 0.34562, "stage1_s": 0.0, "stage1_m": 0.0293, "stage1_l": 0.11494, "stage1_h": 0.37588, "loss": 0.4046, "grad_norm": 16.75253, "time": 1.75148}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04266, "stage0_loss_instance_mil": 0.0303, "stage0_bag_acc": 98.39728, "stage0_mean_ious": 0.37566, "stage0_s": 0.0, "stage0_m": 0.05954, "stage0_l": 0.13778, "stage0_h": 0.4201, "stage1_loss_instance_mil": 0.28294, "stage1_bag_acc": 99.54159, "stage1_neg_loss": 0.08618, "stage1_mean_ious": 0.3333, "stage1_s": 0.0, "stage1_m": 0.05697, "stage1_l": 0.12957, "stage1_h": 0.37173, "loss": 0.39943, "grad_norm": 18.65177, "time": 1.66813}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04393, "stage0_loss_instance_mil": 0.02197, "stage0_bag_acc": 98.75256, "stage0_mean_ious": 0.33305, "stage0_s": 0.0, "stage0_m": 0.03811, "stage0_l": 0.11674, "stage0_h": 0.3627, "stage1_loss_instance_mil": 0.27115, "stage1_bag_acc": 99.13233, "stage1_neg_loss": 0.08234, "stage1_mean_ious": 0.29427, "stage1_s": 0.0, "stage1_m": 0.0373, "stage1_l": 0.10734, "stage1_h": 0.32105, "loss": 0.37545, "grad_norm": 15.20686, "time": 1.71564}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09521, "stage0_loss_instance_mil": 0.04573, "stage0_bag_acc": 96.75841, "stage0_mean_ious": 0.31969, "stage0_s": 0.0, "stage0_m": 0.04473, "stage0_l": 0.11453, "stage0_h": 0.35652, "stage1_loss_instance_mil": 0.22701, "stage1_bag_acc": 97.8339, "stage1_neg_loss": 0.07626, "stage1_mean_ious": 0.27743, "stage1_s": 0.0, "stage1_m": 0.03457, "stage1_l": 0.08994, "stage1_h": 0.31236, "loss": 0.349, "grad_norm": 14.94636, "time": 1.7433}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04315, "stage0_loss_instance_mil": 0.03964, "stage0_bag_acc": 97.57795, "stage0_mean_ious": 0.32378, "stage0_s": 0.0, "stage0_m": 0.01985, "stage0_l": 0.09651, "stage0_h": 0.34791, "stage1_loss_instance_mil": 0.29448, "stage1_bag_acc": 98.32085, "stage1_neg_loss": 0.08761, "stage1_mean_ious": 0.28435, "stage1_s": 0.0, "stage1_m": 0.01533, "stage1_l": 0.08278, "stage1_h": 0.30622, "loss": 0.42173, "grad_norm": 19.91606, "time": 1.70096}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04214, "stage0_loss_instance_mil": 0.03282, "stage0_bag_acc": 98.01107, "stage0_mean_ious": 0.25626, "stage0_s": 0.00107, "stage0_m": 0.05794, "stage0_l": 0.11168, "stage0_h": 0.27725, "stage1_loss_instance_mil": 0.25642, "stage1_bag_acc": 99.08525, "stage1_neg_loss": 0.07604, "stage1_mean_ious": 0.22807, "stage1_s": 0.00162, "stage1_m": 0.05191, "stage1_l": 0.10127, "stage1_h": 0.24679, "loss": 0.36527, "grad_norm": 14.65419, "time": 1.66591}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09702, "stage0_loss_instance_mil": 0.03096, "stage0_bag_acc": 97.92072, "stage0_mean_ious": 0.26514, "stage0_s": 0.0, "stage0_m": 0.02569, "stage0_l": 0.10522, "stage0_h": 0.28505, "stage1_loss_instance_mil": 0.21445, "stage1_bag_acc": 98.85377, "stage1_neg_loss": 0.07066, "stage1_mean_ious": 0.23758, "stage1_s": 0.0, "stage1_m": 0.01759, "stage1_l": 0.08995, "stage1_h": 0.2571, "loss": 0.31607, "grad_norm": 11.45408, "time": 1.74453}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0426, "stage0_loss_instance_mil": 0.0131, "stage0_bag_acc": 99.5768, "stage0_mean_ious": 0.24887, "stage0_s": 0.00203, "stage0_m": 0.02275, "stage0_l": 0.10101, "stage0_h": 0.26225, "stage1_loss_instance_mil": 0.20325, "stage1_bag_acc": 99.91667, "stage1_neg_loss": 0.06791, "stage1_mean_ious": 0.22328, "stage1_s": 0.00163, "stage1_m": 0.02381, "stage1_l": 0.09807, "stage1_h": 0.23359, "loss": 0.28426, "grad_norm": 10.67098, "time": 1.70276}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04235, "stage0_loss_instance_mil": 0.01634, "stage0_bag_acc": 99.16108, "stage0_mean_ious": 0.21834, "stage0_s": 0.0, "stage0_m": 0.02499, "stage0_l": 0.09248, "stage0_h": 0.23744, "stage1_loss_instance_mil": 0.18048, "stage1_bag_acc": 98.83272, "stage1_neg_loss": 0.07085, "stage1_mean_ious": 0.19791, "stage1_s": 0.0, "stage1_m": 0.02282, "stage1_l": 0.08962, "stage1_h": 0.21422, "loss": 0.26768, "grad_norm": 11.46925, "time": 1.67046}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09122, "stage0_loss_instance_mil": 0.01075, "stage0_bag_acc": 99.34547, "stage0_mean_ious": 0.2036, "stage0_s": 0.00149, "stage0_m": 0.02043, "stage0_l": 0.09142, "stage0_h": 0.21508, "stage1_loss_instance_mil": 0.18326, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.06689, "stage1_mean_ious": 0.18472, "stage1_s": 0.00162, "stage1_m": 0.02062, "stage1_l": 0.08398, "stage1_h": 0.19448, "loss": 0.26091, "grad_norm": 9.60359, "time": 1.71623}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04261, "stage0_loss_instance_mil": 0.01925, "stage0_bag_acc": 99.28038, "stage0_mean_ious": 0.20363, "stage0_s": 0.0, "stage0_m": 0.01862, "stage0_l": 0.08821, "stage0_h": 0.21848, "stage1_loss_instance_mil": 0.17622, "stage1_bag_acc": 99.13615, "stage1_neg_loss": 0.06272, "stage1_mean_ious": 0.18815, "stage1_s": 0.0, "stage1_m": 0.01561, "stage1_l": 0.08247, "stage1_h": 0.20233, "loss": 0.25818, "grad_norm": 11.52456, "time": 1.65654}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0436, "stage0_loss_instance_mil": 0.02517, "stage0_bag_acc": 98.92302, "stage0_mean_ious": 0.17541, "stage0_s": 0.0, "stage0_m": 0.03861, "stage0_l": 0.09548, "stage0_h": 0.18197, "stage1_loss_instance_mil": 0.17163, "stage1_bag_acc": 98.47104, "stage1_neg_loss": 0.07034, "stage1_mean_ious": 0.16664, "stage1_s": 0.0, "stage1_m": 0.03391, "stage1_l": 0.09636, "stage1_h": 0.17324, "loss": 0.26714, "grad_norm": 10.5038, "time": 1.67017}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.003, "bbox_mAP_50": 0.016, "bbox_mAP_75": 0.003, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.003 0.016 0.003 0.000 0.000 0.000"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09538, "stage0_loss_instance_mil": 0.01483, "stage0_bag_acc": 99.1583, "stage0_mean_ious": 0.17999, "stage0_s": 0.0, "stage0_m": 0.01767, "stage0_l": 0.09595, "stage0_h": 0.18735, "stage1_loss_instance_mil": 0.15592, "stage1_bag_acc": 99.31622, "stage1_neg_loss": 0.06704, "stage1_mean_ious": 0.16484, "stage1_s": 0.0, "stage1_m": 0.01901, "stage1_l": 0.09444, "stage1_h": 0.17053, "loss": 0.23779, "grad_norm": 9.36501, "time": 1.75351}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0413, "stage0_loss_instance_mil": 0.01295, "stage0_bag_acc": 99.34353, "stage0_mean_ious": 0.16881, "stage0_s": 0.0002, "stage0_m": 0.04777, "stage0_l": 0.10004, "stage0_h": 0.17431, "stage1_loss_instance_mil": 0.16042, "stage1_bag_acc": 99.22987, "stage1_neg_loss": 0.05878, "stage1_mean_ious": 0.15534, "stage1_s": 0.00133, "stage1_m": 0.04688, "stage1_l": 0.09312, "stage1_h": 0.15949, "loss": 0.23215, "grad_norm": 9.66727, "time": 1.64233}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04321, "stage0_loss_instance_mil": 0.05206, "stage0_bag_acc": 96.90957, "stage0_mean_ious": 0.18762, "stage0_s": 0.0, "stage0_m": 0.02605, "stage0_l": 0.09051, "stage0_h": 0.19743, "stage1_loss_instance_mil": 0.15046, "stage1_bag_acc": 97.17933, "stage1_neg_loss": 0.058, "stage1_mean_ious": 0.17362, "stage1_s": 0.0, "stage1_m": 0.03231, "stage1_l": 0.08492, "stage1_h": 0.18225, "loss": 0.26053, "grad_norm": 9.28357, "time": 1.70512}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09391, "stage0_loss_instance_mil": 0.01338, "stage0_bag_acc": 99.27356, "stage0_mean_ious": 0.19469, "stage0_s": 0.0, "stage0_m": 0.04226, "stage0_l": 0.08753, "stage0_h": 0.20434, "stage1_loss_instance_mil": 0.14634, "stage1_bag_acc": 99.66542, "stage1_neg_loss": 0.06241, "stage1_mean_ious": 0.1805, "stage1_s": 0.0, "stage1_m": 0.041, "stage1_l": 0.08521, "stage1_h": 0.18888, "loss": 0.22213, "grad_norm": 9.85467, "time": 1.75858}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04178, "stage0_loss_instance_mil": 0.01373, "stage0_bag_acc": 99.4554, "stage0_mean_ious": 0.20534, "stage0_s": 0.0, "stage0_m": 0.03386, "stage0_l": 0.11347, "stage0_h": 0.21678, "stage1_loss_instance_mil": 0.12902, "stage1_bag_acc": 99.42992, "stage1_neg_loss": 0.05635, "stage1_mean_ious": 0.19115, "stage1_s": 0.0, "stage1_m": 0.03768, "stage1_l": 0.10605, "stage1_h": 0.20061, "loss": 0.1991, "grad_norm": 7.83061, "time": 1.6446}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04222, "stage0_loss_instance_mil": 0.01078, "stage0_bag_acc": 99.38835, "stage0_mean_ious": 0.23579, "stage0_s": 0.0, "stage0_m": 0.01951, "stage0_l": 0.10212, "stage0_h": 0.25073, "stage1_loss_instance_mil": 0.13627, "stage1_bag_acc": 98.87833, "stage1_neg_loss": 0.05817, "stage1_mean_ious": 0.21267, "stage1_s": 0.0, "stage1_m": 0.01782, "stage1_l": 0.09793, "stage1_h": 0.22558, "loss": 0.20522, "grad_norm": 10.22972, "time": 1.67585}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09278, "stage0_loss_instance_mil": 0.00626, "stage0_bag_acc": 99.7388, "stage0_mean_ious": 0.21804, "stage0_s": 0.0, "stage0_m": 0.03708, "stage0_l": 0.08915, "stage0_h": 0.23101, "stage1_loss_instance_mil": 0.10496, "stage1_bag_acc": 99.7381, "stage1_neg_loss": 0.05113, "stage1_mean_ious": 0.20263, "stage1_s": 0.0, "stage1_m": 0.03595, "stage1_l": 0.0863, "stage1_h": 0.21415, "loss": 0.16236, "grad_norm": 6.26342, "time": 1.7176}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04239, "stage0_loss_instance_mil": 0.00404, "stage0_bag_acc": 99.78889, "stage0_mean_ious": 0.22726, "stage0_s": 0.00015, "stage0_m": 0.02399, "stage0_l": 0.08612, "stage0_h": 0.24345, "stage1_loss_instance_mil": 0.10652, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.05274, "stage1_mean_ious": 0.21267, "stage1_s": 0.00092, "stage1_m": 0.02528, "stage1_l": 0.08112, "stage1_h": 0.22646, "loss": 0.1633, "grad_norm": 6.20593, "time": 1.65901}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04446, "stage0_loss_instance_mil": 0.00606, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.24248, "stage0_s": 0.0, "stage0_m": 0.03815, "stage0_l": 0.08592, "stage0_h": 0.2596, "stage1_loss_instance_mil": 0.10441, "stage1_bag_acc": 99.9, "stage1_neg_loss": 0.0525, "stage1_mean_ious": 0.21871, "stage1_s": 0.0, "stage1_m": 0.04056, "stage1_l": 0.07706, "stage1_h": 0.23369, "loss": 0.16296, "grad_norm": 6.47007, "time": 1.69242}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09361, "stage0_loss_instance_mil": 0.00351, "stage0_bag_acc": 99.72576, "stage0_mean_ious": 0.24165, "stage0_s": 0.0, "stage0_m": 0.03722, "stage0_l": 0.09333, "stage0_h": 0.26147, "stage1_loss_instance_mil": 0.10408, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04857, "stage1_mean_ious": 0.22006, "stage1_s": 0.0, "stage1_m": 0.04149, "stage1_l": 0.08731, "stage1_h": 0.23702, "loss": 0.15616, "grad_norm": 5.36544, "time": 1.71635}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04384, "stage0_loss_instance_mil": 0.00872, "stage0_bag_acc": 99.68333, "stage0_mean_ious": 0.24071, "stage0_s": 0.0, "stage0_m": 0.02186, "stage0_l": 0.08215, "stage0_h": 0.25696, "stage1_loss_instance_mil": 0.10561, "stage1_bag_acc": 99.80476, "stage1_neg_loss": 0.04846, "stage1_mean_ious": 0.21912, "stage1_s": 0.0, "stage1_m": 0.02103, "stage1_l": 0.08166, "stage1_h": 0.23284, "loss": 0.16279, "grad_norm": 5.57595, "time": 1.67876}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04252, "stage0_loss_instance_mil": 0.00357, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.22581, "stage0_s": 0.0, "stage0_m": 0.0235, "stage0_l": 0.10447, "stage0_h": 0.24192, "stage1_loss_instance_mil": 0.09346, "stage1_bag_acc": 99.78235, "stage1_neg_loss": 0.05005, "stage1_mean_ious": 0.21028, "stage1_s": 0.0, "stage1_m": 0.02672, "stage1_l": 0.09985, "stage1_h": 0.22466, "loss": 0.14707, "grad_norm": 5.97728, "time": 1.63685}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.0945, "stage0_loss_instance_mil": 0.00711, "stage0_bag_acc": 99.80476, "stage0_mean_ious": 0.23295, "stage0_s": 0.0, "stage0_m": 0.02865, "stage0_l": 0.08983, "stage0_h": 0.24903, "stage1_loss_instance_mil": 0.09743, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.04683, "stage1_mean_ious": 0.21263, "stage1_s": 0.0, "stage1_m": 0.02895, "stage1_l": 0.08861, "stage1_h": 0.22576, "loss": 0.15138, "grad_norm": 5.62825, "time": 1.70747}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04208, "stage0_loss_instance_mil": 0.00261, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.25179, "stage0_s": 0.0, "stage0_m": 0.01852, "stage0_l": 0.0928, "stage0_h": 0.27237, "stage1_loss_instance_mil": 0.0952, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04944, "stage1_mean_ious": 0.22949, "stage1_s": 0.0, "stage1_m": 0.02168, "stage1_l": 0.08672, "stage1_h": 0.24772, "loss": 0.14724, "grad_norm": 6.05051, "time": 1.6835}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04205, "stage0_loss_instance_mil": 0.00698, "stage0_bag_acc": 99.66032, "stage0_mean_ious": 0.23884, "stage0_s": 0.0, "stage0_m": 0.02222, "stage0_l": 0.07817, "stage0_h": 0.25521, "stage1_loss_instance_mil": 0.0979, "stage1_bag_acc": 99.61758, "stage1_neg_loss": 0.04823, "stage1_mean_ious": 0.22052, "stage1_s": 0.0, "stage1_m": 0.02544, "stage1_l": 0.07646, "stage1_h": 0.23438, "loss": 0.15311, "grad_norm": 6.15368, "time": 1.68346}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09701, "stage0_loss_instance_mil": 0.00787, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.23471, "stage0_s": 0.0, "stage0_m": 0.02014, "stage0_l": 0.09366, "stage0_h": 0.24869, "stage1_loss_instance_mil": 0.08811, "stage1_bag_acc": 99.66667, "stage1_neg_loss": 0.04941, "stage1_mean_ious": 0.21378, "stage1_s": 0.0, "stage1_m": 0.02397, "stage1_l": 0.08595, "stage1_h": 0.22579, "loss": 0.14539, "grad_norm": 5.73108, "time": 1.69763}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.0427, "stage0_loss_instance_mil": 0.00347, "stage0_bag_acc": 99.92857, "stage0_mean_ious": 0.2304, "stage0_s": 0.0, "stage0_m": 0.03662, "stage0_l": 0.08944, "stage0_h": 0.24581, "stage1_loss_instance_mil": 0.10988, "stage1_bag_acc": 99.92857, "stage1_neg_loss": 0.04548, "stage1_mean_ious": 0.21358, "stage1_s": 0.00037, "stage1_m": 0.039, "stage1_l": 0.09195, "stage1_h": 0.22577, "loss": 0.15883, "grad_norm": 5.31907, "time": 1.69998}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04245, "stage0_loss_instance_mil": 0.00247, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.23631, "stage0_s": 0.0, "stage0_m": 0.06088, "stage0_l": 0.12313, "stage0_h": 0.25591, "stage1_loss_instance_mil": 0.09407, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04208, "stage1_mean_ious": 0.2193, "stage1_s": 0.0, "stage1_m": 0.05798, "stage1_l": 0.12806, "stage1_h": 0.23508, "loss": 0.13862, "grad_norm": 5.60683, "time": 1.64577}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.04, "bbox_mAP_50": 0.125, "bbox_mAP_75": 0.082, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.040 0.125 0.082 0.028 0.007 0.000"}
