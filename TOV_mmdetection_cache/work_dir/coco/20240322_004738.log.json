{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPNPADNN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=4,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=4,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_test2017_coarse.json',\n        img_prefix='data/coco/images/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.04, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00396, "memory": 9533, "data_time": 0.07413, "stage0_loss_instance_mil": 0.69908, "stage0_bag_acc": 14.24629, "stage0_mean_ious": 0.35654, "stage0_s": 0.0, "stage0_m": 0.00933, "stage0_l": 0.14488, "stage0_h": 0.36776, "stage1_loss_instance_mil": 0.16571, "stage1_bag_acc": 16.35824, "stage1_neg_loss": 0.0013, "stage1_mean_ious": 0.32702, "stage1_s": 0.0, "stage1_m": 0.00878, "stage1_l": 0.13239, "stage1_h": 0.33825, "loss": 0.86609, "grad_norm": 2.04995, "time": 1.71443}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00795, "memory": 9533, "data_time": 0.0264, "stage0_loss_instance_mil": 0.55675, "stage0_bag_acc": 48.0549, "stage0_mean_ious": 0.41868, "stage0_s": 0.0, "stage0_m": 0.01161, "stage0_l": 0.19911, "stage0_h": 0.43057, "stage1_loss_instance_mil": 0.20577, "stage1_bag_acc": 36.7085, "stage1_neg_loss": 0.03582, "stage1_mean_ious": 0.38964, "stage1_s": 0.0, "stage1_m": 0.01112, "stage1_l": 0.19252, "stage1_h": 0.39809, "loss": 0.79834, "grad_norm": 3.59509, "time": 1.64251}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01195, "memory": 9538, "data_time": 0.02579, "stage0_loss_instance_mil": 0.50731, "stage0_bag_acc": 50.8872, "stage0_mean_ious": 0.29971, "stage0_s": 0.0, "stage0_m": 0.03005, "stage0_l": 0.17284, "stage0_h": 0.30336, "stage1_loss_instance_mil": 0.33116, "stage1_bag_acc": 34.07737, "stage1_neg_loss": 0.02973, "stage1_mean_ious": 0.29643, "stage1_s": 0.0, "stage1_m": 0.0328, "stage1_l": 0.18052, "stage1_h": 0.29741, "loss": 0.8682, "grad_norm": 4.15364, "time": 1.59084}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01594, "memory": 9538, "data_time": 0.0264, "stage0_loss_instance_mil": 0.62591, "stage0_bag_acc": 32.98641, "stage0_mean_ious": 0.16037, "stage0_s": 0.0, "stage0_m": 0.01498, "stage0_l": 0.13403, "stage0_h": 0.15293, "stage1_loss_instance_mil": 0.21849, "stage1_bag_acc": 24.64177, "stage1_neg_loss": 0.00559, "stage1_mean_ious": 0.15964, "stage1_s": 0.0, "stage1_m": 0.0169, "stage1_l": 0.13723, "stage1_h": 0.15214, "loss": 0.84999, "grad_norm": 1.43579, "time": 1.5792}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.01994, "memory": 9540, "data_time": 0.02679, "stage0_loss_instance_mil": 0.55252, "stage0_bag_acc": 46.60756, "stage0_mean_ious": 0.27148, "stage0_s": 0.0, "stage0_m": 0.01557, "stage0_l": 0.14709, "stage0_h": 0.27874, "stage1_loss_instance_mil": 0.194, "stage1_bag_acc": 45.86838, "stage1_neg_loss": 0.0239, "stage1_mean_ious": 0.2534, "stage1_s": 0.0, "stage1_m": 0.01302, "stage1_l": 0.1339, "stage1_h": 0.25907, "loss": 0.77042, "grad_norm": 1.96475, "time": 1.67897}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.02394, "memory": 9540, "data_time": 0.02477, "stage0_loss_instance_mil": 0.51774, "stage0_bag_acc": 51.75099, "stage0_mean_ious": 0.31027, "stage0_s": 0.0, "stage0_m": 0.03093, "stage0_l": 0.11062, "stage0_h": 0.32007, "stage1_loss_instance_mil": 0.21919, "stage1_bag_acc": 51.54189, "stage1_neg_loss": 0.03224, "stage1_mean_ious": 0.28964, "stage1_s": 0.0, "stage1_m": 0.02618, "stage1_l": 0.10044, "stage1_h": 0.30081, "loss": 0.76917, "grad_norm": 2.05464, "time": 1.55976}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.02793, "memory": 9540, "data_time": 0.02489, "stage0_loss_instance_mil": 0.55928, "stage0_bag_acc": 41.61297, "stage0_mean_ious": 0.2562, "stage0_s": 0.00148, "stage0_m": 0.01714, "stage0_l": 0.12297, "stage0_h": 0.26373, "stage1_loss_instance_mil": 0.22292, "stage1_bag_acc": 51.15774, "stage1_neg_loss": 0.03716, "stage1_mean_ious": 0.24222, "stage1_s": 0.00156, "stage1_m": 0.01413, "stage1_l": 0.12587, "stage1_h": 0.24765, "loss": 0.81936, "grad_norm": 2.11895, "time": 1.5831}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.02873, "eval_iter_num": 360, "bbox_mAP": 0.112, "bbox_mAP_50": 0.364, "bbox_mAP_75": 0.201, "bbox_mAP_s": 0.085, "bbox_mAP_m": 0.037, "bbox_mAP_l": 0.013, "bbox_mAP_copypaste": "0.112 0.364 0.201 0.085 0.037 0.013"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.03273, "memory": 9540, "data_time": 0.07816, "stage0_loss_instance_mil": 0.65975, "stage0_bag_acc": 25.53964, "stage0_mean_ious": 0.36417, "stage0_s": 0.00041, "stage0_m": 0.01413, "stage0_l": 0.11376, "stage0_h": 0.38679, "stage1_loss_instance_mil": 0.13335, "stage1_bag_acc": 37.64303, "stage1_neg_loss": 0.01624, "stage1_mean_ious": 0.34921, "stage1_s": 7e-05, "stage1_m": 0.01638, "stage1_l": 0.11399, "stage1_h": 0.36806, "loss": 0.80933, "grad_norm": 0.91462, "time": 1.72264}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.03672, "memory": 9540, "data_time": 0.02578, "stage0_loss_instance_mil": 0.62756, "stage0_bag_acc": 33.93182, "stage0_mean_ious": 0.32118, "stage0_s": 0.0, "stage0_m": 0.00805, "stage0_l": 0.10923, "stage0_h": 0.3324, "stage1_loss_instance_mil": 0.14469, "stage1_bag_acc": 39.78023, "stage1_neg_loss": 0.02162, "stage1_mean_ious": 0.30641, "stage1_s": 0.0, "stage1_m": 0.00774, "stage1_l": 0.10598, "stage1_h": 0.31553, "loss": 0.79388, "grad_norm": 1.12885, "time": 1.57791}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.04, "memory": 9540, "data_time": 0.02548, "stage0_loss_instance_mil": 0.57695, "stage0_bag_acc": 47.1977, "stage0_mean_ious": 0.31279, "stage0_s": 0.0, "stage0_m": 0.01275, "stage0_l": 0.12233, "stage0_h": 0.32533, "stage1_loss_instance_mil": 0.15879, "stage1_bag_acc": 51.79032, "stage1_neg_loss": 0.02727, "stage1_mean_ious": 0.28737, "stage1_s": 0.0, "stage1_m": 0.01578, "stage1_l": 0.12559, "stage1_h": 0.29583, "loss": 0.76301, "grad_norm": 1.469, "time": 1.59028}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.04, "memory": 9540, "data_time": 0.0254, "stage0_loss_instance_mil": 0.70742, "stage0_bag_acc": 22.81361, "stage0_mean_ious": 0.23669, "stage0_s": 0.0, "stage0_m": 0.02135, "stage0_l": 0.11047, "stage0_h": 0.23744, "stage1_loss_instance_mil": 0.14622, "stage1_bag_acc": 30.32344, "stage1_neg_loss": 0.00599, "stage1_mean_ious": 0.22614, "stage1_s": 0.0, "stage1_m": 0.02119, "stage1_l": 0.11846, "stage1_h": 0.22402, "loss": 0.85962, "grad_norm": 1.0012, "time": 1.58751}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.04, "memory": 9540, "data_time": 0.02522, "stage0_loss_instance_mil": 0.63753, "stage0_bag_acc": 32.93054, "stage0_mean_ious": 0.25058, "stage0_s": 0.0, "stage0_m": 0.02764, "stage0_l": 0.13338, "stage0_h": 0.25852, "stage1_loss_instance_mil": 0.13377, "stage1_bag_acc": 47.09595, "stage1_neg_loss": 0.01959, "stage1_mean_ious": 0.23108, "stage1_s": 0.0, "stage1_m": 0.02329, "stage1_l": 0.12456, "stage1_h": 0.24071, "loss": 0.79088, "grad_norm": 0.91721, "time": 1.59766}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.04, "memory": 9540, "data_time": 0.02649, "stage0_loss_instance_mil": 0.67918, "stage0_bag_acc": 22.59473, "stage0_mean_ious": 0.20927, "stage0_s": 0.0, "stage0_m": 0.01174, "stage0_l": 0.14037, "stage0_h": 0.20958, "stage1_loss_instance_mil": 0.12239, "stage1_bag_acc": 47.5665, "stage1_neg_loss": 0.00904, "stage1_mean_ious": 0.20778, "stage1_s": 0.0, "stage1_m": 0.01161, "stage1_l": 0.1259, "stage1_h": 0.21124, "loss": 0.8106, "grad_norm": 0.51916, "time": 1.61351}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.04, "memory": 9540, "data_time": 0.02588, "stage0_loss_instance_mil": 0.66225, "stage0_bag_acc": 23.55646, "stage0_mean_ious": 0.20847, "stage0_s": 0.0, "stage0_m": 0.0043, "stage0_l": 0.09885, "stage0_h": 0.21525, "stage1_loss_instance_mil": 0.11386, "stage1_bag_acc": 40.26078, "stage1_neg_loss": 0.01803, "stage1_mean_ious": 0.21354, "stage1_s": 0.0, "stage1_m": 0.00324, "stage1_l": 0.09421, "stage1_h": 0.2227, "loss": 0.79415, "grad_norm": 0.63095, "time": 1.60653}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.04, "eval_iter_num": 360, "bbox_mAP": 0.017, "bbox_mAP_50": 0.064, "bbox_mAP_75": 0.031, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.017 0.064 0.031 0.009 0.004 0.002"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.04, "memory": 9540, "data_time": 0.07659, "stage0_loss_instance_mil": 0.59751, "stage0_bag_acc": 38.65938, "stage0_mean_ious": 0.18637, "stage0_s": 0.0, "stage0_m": 0.00264, "stage0_l": 0.16006, "stage0_h": 0.17786, "stage1_loss_instance_mil": 0.13559, "stage1_bag_acc": 63.19174, "stage1_neg_loss": 0.02629, "stage1_mean_ious": 0.17841, "stage1_s": 0.0, "stage1_m": 0.00248, "stage1_l": 0.14574, "stage1_h": 0.17087, "loss": 0.75939, "grad_norm": 1.04495, "time": 1.66079}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.04, "memory": 9540, "data_time": 0.02504, "stage0_loss_instance_mil": 0.65889, "stage0_bag_acc": 27.68955, "stage0_mean_ious": 0.22543, "stage0_s": 0.0, "stage0_m": 0.01806, "stage0_l": 0.13571, "stage0_h": 0.23203, "stage1_loss_instance_mil": 0.1623, "stage1_bag_acc": 28.11954, "stage1_neg_loss": 0.02246, "stage1_mean_ious": 0.22443, "stage1_s": 0.0, "stage1_m": 0.02236, "stage1_l": 0.13822, "stage1_h": 0.22982, "loss": 0.84365, "grad_norm": 1.10497, "time": 1.59366}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.04, "memory": 9540, "data_time": 0.02617, "stage0_loss_instance_mil": 0.69183, "stage0_bag_acc": 15.94115, "stage0_mean_ious": 0.25332, "stage0_s": 0.00116, "stage0_m": 0.00578, "stage0_l": 0.09778, "stage0_h": 0.26056, "stage1_loss_instance_mil": 0.13331, "stage1_bag_acc": 13.24456, "stage1_neg_loss": 0.00721, "stage1_mean_ious": 0.26527, "stage1_s": 0.00114, "stage1_m": 0.00553, "stage1_l": 0.09909, "stage1_h": 0.27399, "loss": 0.83235, "grad_norm": 0.36316, "time": 1.62365}
