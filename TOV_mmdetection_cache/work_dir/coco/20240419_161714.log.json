{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09597, "stage0_loss_instance_mil": 0.71668, "stage0_bag_acc": 15.11042, "stage0_mean_ious": 0.31392, "stage0_s": 0.0, "stage0_m": 0.02298, "stage0_l": 0.25386, "stage0_h": 0.31364, "stage1_loss_instance_mil": 0.16706, "stage1_bag_acc": 19.33142, "stage1_neg_loss": 0.00234, "stage1_mean_ious": 0.30915, "stage1_s": 0.0, "stage1_m": 0.02198, "stage1_l": 0.25834, "stage1_h": 0.30832, "loss": 0.88608, "grad_norm": 3.21104, "time": 1.75374}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04419, "stage0_loss_instance_mil": 0.57437, "stage0_bag_acc": 57.89569, "stage0_mean_ious": 0.33185, "stage0_s": 0.0, "stage0_m": 0.03819, "stage0_l": 0.20997, "stage0_h": 0.34283, "stage1_loss_instance_mil": 0.23672, "stage1_bag_acc": 28.46279, "stage1_neg_loss": 0.00714, "stage1_mean_ious": 0.32925, "stage1_s": 0.0, "stage1_m": 0.04486, "stage1_l": 0.21502, "stage1_h": 0.33828, "loss": 0.81823, "grad_norm": 3.97039, "time": 1.69498}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04405, "stage0_loss_instance_mil": 0.25125, "stage0_bag_acc": 87.46094, "stage0_mean_ious": 0.27614, "stage0_s": 0.0, "stage0_m": 0.04683, "stage0_l": 0.16453, "stage0_h": 0.28734, "stage1_loss_instance_mil": 0.34654, "stage1_bag_acc": 77.01884, "stage1_neg_loss": 0.06682, "stage1_mean_ious": 0.26993, "stage1_s": 0.0, "stage1_m": 0.04816, "stage1_l": 0.16375, "stage1_h": 0.28024, "loss": 0.66462, "grad_norm": 11.01961, "time": 1.68621}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09528, "stage0_loss_instance_mil": 0.07094, "stage0_bag_acc": 96.4611, "stage0_mean_ious": 0.27996, "stage0_s": 0.0, "stage0_m": 0.02369, "stage0_l": 0.14272, "stage0_h": 0.29731, "stage1_loss_instance_mil": 0.36712, "stage1_bag_acc": 97.27356, "stage1_neg_loss": 0.09054, "stage1_mean_ious": 0.25303, "stage1_s": 0.0, "stage1_m": 0.02128, "stage1_l": 0.13835, "stage1_h": 0.2671, "loss": 0.5286, "grad_norm": 11.4636, "time": 1.73236}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04346, "stage0_loss_instance_mil": 0.06107, "stage0_bag_acc": 96.984, "stage0_mean_ious": 0.29455, "stage0_s": 0.0, "stage0_m": 0.03551, "stage0_l": 0.11912, "stage0_h": 0.31557, "stage1_loss_instance_mil": 0.33462, "stage1_bag_acc": 97.20212, "stage1_neg_loss": 0.10517, "stage1_mean_ious": 0.25833, "stage1_s": 0.0, "stage1_m": 0.03068, "stage1_l": 0.09973, "stage1_h": 0.2776, "loss": 0.50086, "grad_norm": 16.00153, "time": 1.66864}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04335, "stage0_loss_instance_mil": 0.06249, "stage0_bag_acc": 95.68394, "stage0_mean_ious": 0.31928, "stage0_s": 0.0, "stage0_m": 0.03811, "stage0_l": 0.13531, "stage0_h": 0.34446, "stage1_loss_instance_mil": 0.30275, "stage1_bag_acc": 96.73159, "stage1_neg_loss": 0.08358, "stage1_mean_ious": 0.27849, "stage1_s": 0.0, "stage1_m": 0.03037, "stage1_l": 0.11121, "stage1_h": 0.3019, "loss": 0.44883, "grad_norm": 12.70711, "time": 1.65848}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09473, "stage0_loss_instance_mil": 0.04214, "stage0_bag_acc": 97.54335, "stage0_mean_ious": 0.31573, "stage0_s": 0.0, "stage0_m": 0.03175, "stage0_l": 0.12443, "stage0_h": 0.33999, "stage1_loss_instance_mil": 0.29963, "stage1_bag_acc": 98.2974, "stage1_neg_loss": 0.08707, "stage1_mean_ious": 0.2731, "stage1_s": 0.0, "stage1_m": 0.02252, "stage1_l": 0.10045, "stage1_h": 0.29555, "loss": 0.42885, "grad_norm": 13.53355, "time": 1.73999}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04427, "stage0_loss_instance_mil": 0.02305, "stage0_bag_acc": 98.79276, "stage0_mean_ious": 0.30303, "stage0_s": 0.0, "stage0_m": 0.02812, "stage0_l": 0.09189, "stage0_h": 0.32577, "stage1_loss_instance_mil": 0.25805, "stage1_bag_acc": 99.32428, "stage1_neg_loss": 0.08983, "stage1_mean_ious": 0.25927, "stage1_s": 0.0, "stage1_m": 0.01942, "stage1_l": 0.06904, "stage1_h": 0.28073, "loss": 0.37093, "grad_norm": 14.60466, "time": 1.67396}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04318, "stage0_loss_instance_mil": 0.04451, "stage0_bag_acc": 96.99398, "stage0_mean_ious": 0.27834, "stage0_s": 0.0, "stage0_m": 0.03673, "stage0_l": 0.10632, "stage0_h": 0.29912, "stage1_loss_instance_mil": 0.26404, "stage1_bag_acc": 97.93133, "stage1_neg_loss": 0.0861, "stage1_mean_ious": 0.23902, "stage1_s": 0.0, "stage1_m": 0.03275, "stage1_l": 0.08696, "stage1_h": 0.25794, "loss": 0.39465, "grad_norm": 13.55498, "time": 1.70026}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09502, "stage0_loss_instance_mil": 0.01982, "stage0_bag_acc": 98.74962, "stage0_mean_ious": 0.21737, "stage0_s": 0.0, "stage0_m": 0.04054, "stage0_l": 0.08666, "stage0_h": 0.23139, "stage1_loss_instance_mil": 0.25986, "stage1_bag_acc": 99.27446, "stage1_neg_loss": 0.08057, "stage1_mean_ious": 0.18213, "stage1_s": 0.0, "stage1_m": 0.02476, "stage1_l": 0.07148, "stage1_h": 0.19485, "loss": 0.36024, "grad_norm": 13.03682, "time": 1.76103}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0419, "stage0_loss_instance_mil": 0.03045, "stage0_bag_acc": 98.1887, "stage0_mean_ious": 0.21593, "stage0_s": 0.0, "stage0_m": 0.02024, "stage0_l": 0.10524, "stage0_h": 0.23034, "stage1_loss_instance_mil": 0.22766, "stage1_bag_acc": 98.67834, "stage1_neg_loss": 0.07337, "stage1_mean_ious": 0.18597, "stage1_s": 0.0, "stage1_m": 0.01412, "stage1_l": 0.08908, "stage1_h": 0.1991, "loss": 0.33148, "grad_norm": 10.16736, "time": 1.67605}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04099, "stage0_loss_instance_mil": 0.03468, "stage0_bag_acc": 97.63408, "stage0_mean_ious": 0.21534, "stage0_s": 0.0, "stage0_m": 0.03589, "stage0_l": 0.0908, "stage0_h": 0.22949, "stage1_loss_instance_mil": 0.21911, "stage1_bag_acc": 98.23934, "stage1_neg_loss": 0.07317, "stage1_mean_ious": 0.18188, "stage1_s": 0.0, "stage1_m": 0.02422, "stage1_l": 0.06917, "stage1_h": 0.19599, "loss": 0.32696, "grad_norm": 11.60121, "time": 1.65282}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09315, "stage0_loss_instance_mil": 0.02267, "stage0_bag_acc": 98.9262, "stage0_mean_ious": 0.19965, "stage0_s": 0.0, "stage0_m": 0.03147, "stage0_l": 0.07002, "stage0_h": 0.21084, "stage1_loss_instance_mil": 0.20948, "stage1_bag_acc": 98.82323, "stage1_neg_loss": 0.07249, "stage1_mean_ious": 0.17147, "stage1_s": 0.0, "stage1_m": 0.02351, "stage1_l": 0.05611, "stage1_h": 0.18185, "loss": 0.30465, "grad_norm": 11.01079, "time": 1.69517}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04095, "stage0_loss_instance_mil": 0.0139, "stage0_bag_acc": 99.30209, "stage0_mean_ious": 0.17133, "stage0_s": 0.0, "stage0_m": 0.02974, "stage0_l": 0.09961, "stage0_h": 0.17657, "stage1_loss_instance_mil": 0.2287, "stage1_bag_acc": 99.27806, "stage1_neg_loss": 0.07539, "stage1_mean_ious": 0.15196, "stage1_s": 0.0, "stage1_m": 0.01971, "stage1_l": 0.08021, "stage1_h": 0.15864, "loss": 0.31799, "grad_norm": 12.01158, "time": 1.65331}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04153, "stage0_loss_instance_mil": 0.01701, "stage0_bag_acc": 99.20337, "stage0_mean_ious": 0.1591, "stage0_s": 0.00125, "stage0_m": 0.04869, "stage0_l": 0.08807, "stage0_h": 0.1656, "stage1_loss_instance_mil": 0.20084, "stage1_bag_acc": 99.65614, "stage1_neg_loss": 0.0735, "stage1_mean_ious": 0.14163, "stage1_s": 0.00167, "stage1_m": 0.03109, "stage1_l": 0.0705, "stage1_h": 0.15006, "loss": 0.29135, "grad_norm": 12.11012, "time": 1.68068}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09407, "stage0_loss_instance_mil": 0.01917, "stage0_bag_acc": 99.01197, "stage0_mean_ious": 0.13315, "stage0_s": 0.00134, "stage0_m": 0.02814, "stage0_l": 0.08183, "stage0_h": 0.13719, "stage1_loss_instance_mil": 0.18966, "stage1_bag_acc": 99.53423, "stage1_neg_loss": 0.06912, "stage1_mean_ious": 0.11923, "stage1_s": 0.00145, "stage1_m": 0.01936, "stage1_l": 0.06646, "stage1_h": 0.12433, "loss": 0.27795, "grad_norm": 10.26462, "time": 1.72651}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04127, "stage0_loss_instance_mil": 0.02697, "stage0_bag_acc": 98.8388, "stage0_mean_ious": 0.11783, "stage0_s": 0.0, "stage0_m": 0.03152, "stage0_l": 0.08485, "stage0_h": 0.1199, "stage1_loss_instance_mil": 0.17728, "stage1_bag_acc": 98.70025, "stage1_neg_loss": 0.06631, "stage1_mean_ious": 0.10785, "stage1_s": 0.0, "stage1_m": 0.02138, "stage1_l": 0.06951, "stage1_h": 0.11196, "loss": 0.27056, "grad_norm": 8.92147, "time": 1.68693}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.03657, "stage0_loss_instance_mil": 0.01734, "stage0_bag_acc": 98.72315, "stage0_mean_ious": 0.1153, "stage0_s": 0.0, "stage0_m": 0.03835, "stage0_l": 0.10342, "stage0_h": 0.11455, "stage1_loss_instance_mil": 0.17602, "stage1_bag_acc": 99.01938, "stage1_neg_loss": 0.07042, "stage1_mean_ious": 0.10518, "stage1_s": 0.0, "stage1_m": 0.02637, "stage1_l": 0.08986, "stage1_h": 0.10603, "loss": 0.26378, "grad_norm": 9.66709, "time": 1.6624}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.001 0.003 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09146, "stage0_loss_instance_mil": 0.01184, "stage0_bag_acc": 99.14275, "stage0_mean_ious": 0.0989, "stage0_s": 0.0, "stage0_m": 0.03059, "stage0_l": 0.08502, "stage0_h": 0.09691, "stage1_loss_instance_mil": 0.15523, "stage1_bag_acc": 99.48915, "stage1_neg_loss": 0.0642, "stage1_mean_ious": 0.09107, "stage1_s": 0.0, "stage1_m": 0.01786, "stage1_l": 0.07034, "stage1_h": 0.09168, "loss": 0.23128, "grad_norm": 8.26041, "time": 1.68117}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04034, "stage0_loss_instance_mil": 0.0162, "stage0_bag_acc": 99.04905, "stage0_mean_ious": 0.11427, "stage0_s": 0.0, "stage0_m": 0.03004, "stage0_l": 0.10407, "stage0_h": 0.11121, "stage1_loss_instance_mil": 0.14029, "stage1_bag_acc": 99.2318, "stage1_neg_loss": 0.0616, "stage1_mean_ious": 0.10317, "stage1_s": 0.0, "stage1_m": 0.02368, "stage1_l": 0.08299, "stage1_h": 0.10304, "loss": 0.2181, "grad_norm": 8.13935, "time": 1.70018}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04179, "stage0_loss_instance_mil": 0.0118, "stage0_bag_acc": 99.28077, "stage0_mean_ious": 0.12567, "stage0_s": 0.0, "stage0_m": 0.03204, "stage0_l": 0.08922, "stage0_h": 0.1248, "stage1_loss_instance_mil": 0.14078, "stage1_bag_acc": 99.38156, "stage1_neg_loss": 0.05904, "stage1_mean_ious": 0.11376, "stage1_s": 0.0, "stage1_m": 0.02831, "stage1_l": 0.07344, "stage1_h": 0.11388, "loss": 0.21162, "grad_norm": 8.78701, "time": 1.71354}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0971, "stage0_loss_instance_mil": 0.01565, "stage0_bag_acc": 99.33977, "stage0_mean_ious": 0.11182, "stage0_s": 0.0, "stage0_m": 0.03974, "stage0_l": 0.10141, "stage0_h": 0.10829, "stage1_loss_instance_mil": 0.14183, "stage1_bag_acc": 99.32231, "stage1_neg_loss": 0.0571, "stage1_mean_ious": 0.10225, "stage1_s": 0.0, "stage1_m": 0.03025, "stage1_l": 0.08769, "stage1_h": 0.10015, "loss": 0.21457, "grad_norm": 7.39821, "time": 1.76872}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04141, "stage0_loss_instance_mil": 0.01158, "stage0_bag_acc": 99.39242, "stage0_mean_ious": 0.1053, "stage0_s": 0.0, "stage0_m": 0.03822, "stage0_l": 0.0836, "stage0_h": 0.105, "stage1_loss_instance_mil": 0.1279, "stage1_bag_acc": 99.52, "stage1_neg_loss": 0.06027, "stage1_mean_ious": 0.0998, "stage1_s": 0.0, "stage1_m": 0.03302, "stage1_l": 0.07413, "stage1_h": 0.10046, "loss": 0.19975, "grad_norm": 7.97603, "time": 1.68164}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04049, "stage0_loss_instance_mil": 0.01125, "stage0_bag_acc": 99.37946, "stage0_mean_ious": 0.09109, "stage0_s": 0.0, "stage0_m": 0.03917, "stage0_l": 0.09854, "stage0_h": 0.0851, "stage1_loss_instance_mil": 0.13222, "stage1_bag_acc": 99.61864, "stage1_neg_loss": 0.05986, "stage1_mean_ious": 0.08555, "stage1_s": 0.0, "stage1_m": 0.03137, "stage1_l": 0.08501, "stage1_h": 0.08197, "loss": 0.20334, "grad_norm": 7.95054, "time": 1.658}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.0924, "stage0_loss_instance_mil": 0.00673, "stage0_bag_acc": 99.47785, "stage0_mean_ious": 0.11533, "stage0_s": 0.0, "stage0_m": 0.03652, "stage0_l": 0.10204, "stage0_h": 0.11431, "stage1_loss_instance_mil": 0.11964, "stage1_bag_acc": 99.7388, "stage1_neg_loss": 0.05195, "stage1_mean_ious": 0.10631, "stage1_s": 0.0, "stage1_m": 0.03217, "stage1_l": 0.09722, "stage1_h": 0.10535, "loss": 0.17831, "grad_norm": 5.8105, "time": 1.69999}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04371, "stage0_loss_instance_mil": 0.00821, "stage0_bag_acc": 99.56573, "stage0_mean_ious": 0.10988, "stage0_s": 0.0, "stage0_m": 0.04742, "stage0_l": 0.08506, "stage0_h": 0.10842, "stage1_loss_instance_mil": 0.10236, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.05404, "stage1_mean_ious": 0.10318, "stage1_s": 0.0, "stage1_m": 0.04162, "stage1_l": 0.08492, "stage1_h": 0.10086, "loss": 0.16462, "grad_norm": 5.53888, "time": 1.67828}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04202, "stage0_loss_instance_mil": 0.00483, "stage0_bag_acc": 99.65908, "stage0_mean_ious": 0.10939, "stage0_s": 0.0, "stage0_m": 0.02958, "stage0_l": 0.09135, "stage0_h": 0.1082, "stage1_loss_instance_mil": 0.09814, "stage1_bag_acc": 99.90909, "stage1_neg_loss": 0.05063, "stage1_mean_ious": 0.09964, "stage1_s": 0.0, "stage1_m": 0.02567, "stage1_l": 0.07652, "stage1_h": 0.09985, "loss": 0.1536, "grad_norm": 5.09315, "time": 1.67549}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09361, "stage0_loss_instance_mil": 0.00447, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.1183, "stage0_s": 0.0, "stage0_m": 0.02887, "stage0_l": 0.08929, "stage0_h": 0.11863, "stage1_loss_instance_mil": 0.10329, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.05366, "stage1_mean_ious": 0.1093, "stage1_s": 0.0, "stage1_m": 0.02587, "stage1_l": 0.07882, "stage1_h": 0.1109, "loss": 0.16143, "grad_norm": 5.01976, "time": 1.72624}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.03956, "stage0_loss_instance_mil": 0.00752, "stage0_bag_acc": 99.70556, "stage0_mean_ious": 0.11056, "stage0_s": 0.0, "stage0_m": 0.03077, "stage0_l": 0.09443, "stage0_h": 0.1076, "stage1_loss_instance_mil": 0.1107, "stage1_bag_acc": 99.81667, "stage1_neg_loss": 0.05074, "stage1_mean_ious": 0.10151, "stage1_s": 0.0, "stage1_m": 0.02646, "stage1_l": 0.08566, "stage1_h": 0.09864, "loss": 0.16895, "grad_norm": 4.96762, "time": 1.64782}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04179, "stage0_loss_instance_mil": 0.00573, "stage0_bag_acc": 99.6819, "stage0_mean_ious": 0.11543, "stage0_s": 0.0, "stage0_m": 0.0216, "stage0_l": 0.09318, "stage0_h": 0.11594, "stage1_loss_instance_mil": 0.10973, "stage1_bag_acc": 99.69709, "stage1_neg_loss": 0.05223, "stage1_mean_ious": 0.10654, "stage1_s": 0.0, "stage1_m": 0.01735, "stage1_l": 0.0876, "stage1_h": 0.10673, "loss": 0.1677, "grad_norm": 5.72898, "time": 1.67572}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09483, "stage0_loss_instance_mil": 0.00562, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.11349, "stage0_s": 0.0, "stage0_m": 0.03809, "stage0_l": 0.09768, "stage0_h": 0.11191, "stage1_loss_instance_mil": 0.10471, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.05031, "stage1_mean_ious": 0.10372, "stage1_s": 0.0, "stage1_m": 0.03191, "stage1_l": 0.09953, "stage1_h": 0.10101, "loss": 0.16064, "grad_norm": 5.02839, "time": 1.72271}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04067, "stage0_loss_instance_mil": 0.00461, "stage0_bag_acc": 99.82609, "stage0_mean_ious": 0.10756, "stage0_s": 0.0, "stage0_m": 0.03322, "stage0_l": 0.09885, "stage0_h": 0.10444, "stage1_loss_instance_mil": 0.0983, "stage1_bag_acc": 99.7592, "stage1_neg_loss": 0.04829, "stage1_mean_ious": 0.09993, "stage1_s": 0.0, "stage1_m": 0.03042, "stage1_l": 0.08823, "stage1_h": 0.09794, "loss": 0.15119, "grad_norm": 4.78176, "time": 1.64677}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04214, "stage0_loss_instance_mil": 0.00529, "stage0_bag_acc": 99.70433, "stage0_mean_ious": 0.10113, "stage0_s": 0.0, "stage0_m": 0.02114, "stage0_l": 0.08932, "stage0_h": 0.09943, "stage1_loss_instance_mil": 0.09615, "stage1_bag_acc": 99.77576, "stage1_neg_loss": 0.04842, "stage1_mean_ious": 0.09188, "stage1_s": 0.0, "stage1_m": 0.01733, "stage1_l": 0.07771, "stage1_h": 0.09062, "loss": 0.14986, "grad_norm": 4.96719, "time": 1.66407}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09368, "stage0_loss_instance_mil": 0.00594, "stage0_bag_acc": 99.5817, "stage0_mean_ious": 0.10928, "stage0_s": 0.0, "stage0_m": 0.04217, "stage0_l": 0.1046, "stage0_h": 0.10812, "stage1_loss_instance_mil": 0.0923, "stage1_bag_acc": 99.92308, "stage1_neg_loss": 0.04571, "stage1_mean_ious": 0.09878, "stage1_s": 0.0, "stage1_m": 0.03502, "stage1_l": 0.101, "stage1_h": 0.09703, "loss": 0.14395, "grad_norm": 4.9451, "time": 1.68913}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04116, "stage0_loss_instance_mil": 0.00508, "stage0_bag_acc": 99.83612, "stage0_mean_ious": 0.10701, "stage0_s": 0.0, "stage0_m": 0.02213, "stage0_l": 0.08338, "stage0_h": 0.10649, "stage1_loss_instance_mil": 0.09707, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.04975, "stage1_mean_ious": 0.09922, "stage1_s": 0.0, "stage1_m": 0.01872, "stage1_l": 0.07702, "stage1_h": 0.09929, "loss": 0.15189, "grad_norm": 5.11442, "time": 1.657}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04152, "stage0_loss_instance_mil": 0.00223, "stage0_bag_acc": 99.92593, "stage0_mean_ious": 0.11098, "stage0_s": 0.0, "stage0_m": 0.02757, "stage0_l": 0.08528, "stage0_h": 0.11039, "stage1_loss_instance_mil": 0.09986, "stage1_bag_acc": 99.92593, "stage1_neg_loss": 0.04776, "stage1_mean_ious": 0.10116, "stage1_s": 0.0, "stage1_m": 0.02111, "stage1_l": 0.08066, "stage1_h": 0.10068, "loss": 0.14985, "grad_norm": 4.82791, "time": 1.70793}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.0, "bbox_mAP_50": 0.002, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.002 0.001 0.000 0.000 0.000"}
