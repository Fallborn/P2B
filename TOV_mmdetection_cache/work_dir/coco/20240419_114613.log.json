{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.0934, "stage0_loss_instance_mil": 0.73962, "stage0_bag_acc": 3.99946, "stage0_mean_ious": 0.38116, "stage0_s": 0.0, "stage0_m": 0.06994, "stage0_l": 0.18405, "stage0_h": 0.40719, "stage1_loss_instance_mil": 0.15366, "stage1_bag_acc": 22.13866, "stage1_neg_loss": 0.00107, "stage1_mean_ious": 0.38735, "stage1_s": 0.0, "stage1_m": 0.06646, "stage1_l": 0.20145, "stage1_h": 0.41097, "loss": 0.89435, "grad_norm": 3.26733, "time": 1.70749}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0448, "stage0_loss_instance_mil": 0.60142, "stage0_bag_acc": 60.1477, "stage0_mean_ious": 0.42606, "stage0_s": 0.0, "stage0_m": 0.04248, "stage0_l": 0.26227, "stage0_h": 0.43626, "stage1_loss_instance_mil": 0.23146, "stage1_bag_acc": 34.76798, "stage1_neg_loss": 0.00313, "stage1_mean_ious": 0.44467, "stage1_s": 0.0, "stage1_m": 0.04331, "stage1_l": 0.27114, "stage1_h": 0.45678, "loss": 0.83601, "grad_norm": 3.30628, "time": 1.71792}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04437, "stage0_loss_instance_mil": 0.27207, "stage0_bag_acc": 90.96155, "stage0_mean_ious": 0.42535, "stage0_s": 0.0, "stage0_m": 0.05814, "stage0_l": 0.27435, "stage0_h": 0.44482, "stage1_loss_instance_mil": 0.30956, "stage1_bag_acc": 83.1609, "stage1_neg_loss": 0.06469, "stage1_mean_ious": 0.4333, "stage1_s": 0.0, "stage1_m": 0.05901, "stage1_l": 0.31279, "stage1_h": 0.4498, "loss": 0.64632, "grad_norm": 9.07789, "time": 1.67225}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09785, "stage0_loss_instance_mil": 0.06926, "stage0_bag_acc": 96.84236, "stage0_mean_ious": 0.3965, "stage0_s": 0.0, "stage0_m": 0.06035, "stage0_l": 0.17087, "stage0_h": 0.42138, "stage1_loss_instance_mil": 0.34366, "stage1_bag_acc": 97.83394, "stage1_neg_loss": 0.08789, "stage1_mean_ious": 0.3784, "stage1_s": 0.0, "stage1_m": 0.06113, "stage1_l": 0.16574, "stage1_h": 0.40199, "loss": 0.50081, "grad_norm": 11.63916, "time": 1.73757}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04457, "stage0_loss_instance_mil": 0.06456, "stage0_bag_acc": 96.52943, "stage0_mean_ious": 0.3181, "stage0_s": 0.0, "stage0_m": 0.05239, "stage0_l": 0.15772, "stage0_h": 0.33922, "stage1_loss_instance_mil": 0.33846, "stage1_bag_acc": 97.89717, "stage1_neg_loss": 0.10251, "stage1_mean_ious": 0.30533, "stage1_s": 0.0, "stage1_m": 0.0482, "stage1_l": 0.14408, "stage1_h": 0.32657, "loss": 0.50552, "grad_norm": 16.07419, "time": 1.67426}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04503, "stage0_loss_instance_mil": 0.05443, "stage0_bag_acc": 96.59801, "stage0_mean_ious": 0.25101, "stage0_s": 0.0, "stage0_m": 0.05291, "stage0_l": 0.15092, "stage0_h": 0.26614, "stage1_loss_instance_mil": 0.31679, "stage1_bag_acc": 97.48973, "stage1_neg_loss": 0.08707, "stage1_mean_ious": 0.23253, "stage1_s": 0.0, "stage1_m": 0.04684, "stage1_l": 0.14878, "stage1_h": 0.24512, "loss": 0.45829, "grad_norm": 9.42028, "time": 1.71187}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09404, "stage0_loss_instance_mil": 0.03458, "stage0_bag_acc": 97.78952, "stage0_mean_ious": 0.28053, "stage0_s": 0.0, "stage0_m": 0.0292, "stage0_l": 0.11616, "stage0_h": 0.2958, "stage1_loss_instance_mil": 0.26727, "stage1_bag_acc": 98.7625, "stage1_neg_loss": 0.08014, "stage1_mean_ious": 0.24776, "stage1_s": 0.0, "stage1_m": 0.02833, "stage1_l": 0.10565, "stage1_h": 0.26083, "loss": 0.38199, "grad_norm": 9.26423, "time": 1.72132}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0419, "stage0_loss_instance_mil": 0.04225, "stage0_bag_acc": 97.21598, "stage0_mean_ious": 0.30741, "stage0_s": 0.0, "stage0_m": 0.0485, "stage0_l": 0.11376, "stage0_h": 0.32952, "stage1_loss_instance_mil": 0.30316, "stage1_bag_acc": 98.84939, "stage1_neg_loss": 0.08315, "stage1_mean_ious": 0.27603, "stage1_s": 0.0, "stage1_m": 0.04951, "stage1_l": 0.10734, "stage1_h": 0.29476, "loss": 0.42855, "grad_norm": 14.11283, "time": 1.62789}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04371, "stage0_loss_instance_mil": 0.03822, "stage0_bag_acc": 97.74492, "stage0_mean_ious": 0.29964, "stage0_s": 0.0, "stage0_m": 0.05801, "stage0_l": 0.14617, "stage0_h": 0.32243, "stage1_loss_instance_mil": 0.26884, "stage1_bag_acc": 98.45928, "stage1_neg_loss": 0.0825, "stage1_mean_ious": 0.26658, "stage1_s": 0.0, "stage1_m": 0.05782, "stage1_l": 0.13624, "stage1_h": 0.28522, "loss": 0.38956, "grad_norm": 12.07682, "time": 1.66832}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09393, "stage0_loss_instance_mil": 0.04188, "stage0_bag_acc": 97.82742, "stage0_mean_ious": 0.29864, "stage0_s": 0.0, "stage0_m": 0.03067, "stage0_l": 0.12977, "stage0_h": 0.31767, "stage1_loss_instance_mil": 0.22347, "stage1_bag_acc": 97.59992, "stage1_neg_loss": 0.06726, "stage1_mean_ious": 0.26502, "stage1_s": 0.0, "stage1_m": 0.02953, "stage1_l": 0.12671, "stage1_h": 0.27986, "loss": 0.33261, "grad_norm": 10.21817, "time": 1.69689}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0427, "stage0_loss_instance_mil": 0.05651, "stage0_bag_acc": 96.15854, "stage0_mean_ious": 0.29186, "stage0_s": 0.0, "stage0_m": 0.03066, "stage0_l": 0.13603, "stage0_h": 0.30923, "stage1_loss_instance_mil": 0.21884, "stage1_bag_acc": 96.6344, "stage1_neg_loss": 0.08456, "stage1_mean_ious": 0.26515, "stage1_s": 0.0, "stage1_m": 0.03106, "stage1_l": 0.13671, "stage1_h": 0.27877, "loss": 0.3599, "grad_norm": 12.61438, "time": 1.67553}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04156, "stage0_loss_instance_mil": 0.02405, "stage0_bag_acc": 98.9904, "stage0_mean_ious": 0.33331, "stage0_s": 0.0, "stage0_m": 0.05424, "stage0_l": 0.13615, "stage0_h": 0.36328, "stage1_loss_instance_mil": 0.17209, "stage1_bag_acc": 98.65585, "stage1_neg_loss": 0.06522, "stage1_mean_ious": 0.299, "stage1_s": 0.0, "stage1_m": 0.05687, "stage1_l": 0.13814, "stage1_h": 0.32155, "loss": 0.26136, "grad_norm": 7.9961, "time": 1.62543}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09844, "stage0_loss_instance_mil": 0.01832, "stage0_bag_acc": 99.06874, "stage0_mean_ious": 0.3081, "stage0_s": 0.00178, "stage0_m": 0.0445, "stage0_l": 0.15365, "stage0_h": 0.32853, "stage1_loss_instance_mil": 0.18619, "stage1_bag_acc": 99.23822, "stage1_neg_loss": 0.06708, "stage1_mean_ious": 0.2727, "stage1_s": 0.00195, "stage1_m": 0.04774, "stage1_l": 0.1519, "stage1_h": 0.28744, "loss": 0.27158, "grad_norm": 9.31691, "time": 1.69737}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04277, "stage0_loss_instance_mil": 0.01814, "stage0_bag_acc": 98.96335, "stage0_mean_ious": 0.33254, "stage0_s": 0.0, "stage0_m": 0.05989, "stage0_l": 0.15965, "stage0_h": 0.35236, "stage1_loss_instance_mil": 0.17048, "stage1_bag_acc": 98.83348, "stage1_neg_loss": 0.06955, "stage1_mean_ious": 0.2994, "stage1_s": 0.0, "stage1_m": 0.05709, "stage1_l": 0.16185, "stage1_h": 0.31443, "loss": 0.25817, "grad_norm": 10.07151, "time": 1.66064}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04571, "stage0_loss_instance_mil": 0.01358, "stage0_bag_acc": 99.14599, "stage0_mean_ious": 0.36844, "stage0_s": 0.0, "stage0_m": 0.02715, "stage0_l": 0.14034, "stage0_h": 0.40109, "stage1_loss_instance_mil": 0.14248, "stage1_bag_acc": 99.31881, "stage1_neg_loss": 0.05819, "stage1_mean_ious": 0.32991, "stage1_s": 0.0, "stage1_m": 0.02723, "stage1_l": 0.13436, "stage1_h": 0.35692, "loss": 0.21425, "grad_norm": 6.77965, "time": 1.7029}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09827, "stage0_loss_instance_mil": 0.00613, "stage0_bag_acc": 99.74615, "stage0_mean_ious": 0.41712, "stage0_s": 0.0, "stage0_m": 0.03807, "stage0_l": 0.15905, "stage0_h": 0.44812, "stage1_loss_instance_mil": 0.11711, "stage1_bag_acc": 99.54794, "stage1_neg_loss": 0.05, "stage1_mean_ious": 0.39068, "stage1_s": 0.0, "stage1_m": 0.03967, "stage1_l": 0.16777, "stage1_h": 0.4173, "loss": 0.17324, "grad_norm": 6.05218, "time": 1.74865}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04263, "stage0_loss_instance_mil": 0.01856, "stage0_bag_acc": 99.0017, "stage0_mean_ious": 0.42716, "stage0_s": 0.0, "stage0_m": 0.06441, "stage0_l": 0.16617, "stage0_h": 0.4725, "stage1_loss_instance_mil": 0.13, "stage1_bag_acc": 99.19112, "stage1_neg_loss": 0.05698, "stage1_mean_ious": 0.40201, "stage1_s": 0.0, "stage1_m": 0.06847, "stage1_l": 0.17042, "stage1_h": 0.44077, "loss": 0.20554, "grad_norm": 8.55714, "time": 1.64236}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04323, "stage0_loss_instance_mil": 0.03249, "stage0_bag_acc": 98.13491, "stage0_mean_ious": 0.42631, "stage0_s": 0.0, "stage0_m": 0.04048, "stage0_l": 0.16642, "stage0_h": 0.45893, "stage1_loss_instance_mil": 0.12951, "stage1_bag_acc": 98.97688, "stage1_neg_loss": 0.05512, "stage1_mean_ious": 0.40248, "stage1_s": 0.0, "stage1_m": 0.03655, "stage1_l": 0.16422, "stage1_h": 0.43201, "loss": 0.21712, "grad_norm": 8.18686, "time": 1.68268}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.064, "bbox_mAP_50": 0.203, "bbox_mAP_75": 0.12, "bbox_mAP_s": 0.049, "bbox_mAP_m": 0.025, "bbox_mAP_l": 0.009, "bbox_mAP_copypaste": "0.064 0.203 0.120 0.049 0.025 0.009"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09854, "stage0_loss_instance_mil": 0.01423, "stage0_bag_acc": 99.49516, "stage0_mean_ious": 0.38007, "stage0_s": 0.00144, "stage0_m": 0.05964, "stage0_l": 0.1634, "stage0_h": 0.40421, "stage1_loss_instance_mil": 0.11553, "stage1_bag_acc": 99.17159, "stage1_neg_loss": 0.05811, "stage1_mean_ious": 0.35789, "stage1_s": 0.00103, "stage1_m": 0.0624, "stage1_l": 0.17835, "stage1_h": 0.37719, "loss": 0.18787, "grad_norm": 7.70583, "time": 1.74169}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0419, "stage0_loss_instance_mil": 0.00919, "stage0_bag_acc": 99.60667, "stage0_mean_ious": 0.3986, "stage0_s": 0.0, "stage0_m": 0.0466, "stage0_l": 0.16406, "stage0_h": 0.43272, "stage1_loss_instance_mil": 0.11514, "stage1_bag_acc": 99.25972, "stage1_neg_loss": 0.05171, "stage1_mean_ious": 0.36569, "stage1_s": 0.0, "stage1_m": 0.05287, "stage1_l": 0.16218, "stage1_h": 0.39439, "loss": 0.17604, "grad_norm": 6.6854, "time": 1.65519}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04248, "stage0_loss_instance_mil": 0.01645, "stage0_bag_acc": 98.82254, "stage0_mean_ious": 0.41247, "stage0_s": 0.0, "stage0_m": 0.04389, "stage0_l": 0.13267, "stage0_h": 0.45153, "stage1_loss_instance_mil": 0.11008, "stage1_bag_acc": 99.19773, "stage1_neg_loss": 0.04594, "stage1_mean_ious": 0.39033, "stage1_s": 0.0, "stage1_m": 0.0458, "stage1_l": 0.13629, "stage1_h": 0.42462, "loss": 0.17247, "grad_norm": 6.18829, "time": 1.64963}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09847, "stage0_loss_instance_mil": 0.01195, "stage0_bag_acc": 99.25167, "stage0_mean_ious": 0.3703, "stage0_s": 0.00103, "stage0_m": 0.06679, "stage0_l": 0.1452, "stage0_h": 0.40703, "stage1_loss_instance_mil": 0.08908, "stage1_bag_acc": 99.65735, "stage1_neg_loss": 0.04626, "stage1_mean_ious": 0.34164, "stage1_s": 0.00195, "stage1_m": 0.06915, "stage1_l": 0.14244, "stage1_h": 0.37281, "loss": 0.14729, "grad_norm": 5.34773, "time": 1.70896}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04406, "stage0_loss_instance_mil": 0.00532, "stage0_bag_acc": 99.64789, "stage0_mean_ious": 0.39293, "stage0_s": 0.0, "stage0_m": 0.06852, "stage0_l": 0.13983, "stage0_h": 0.41798, "stage1_loss_instance_mil": 0.09309, "stage1_bag_acc": 99.47986, "stage1_neg_loss": 0.04164, "stage1_mean_ious": 0.36366, "stage1_s": 0.0, "stage1_m": 0.07064, "stage1_l": 0.15698, "stage1_h": 0.38402, "loss": 0.14005, "grad_norm": 5.32245, "time": 1.69867}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04464, "stage0_loss_instance_mil": 0.01642, "stage0_bag_acc": 98.96118, "stage0_mean_ious": 0.37669, "stage0_s": 0.0, "stage0_m": 0.02789, "stage0_l": 0.15597, "stage0_h": 0.39951, "stage1_loss_instance_mil": 0.08173, "stage1_bag_acc": 98.76692, "stage1_neg_loss": 0.0416, "stage1_mean_ious": 0.35469, "stage1_s": 0.0, "stage1_m": 0.02646, "stage1_l": 0.15778, "stage1_h": 0.3742, "loss": 0.13975, "grad_norm": 4.90025, "time": 1.68609}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09339, "stage0_loss_instance_mil": 0.01039, "stage0_bag_acc": 99.58897, "stage0_mean_ious": 0.4239, "stage0_s": 0.0, "stage0_m": 0.04234, "stage0_l": 0.14883, "stage0_h": 0.46234, "stage1_loss_instance_mil": 0.06267, "stage1_bag_acc": 99.57659, "stage1_neg_loss": 0.03576, "stage1_mean_ious": 0.38879, "stage1_s": 0.0, "stage1_m": 0.03903, "stage1_l": 0.14878, "stage1_h": 0.42074, "loss": 0.10883, "grad_norm": 4.27835, "time": 1.71694}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04207, "stage0_loss_instance_mil": 0.00415, "stage0_bag_acc": 99.7592, "stage0_mean_ious": 0.41005, "stage0_s": 0.0, "stage0_m": 0.03713, "stage0_l": 0.13702, "stage0_h": 0.44746, "stage1_loss_instance_mil": 0.0622, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.03485, "stage1_mean_ious": 0.37962, "stage1_s": 0.0, "stage1_m": 0.03962, "stage1_l": 0.1376, "stage1_h": 0.4115, "loss": 0.1012, "grad_norm": 3.97685, "time": 1.67579}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04223, "stage0_loss_instance_mil": 0.00385, "stage0_bag_acc": 99.88889, "stage0_mean_ious": 0.43054, "stage0_s": 0.0, "stage0_m": 0.03697, "stage0_l": 0.16862, "stage0_h": 0.46539, "stage1_loss_instance_mil": 0.0604, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.03143, "stage1_mean_ious": 0.39153, "stage1_s": 0.0, "stage1_m": 0.03888, "stage1_l": 0.15661, "stage1_h": 0.42069, "loss": 0.09567, "grad_norm": 3.59142, "time": 1.67329}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09709, "stage0_loss_instance_mil": 0.00808, "stage0_bag_acc": 99.66359, "stage0_mean_ious": 0.40261, "stage0_s": 0.0, "stage0_m": 0.05396, "stage0_l": 0.133, "stage0_h": 0.42883, "stage1_loss_instance_mil": 0.07421, "stage1_bag_acc": 99.80909, "stage1_neg_loss": 0.03403, "stage1_mean_ious": 0.37451, "stage1_s": 0.0, "stage1_m": 0.05444, "stage1_l": 0.12831, "stage1_h": 0.39807, "loss": 0.11632, "grad_norm": 4.20218, "time": 1.70166}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04315, "stage0_loss_instance_mil": 0.00426, "stage0_bag_acc": 99.75092, "stage0_mean_ious": 0.40641, "stage0_s": 0.0, "stage0_m": 0.0178, "stage0_l": 0.14001, "stage0_h": 0.43516, "stage1_loss_instance_mil": 0.06477, "stage1_bag_acc": 99.81781, "stage1_neg_loss": 0.03366, "stage1_mean_ious": 0.37137, "stage1_s": 0.0, "stage1_m": 0.01885, "stage1_l": 0.14193, "stage1_h": 0.39449, "loss": 0.10269, "grad_norm": 3.72474, "time": 1.66157}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04498, "stage0_loss_instance_mil": 0.00247, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.40846, "stage0_s": 0.0, "stage0_m": 0.06194, "stage0_l": 0.17901, "stage0_h": 0.44335, "stage1_loss_instance_mil": 0.05816, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03769, "stage1_mean_ious": 0.38528, "stage1_s": 0.0, "stage1_m": 0.05763, "stage1_l": 0.18351, "stage1_h": 0.41604, "loss": 0.09832, "grad_norm": 3.74393, "time": 1.71138}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09809, "stage0_loss_instance_mil": 0.00637, "stage0_bag_acc": 99.80476, "stage0_mean_ious": 0.40196, "stage0_s": 0.0, "stage0_m": 0.05604, "stage0_l": 0.15252, "stage0_h": 0.43271, "stage1_loss_instance_mil": 0.06278, "stage1_bag_acc": 99.69798, "stage1_neg_loss": 0.0375, "stage1_mean_ious": 0.37306, "stage1_s": 0.0, "stage1_m": 0.06313, "stage1_l": 0.16269, "stage1_h": 0.39831, "loss": 0.10665, "grad_norm": 4.25507, "time": 1.75381}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0442, "stage0_loss_instance_mil": 0.00215, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.4006, "stage0_s": 0.00117, "stage0_m": 0.03458, "stage0_l": 0.18445, "stage0_h": 0.43629, "stage1_loss_instance_mil": 0.06917, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.03572, "stage1_mean_ious": 0.36962, "stage1_s": 0.00191, "stage1_m": 0.03795, "stage1_l": 0.1885, "stage1_h": 0.39847, "loss": 0.10704, "grad_norm": 3.89839, "time": 1.67428}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04274, "stage0_loss_instance_mil": 0.00364, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.40242, "stage0_s": 0.0, "stage0_m": 0.02392, "stage0_l": 0.15843, "stage0_h": 0.43857, "stage1_loss_instance_mil": 0.06246, "stage1_bag_acc": 99.79167, "stage1_neg_loss": 0.03385, "stage1_mean_ious": 0.37551, "stage1_s": 0.0, "stage1_m": 0.02367, "stage1_l": 0.15988, "stage1_h": 0.40697, "loss": 0.09996, "grad_norm": 3.9665, "time": 1.65723}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.0957, "stage0_loss_instance_mil": 0.0034, "stage0_bag_acc": 99.75556, "stage0_mean_ious": 0.41357, "stage0_s": 0.0, "stage0_m": 0.03533, "stage0_l": 0.13996, "stage0_h": 0.44453, "stage1_loss_instance_mil": 0.0551, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02911, "stage1_mean_ious": 0.38707, "stage1_s": 0.0, "stage1_m": 0.04198, "stage1_l": 0.1465, "stage1_h": 0.41327, "loss": 0.08762, "grad_norm": 3.44074, "time": 1.71814}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04398, "stage0_loss_instance_mil": 0.00607, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.40668, "stage0_s": 0.0, "stage0_m": 0.02993, "stage0_l": 0.15595, "stage0_h": 0.44243, "stage1_loss_instance_mil": 0.05343, "stage1_bag_acc": 99.77124, "stage1_neg_loss": 0.03319, "stage1_mean_ious": 0.37093, "stage1_s": 0.0, "stage1_m": 0.03311, "stage1_l": 0.15259, "stage1_h": 0.40152, "loss": 0.0927, "grad_norm": 3.76395, "time": 1.68406}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04449, "stage0_loss_instance_mil": 0.00154, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.41501, "stage0_s": 0.0, "stage0_m": 0.04592, "stage0_l": 0.14236, "stage0_h": 0.4419, "stage1_loss_instance_mil": 0.06107, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03411, "stage1_mean_ious": 0.37806, "stage1_s": 0.0, "stage1_m": 0.0456, "stage1_l": 0.13825, "stage1_h": 0.40121, "loss": 0.09673, "grad_norm": 3.79086, "time": 1.68115}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.085, "bbox_mAP_50": 0.266, "bbox_mAP_75": 0.159, "bbox_mAP_s": 0.064, "bbox_mAP_m": 0.033, "bbox_mAP_l": 0.009, "bbox_mAP_copypaste": "0.085 0.266 0.159 0.064 0.033 0.009"}
