{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_val.json',\n        img_prefix='data/coco/images/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 16595, "data_time": 0.08917, "stage0_loss_instance_mil": 0.54721, "stage0_bag_acc": 41.56146, "stage0_mean_ious": 0.41279, "stage0_s": 0.0, "stage0_m": 0.05943, "stage0_l": 0.26707, "stage0_h": 0.42958, "stage1_loss_instance_mil": 0.2557, "stage1_bag_acc": 38.47026, "stage1_neg_loss": 0.02889, "stage1_mean_ious": 0.40025, "stage1_s": 0.0, "stage1_m": 0.06656, "stage1_l": 0.26206, "stage1_h": 0.41479, "loss": 0.8318, "grad_norm": 4.59208, "time": 1.31939}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01988, "memory": 16595, "data_time": 0.03617, "stage0_loss_instance_mil": 0.64162, "stage0_bag_acc": 33.64635, "stage0_mean_ious": 0.31275, "stage0_s": 0.0, "stage0_m": 0.02749, "stage0_l": 0.21425, "stage0_h": 0.31932, "stage1_loss_instance_mil": 0.20357, "stage1_bag_acc": 34.89045, "stage1_neg_loss": 0.0364, "stage1_mean_ious": 0.30453, "stage1_s": 0.0, "stage1_m": 0.03031, "stage1_l": 0.211, "stage1_h": 0.30846, "loss": 0.88158, "grad_norm": 4.25416, "time": 1.26603}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.02987, "memory": 16595, "data_time": 0.03494, "stage0_loss_instance_mil": 0.64739, "stage0_bag_acc": 33.64425, "stage0_mean_ious": 0.35474, "stage0_s": 0.0, "stage0_m": 0.04494, "stage0_l": 0.21879, "stage0_h": 0.3652, "stage1_loss_instance_mil": 0.16624, "stage1_bag_acc": 38.78148, "stage1_neg_loss": 0.01521, "stage1_mean_ious": 0.32696, "stage1_s": 0.0, "stage1_m": 0.03575, "stage1_l": 0.21799, "stage1_h": 0.33663, "loss": 0.82884, "grad_norm": 1.85812, "time": 1.25665}
{"mode": "val", "epoch": 1, "iter": 180, "lr": 0.03586, "eval_iter_num": 720, "bbox_mAP": 0.015, "bbox_mAP_50": 0.062, "bbox_mAP_75": 0.024, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.015 0.062 0.024 0.008 0.003 0.002"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.04585, "memory": 16600, "data_time": 0.08902, "stage0_loss_instance_mil": 0.67871, "stage0_bag_acc": 23.1087, "stage0_mean_ious": 0.34422, "stage0_s": 0.00168, "stage0_m": 0.04047, "stage0_l": 0.1818, "stage0_h": 0.36649, "stage1_loss_instance_mil": 0.15993, "stage1_bag_acc": 31.32584, "stage1_neg_loss": 0.00841, "stage1_mean_ious": 0.33798, "stage1_s": 0.00064, "stage1_m": 0.03494, "stage1_l": 0.19107, "stage1_h": 0.3579, "loss": 0.84705, "grad_norm": 1.02661, "time": 1.24352}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.05584, "memory": 16600, "data_time": 0.03647, "stage0_loss_instance_mil": 0.66554, "stage0_bag_acc": 28.56972, "stage0_mean_ious": 0.31807, "stage0_s": 0.0, "stage0_m": 0.03027, "stage0_l": 0.20413, "stage0_h": 0.33332, "stage1_loss_instance_mil": 0.13614, "stage1_bag_acc": 29.81645, "stage1_neg_loss": 0.01166, "stage1_mean_ious": 0.30521, "stage1_s": 0.0, "stage1_m": 0.02532, "stage1_l": 0.19525, "stage1_h": 0.32007, "loss": 0.81334, "grad_norm": 0.63004, "time": 1.18421}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.06583, "memory": 16600, "data_time": 0.03815, "stage0_loss_instance_mil": 0.657, "stage0_bag_acc": 27.74251, "stage0_mean_ious": 0.34682, "stage0_s": 0.0, "stage0_m": 0.03971, "stage0_l": 0.21513, "stage0_h": 0.3656, "stage1_loss_instance_mil": 0.12827, "stage1_bag_acc": 46.97266, "stage1_neg_loss": 0.01622, "stage1_mean_ious": 0.33119, "stage1_s": 0.0, "stage1_m": 0.04181, "stage1_l": 0.22608, "stage1_h": 0.34682, "loss": 0.80149, "grad_norm": 0.91107, "time": 1.19887}
{"mode": "val", "epoch": 2, "iter": 180, "lr": 0.07183, "eval_iter_num": 720, "bbox_mAP": 0.116, "bbox_mAP_50": 0.359, "bbox_mAP_75": 0.218, "bbox_mAP_s": 0.079, "bbox_mAP_m": 0.044, "bbox_mAP_l": 0.019, "bbox_mAP_copypaste": "0.116 0.359 0.218 0.079 0.044 0.019"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.08182, "memory": 16600, "data_time": 0.08635, "stage0_loss_instance_mil": 0.65145, "stage0_bag_acc": 30.15712, "stage0_mean_ious": 0.32435, "stage0_s": 0.0, "stage0_m": 0.01955, "stage0_l": 0.18171, "stage0_h": 0.33774, "stage1_loss_instance_mil": 0.14513, "stage1_bag_acc": 36.83554, "stage1_neg_loss": 0.01533, "stage1_mean_ious": 0.31555, "stage1_s": 0.0, "stage1_m": 0.02028, "stage1_l": 0.18068, "stage1_h": 0.32752, "loss": 0.81192, "grad_norm": 0.87544, "time": 1.27477}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.09181, "memory": 16600, "data_time": 0.03685, "stage0_loss_instance_mil": 0.62225, "stage0_bag_acc": 37.07478, "stage0_mean_ious": 0.31073, "stage0_s": 0.0, "stage0_m": 0.02788, "stage0_l": 0.22232, "stage0_h": 0.32525, "stage1_loss_instance_mil": 0.16332, "stage1_bag_acc": 42.0996, "stage1_neg_loss": 0.02379, "stage1_mean_ious": 0.31488, "stage1_s": 0.0, "stage1_m": 0.02826, "stage1_l": 0.23159, "stage1_h": 0.3279, "loss": 0.80936, "grad_norm": 1.13897, "time": 1.20879}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.1, "memory": 16600, "data_time": 0.0377, "stage0_loss_instance_mil": 0.66322, "stage0_bag_acc": 26.67489, "stage0_mean_ious": 0.34965, "stage0_s": 0.0, "stage0_m": 0.0095, "stage0_l": 0.21001, "stage0_h": 0.36796, "stage1_loss_instance_mil": 0.14924, "stage1_bag_acc": 37.21894, "stage1_neg_loss": 0.01734, "stage1_mean_ious": 0.33617, "stage1_s": 0.0, "stage1_m": 0.00973, "stage1_l": 0.22334, "stage1_h": 0.34877, "loss": 0.82979, "grad_norm": 0.83949, "time": 1.20696}
{"mode": "val", "epoch": 3, "iter": 180, "lr": 0.1, "eval_iter_num": 720, "bbox_mAP": 0.073, "bbox_mAP_50": 0.254, "bbox_mAP_75": 0.132, "bbox_mAP_s": 0.043, "bbox_mAP_m": 0.022, "bbox_mAP_l": 0.007, "bbox_mAP_copypaste": "0.073 0.254 0.132 0.043 0.022 0.007"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.1, "memory": 16600, "data_time": 0.08539, "stage0_loss_instance_mil": 0.64436, "stage0_bag_acc": 30.46389, "stage0_mean_ious": 0.42345, "stage0_s": 0.0, "stage0_m": 0.02278, "stage0_l": 0.18128, "stage0_h": 0.44648, "stage1_loss_instance_mil": 0.13527, "stage1_bag_acc": 38.62334, "stage1_neg_loss": 0.01726, "stage1_mean_ious": 0.40953, "stage1_s": 0.0, "stage1_m": 0.02325, "stage1_l": 0.19696, "stage1_h": 0.42929, "loss": 0.79689, "grad_norm": 0.66081, "time": 1.22698}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.1, "memory": 16600, "data_time": 0.03668, "stage0_loss_instance_mil": 0.59214, "stage0_bag_acc": 38.59937, "stage0_mean_ious": 0.41162, "stage0_s": 0.0, "stage0_m": 0.02725, "stage0_l": 0.21338, "stage0_h": 0.43628, "stage1_loss_instance_mil": 0.1807, "stage1_bag_acc": 42.25177, "stage1_neg_loss": 0.03199, "stage1_mean_ious": 0.3992, "stage1_s": 0.0, "stage1_m": 0.02836, "stage1_l": 0.21844, "stage1_h": 0.42045, "loss": 0.80484, "grad_norm": 1.09706, "time": 1.26813}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.1, "memory": 16600, "data_time": 0.03734, "stage0_loss_instance_mil": 0.64307, "stage0_bag_acc": 29.21752, "stage0_mean_ious": 0.38, "stage0_s": 0.0, "stage0_m": 0.034, "stage0_l": 0.21585, "stage0_h": 0.39926, "stage1_loss_instance_mil": 0.15648, "stage1_bag_acc": 34.8676, "stage1_neg_loss": 0.06212, "stage1_mean_ious": 0.35783, "stage1_s": 0.0, "stage1_m": 0.03166, "stage1_l": 0.22642, "stage1_h": 0.37232, "loss": 0.86167, "grad_norm": 1.7712, "time": 1.2518}
{"mode": "val", "epoch": 4, "iter": 180, "lr": 0.1, "eval_iter_num": 720, "bbox_mAP": 0.001, "bbox_mAP_50": 0.009, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.001 0.009 0.001 0.000 0.000 0.000"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.1, "memory": 16600, "data_time": 0.0878, "stage0_loss_instance_mil": 0.68911, "stage0_bag_acc": 15.758, "stage0_mean_ious": 0.14528, "stage0_s": 0.0, "stage0_m": 0.04583, "stage0_l": 0.25294, "stage0_h": 0.12375, "stage1_loss_instance_mil": 0.11991, "stage1_bag_acc": 20.64118, "stage1_neg_loss": 0.0082, "stage1_mean_ious": 0.12807, "stage1_s": 0.0, "stage1_m": 0.05011, "stage1_l": 0.21894, "stage1_h": 0.10897, "loss": 0.81723, "grad_norm": 0.40487, "time": 1.29385}
