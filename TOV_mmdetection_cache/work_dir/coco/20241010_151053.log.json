{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+15637e6", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [4]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8671, "data_time": 0.06016, "stage0_loss_instance_mil": 0.64074, "stage0_bag_acc": 24.59539, "stage0_mean_ious": 0.10441, "stage0_s": 0.0, "stage0_m": 0.02409, "stage0_l": 0.08846, "stage0_h": 0.10712, "stage1_loss_instance_mil": 0.18287, "stage1_bag_acc": 26.51901, "stage1_neg_loss": 0.01493, "stage1_mean_ious": 0.09748, "stage1_s": 0.0, "stage1_m": 0.02374, "stage1_l": 0.08195, "stage1_h": 0.10003, "loss": 0.83854, "grad_norm": 5.42651, "time": 0.79453}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8671, "data_time": 0.01129, "stage0_loss_instance_mil": 0.3236, "stage0_bag_acc": 70.40086, "stage0_mean_ious": 0.1649, "stage0_s": 0.0, "stage0_m": 0.02926, "stage0_l": 0.11893, "stage0_h": 0.16783, "stage1_loss_instance_mil": 0.33119, "stage1_bag_acc": 59.28219, "stage1_neg_loss": 0.06534, "stage1_mean_ious": 0.15983, "stage1_s": 0.0, "stage1_m": 0.02941, "stage1_l": 0.11023, "stage1_h": 0.16395, "loss": 0.72013, "grad_norm": 8.976, "time": 0.70254}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8671, "data_time": 0.01155, "stage0_loss_instance_mil": 0.3601, "stage0_bag_acc": 67.8636, "stage0_mean_ious": 0.08892, "stage0_s": 0.00363, "stage0_m": 0.03169, "stage0_l": 0.07936, "stage0_h": 0.08615, "stage1_loss_instance_mil": 0.35206, "stage1_bag_acc": 51.30009, "stage1_neg_loss": 0.12354, "stage1_mean_ious": 0.09086, "stage1_s": 0.00265, "stage1_m": 0.03492, "stage1_l": 0.08127, "stage1_h": 0.08773, "loss": 0.8357, "grad_norm": 7.91456, "time": 0.70167}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8671, "data_time": 0.01267, "stage0_loss_instance_mil": 0.29174, "stage0_bag_acc": 77.21125, "stage0_mean_ious": 0.09193, "stage0_s": 0.0, "stage0_m": 0.01613, "stage0_l": 0.09536, "stage0_h": 0.08519, "stage1_loss_instance_mil": 0.33903, "stage1_bag_acc": 65.28634, "stage1_neg_loss": 0.05526, "stage1_mean_ious": 0.09013, "stage1_s": 0.0, "stage1_m": 0.01443, "stage1_l": 0.09678, "stage1_h": 0.08296, "loss": 0.68603, "grad_norm": 5.57848, "time": 0.72729}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8671, "data_time": 0.01279, "stage0_loss_instance_mil": 0.4448, "stage0_bag_acc": 61.31971, "stage0_mean_ious": 0.10952, "stage0_s": 0.0, "stage0_m": 0.01887, "stage0_l": 0.10579, "stage0_h": 0.10521, "stage1_loss_instance_mil": 0.30616, "stage1_bag_acc": 55.82653, "stage1_neg_loss": 0.06862, "stage1_mean_ious": 0.10403, "stage1_s": 0.0, "stage1_m": 0.01753, "stage1_l": 0.09866, "stage1_h": 0.1006, "loss": 0.81958, "grad_norm": 5.5467, "time": 0.73456}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8671, "data_time": 0.01256, "stage0_loss_instance_mil": 0.38545, "stage0_bag_acc": 68.23796, "stage0_mean_ious": 0.09775, "stage0_s": 0.0, "stage0_m": 0.03011, "stage0_l": 0.07883, "stage0_h": 0.09244, "stage1_loss_instance_mil": 0.34027, "stage1_bag_acc": 68.1701, "stage1_neg_loss": 0.1438, "stage1_mean_ious": 0.09497, "stage1_s": 0.0, "stage1_m": 0.02943, "stage1_l": 0.07909, "stage1_h": 0.0887, "loss": 0.86952, "grad_norm": 7.52879, "time": 0.70829}
{"mode": "val", "epoch": 1, "iter": 300, "lr": 0.01197, "eval_iter_num": 720, "bbox_mAP": 0.013, "bbox_mAP_50": 0.053, "bbox_mAP_75": 0.021, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.013 0.053 0.021 0.006 0.003 0.001"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01397, "memory": 8671, "data_time": 0.06019, "stage0_loss_instance_mil": 0.40579, "stage0_bag_acc": 69.25319, "stage0_mean_ious": 0.09728, "stage0_s": 0.00143, "stage0_m": 0.01619, "stage0_l": 0.08259, "stage0_h": 0.09535, "stage1_loss_instance_mil": 0.34505, "stage1_bag_acc": 46.34328, "stage1_neg_loss": 0.06785, "stage1_mean_ious": 0.09208, "stage1_s": 0.00223, "stage1_m": 0.01414, "stage1_l": 0.07766, "stage1_h": 0.08974, "loss": 0.81869, "grad_norm": 4.03413, "time": 0.77756}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01596, "memory": 8671, "data_time": 0.01301, "stage0_loss_instance_mil": 0.61675, "stage0_bag_acc": 35.40644, "stage0_mean_ious": 0.09592, "stage0_s": 0.00304, "stage0_m": 0.01583, "stage0_l": 0.07956, "stage0_h": 0.09457, "stage1_loss_instance_mil": 0.23062, "stage1_bag_acc": 32.01542, "stage1_neg_loss": 0.00793, "stage1_mean_ious": 0.09528, "stage1_s": 0.00284, "stage1_m": 0.01582, "stage1_l": 0.0765, "stage1_h": 0.09335, "loss": 0.85529, "grad_norm": 1.63146, "time": 0.73564}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01796, "memory": 8671, "data_time": 0.01173, "stage0_loss_instance_mil": 0.55015, "stage0_bag_acc": 42.37511, "stage0_mean_ious": 0.09115, "stage0_s": 0.0, "stage0_m": 0.02826, "stage0_l": 0.08352, "stage0_h": 0.08682, "stage1_loss_instance_mil": 0.17199, "stage1_bag_acc": 47.47977, "stage1_neg_loss": 0.02804, "stage1_mean_ious": 0.08502, "stage1_s": 0.0, "stage1_m": 0.02963, "stage1_l": 0.07567, "stage1_h": 0.08033, "loss": 0.75018, "grad_norm": 2.07098, "time": 0.69447}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01996, "memory": 8671, "data_time": 0.01221, "stage0_loss_instance_mil": 0.50701, "stage0_bag_acc": 49.24312, "stage0_mean_ious": 0.08858, "stage0_s": 0.0, "stage0_m": 0.01454, "stage0_l": 0.0842, "stage0_h": 0.08381, "stage1_loss_instance_mil": 0.24748, "stage1_bag_acc": 49.10557, "stage1_neg_loss": 0.02784, "stage1_mean_ious": 0.08442, "stage1_s": 0.0, "stage1_m": 0.01324, "stage1_l": 0.0815, "stage1_h": 0.07958, "loss": 0.78233, "grad_norm": 2.15054, "time": 0.69251}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 8671, "data_time": 0.0129, "stage0_loss_instance_mil": 0.59634, "stage0_bag_acc": 41.30478, "stage0_mean_ious": 0.11104, "stage0_s": 0.0, "stage0_m": 0.01808, "stage0_l": 0.09016, "stage0_h": 0.10759, "stage1_loss_instance_mil": 0.21104, "stage1_bag_acc": 44.87612, "stage1_neg_loss": 0.02095, "stage1_mean_ious": 0.1093, "stage1_s": 0.0, "stage1_m": 0.01788, "stage1_l": 0.09974, "stage1_h": 0.10301, "loss": 0.82833, "grad_norm": 1.29695, "time": 0.73684}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 8671, "data_time": 0.01334, "stage0_loss_instance_mil": 0.50268, "stage0_bag_acc": 50.94396, "stage0_mean_ious": 0.09223, "stage0_s": 0.0, "stage0_m": 0.01915, "stage0_l": 0.08635, "stage0_h": 0.09217, "stage1_loss_instance_mil": 0.23799, "stage1_bag_acc": 54.9508, "stage1_neg_loss": 0.03074, "stage1_mean_ious": 0.09006, "stage1_s": 0.0, "stage1_m": 0.01907, "stage1_l": 0.08764, "stage1_h": 0.08893, "loss": 0.77141, "grad_norm": 1.98179, "time": 0.73811}
{"mode": "val", "epoch": 2, "iter": 300, "lr": 0.02, "eval_iter_num": 720, "bbox_mAP": 0.001, "bbox_mAP_50": 0.007, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.001 0.007 0.002 0.001 0.000 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 8671, "data_time": 0.06475, "stage0_loss_instance_mil": 0.50667, "stage0_bag_acc": 51.45243, "stage0_mean_ious": 0.06662, "stage0_s": 0.00363, "stage0_m": 0.0162, "stage0_l": 0.06488, "stage0_h": 0.06308, "stage1_loss_instance_mil": 0.2328, "stage1_bag_acc": 40.09197, "stage1_neg_loss": 0.043, "stage1_mean_ious": 0.06372, "stage1_s": 0.00275, "stage1_m": 0.01603, "stage1_l": 0.06062, "stage1_h": 0.0606, "loss": 0.78248, "grad_norm": 2.14174, "time": 0.75791}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 8671, "data_time": 0.0169, "stage0_loss_instance_mil": 0.55163, "stage0_bag_acc": 44.95362, "stage0_mean_ious": 0.07272, "stage0_s": 0.0, "stage0_m": 0.01195, "stage0_l": 0.05717, "stage0_h": 0.07075, "stage1_loss_instance_mil": 0.20173, "stage1_bag_acc": 55.32319, "stage1_neg_loss": 0.02457, "stage1_mean_ious": 0.07218, "stage1_s": 0.0, "stage1_m": 0.01428, "stage1_l": 0.06061, "stage1_h": 0.06798, "loss": 0.77792, "grad_norm": 2.13771, "time": 0.75096}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 8671, "data_time": 0.01607, "stage0_loss_instance_mil": 0.42147, "stage0_bag_acc": 58.90771, "stage0_mean_ious": 0.0888, "stage0_s": 0.0, "stage0_m": 0.01978, "stage0_l": 0.0795, "stage0_h": 0.08717, "stage1_loss_instance_mil": 0.19883, "stage1_bag_acc": 82.22062, "stage1_neg_loss": 0.05737, "stage1_mean_ious": 0.08612, "stage1_s": 0.0, "stage1_m": 0.01996, "stage1_l": 0.07904, "stage1_h": 0.0829, "loss": 0.67767, "grad_norm": 2.20089, "time": 0.74062}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 8671, "data_time": 0.01566, "stage0_loss_instance_mil": 0.49615, "stage0_bag_acc": 51.58146, "stage0_mean_ious": 0.09362, "stage0_s": 0.0, "stage0_m": 0.0211, "stage0_l": 0.08954, "stage0_h": 0.09046, "stage1_loss_instance_mil": 0.25706, "stage1_bag_acc": 54.45714, "stage1_neg_loss": 0.03173, "stage1_mean_ious": 0.09382, "stage1_s": 0.0, "stage1_m": 0.01965, "stage1_l": 0.08801, "stage1_h": 0.09156, "loss": 0.78494, "grad_norm": 2.03165, "time": 0.71947}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 8671, "data_time": 0.01625, "stage0_loss_instance_mil": 0.44845, "stage0_bag_acc": 60.29347, "stage0_mean_ious": 0.07087, "stage0_s": 0.0, "stage0_m": 0.0259, "stage0_l": 0.08209, "stage0_h": 0.06118, "stage1_loss_instance_mil": 0.27935, "stage1_bag_acc": 45.58386, "stage1_neg_loss": 0.03687, "stage1_mean_ious": 0.06775, "stage1_s": 0.0, "stage1_m": 0.02496, "stage1_l": 0.07653, "stage1_h": 0.05906, "loss": 0.76467, "grad_norm": 1.7822, "time": 0.69566}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02, "memory": 8671, "data_time": 0.01726, "stage0_loss_instance_mil": 0.35441, "stage0_bag_acc": 68.77138, "stage0_mean_ious": 0.06458, "stage0_s": 0.0, "stage0_m": 0.01236, "stage0_l": 0.08879, "stage0_h": 0.05533, "stage1_loss_instance_mil": 0.30547, "stage1_bag_acc": 55.00742, "stage1_neg_loss": 0.0717, "stage1_mean_ious": 0.06069, "stage1_s": 0.0, "stage1_m": 0.01008, "stage1_l": 0.08382, "stage1_h": 0.05222, "loss": 0.73157, "grad_norm": 2.52362, "time": 0.7295}
{"mode": "val", "epoch": 3, "iter": 300, "lr": 0.02, "eval_iter_num": 720, "bbox_mAP": 0.006, "bbox_mAP_50": 0.027, "bbox_mAP_75": 0.011, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.001, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.006 0.027 0.011 0.003 0.001 0.000"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 8671, "data_time": 0.05997, "stage0_loss_instance_mil": 0.4842, "stage0_bag_acc": 49.32612, "stage0_mean_ious": 0.11195, "stage0_s": 0.0, "stage0_m": 0.0228, "stage0_l": 0.12589, "stage0_h": 0.09923, "stage1_loss_instance_mil": 0.28313, "stage1_bag_acc": 37.99121, "stage1_neg_loss": 0.02295, "stage1_mean_ious": 0.10804, "stage1_s": 0.0, "stage1_m": 0.0204, "stage1_l": 0.11652, "stage1_h": 0.09803, "loss": 0.79029, "grad_norm": 1.81033, "time": 0.75703}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 8671, "data_time": 0.01262, "stage0_loss_instance_mil": 0.35992, "stage0_bag_acc": 67.09505, "stage0_mean_ious": 0.11418, "stage0_s": 0.0, "stage0_m": 0.02524, "stage0_l": 0.12573, "stage0_h": 0.10565, "stage1_loss_instance_mil": 0.28685, "stage1_bag_acc": 49.7755, "stage1_neg_loss": 0.04992, "stage1_mean_ious": 0.10941, "stage1_s": 0.0, "stage1_m": 0.02722, "stage1_l": 0.12079, "stage1_h": 0.10004, "loss": 0.69669, "grad_norm": 1.90246, "time": 0.67586}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 8671, "data_time": 0.01317, "stage0_loss_instance_mil": 0.36339, "stage0_bag_acc": 67.35348, "stage0_mean_ious": 0.11126, "stage0_s": 0.0, "stage0_m": 0.02662, "stage0_l": 0.12193, "stage0_h": 0.10178, "stage1_loss_instance_mil": 0.27302, "stage1_bag_acc": 50.51376, "stage1_neg_loss": 0.07468, "stage1_mean_ious": 0.10424, "stage1_s": 0.0, "stage1_m": 0.02672, "stage1_l": 0.11682, "stage1_h": 0.09325, "loss": 0.71109, "grad_norm": 2.80841, "time": 0.70757}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 8671, "data_time": 0.01249, "stage0_loss_instance_mil": 0.4055, "stage0_bag_acc": 65.93349, "stage0_mean_ious": 0.11234, "stage0_s": 0.00231, "stage0_m": 0.02733, "stage0_l": 0.12187, "stage0_h": 0.10102, "stage1_loss_instance_mil": 0.3455, "stage1_bag_acc": 41.03259, "stage1_neg_loss": 0.03712, "stage1_mean_ious": 0.10742, "stage1_s": 0.00197, "stage1_m": 0.02478, "stage1_l": 0.11653, "stage1_h": 0.09644, "loss": 0.78812, "grad_norm": 2.36481, "time": 0.66128}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.02, "memory": 8671, "data_time": 0.0122, "stage0_loss_instance_mil": 0.58859, "stage0_bag_acc": 31.86494, "stage0_mean_ious": 0.03819, "stage0_s": 0.0, "stage0_m": 0.01366, "stage0_l": 0.05435, "stage0_h": 0.02718, "stage1_loss_instance_mil": 0.14099, "stage1_bag_acc": 30.59735, "stage1_neg_loss": 0.04131, "stage1_mean_ious": 0.03713, "stage1_s": 0.0, "stage1_m": 0.01295, "stage1_l": 0.04974, "stage1_h": 0.0272, "loss": 0.77089, "grad_norm": 1.54193, "time": 0.68304}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.02, "memory": 8671, "data_time": 0.01242, "stage0_loss_instance_mil": 0.62812, "stage0_bag_acc": 25.62164, "stage0_mean_ious": 0.05703, "stage0_s": 0.0, "stage0_m": 0.01416, "stage0_l": 0.07793, "stage0_h": 0.04745, "stage1_loss_instance_mil": 0.13263, "stage1_bag_acc": 29.2298, "stage1_neg_loss": 0.01178, "stage1_mean_ious": 0.05393, "stage1_s": 0.0, "stage1_m": 0.01394, "stage1_l": 0.07488, "stage1_h": 0.04343, "loss": 0.77254, "grad_norm": 0.53837, "time": 0.69455}
