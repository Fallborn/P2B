{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=2,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17732, "data_time": 0.3036, "stage0_loss_instance_mil": 0.70449, "stage0_bag_acc": 21.19703, "stage0_mean_ious": 0.33608, "stage0_s": 0.0, "stage0_m": 0.01117, "stage0_l": 0.14536, "stage0_h": 0.35769, "stage1_loss_instance_mil": 0.17441, "stage1_bag_acc": 16.57697, "stage1_neg_loss": 0.00101, "stage1_mean_ious": 0.33629, "stage1_s": 0.0, "stage1_m": 0.01254, "stage1_l": 0.14494, "stage1_h": 0.35724, "loss": 0.87991, "grad_norm": 3.16627, "time": 2.75561}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17737, "data_time": 0.38031, "stage0_loss_instance_mil": 0.57644, "stage0_bag_acc": 57.53663, "stage0_mean_ious": 0.34422, "stage0_s": 0.0, "stage0_m": 0.0294, "stage0_l": 0.19268, "stage0_h": 0.35585, "stage1_loss_instance_mil": 0.25342, "stage1_bag_acc": 23.89801, "stage1_neg_loss": 0.00326, "stage1_mean_ious": 0.3432, "stage1_s": 0.0, "stage1_m": 0.03383, "stage1_l": 0.20137, "stage1_h": 0.35362, "loss": 0.83312, "grad_norm": 4.26372, "time": 4.78333}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17761, "data_time": 0.40248, "stage0_loss_instance_mil": 0.23489, "stage0_bag_acc": 90.06418, "stage0_mean_ious": 0.36203, "stage0_s": 0.0, "stage0_m": 0.03206, "stage0_l": 0.21535, "stage0_h": 0.38192, "stage1_loss_instance_mil": 0.3543, "stage1_bag_acc": 80.43939, "stage1_neg_loss": 0.06219, "stage1_mean_ious": 0.35456, "stage1_s": 0.0, "stage1_m": 0.03775, "stage1_l": 0.2232, "stage1_h": 0.37251, "loss": 0.65138, "grad_norm": 10.36155, "time": 4.91212}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17775, "data_time": 0.19131, "stage0_loss_instance_mil": 0.07231, "stage0_bag_acc": 96.32977, "stage0_mean_ious": 0.35976, "stage0_s": 0.00133, "stage0_m": 0.07727, "stage0_l": 0.17202, "stage0_h": 0.38209, "stage1_loss_instance_mil": 0.2953, "stage1_bag_acc": 97.65478, "stage1_neg_loss": 0.08901, "stage1_mean_ious": 0.33914, "stage1_s": 0.00122, "stage1_m": 0.06602, "stage1_l": 0.15642, "stage1_h": 0.36129, "loss": 0.45663, "grad_norm": 12.86288, "time": 1.98905}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17775, "data_time": 0.49721, "stage0_loss_instance_mil": 0.05535, "stage0_bag_acc": 96.42388, "stage0_mean_ious": 0.36646, "stage0_s": 0.0, "stage0_m": 0.0296, "stage0_l": 0.14201, "stage0_h": 0.39148, "stage1_loss_instance_mil": 0.27279, "stage1_bag_acc": 98.1815, "stage1_neg_loss": 0.08668, "stage1_mean_ious": 0.34841, "stage1_s": 0.0, "stage1_m": 0.02242, "stage1_l": 0.12803, "stage1_h": 0.3741, "loss": 0.41482, "grad_norm": 15.87909, "time": 5.60371}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17801, "data_time": 0.38709, "stage0_loss_instance_mil": 0.05206, "stage0_bag_acc": 97.35668, "stage0_mean_ious": 0.37848, "stage0_s": 0.0, "stage0_m": 0.042, "stage0_l": 0.14522, "stage0_h": 0.39801, "stage1_loss_instance_mil": 0.2615, "stage1_bag_acc": 98.17312, "stage1_neg_loss": 0.09443, "stage1_mean_ious": 0.35361, "stage1_s": 0.0, "stage1_m": 0.0301, "stage1_l": 0.13644, "stage1_h": 0.37324, "loss": 0.40799, "grad_norm": 20.05998, "time": 4.86261}
{"mode": "val", "epoch": 2, "iter": 180, "lr": 4e-05, "eval_iter_num": 90, "bbox_mAP": 0.083, "bbox_mAP_50": 0.296, "bbox_mAP_75": 0.142, "bbox_mAP_s": 0.051, "bbox_mAP_m": 0.021, "bbox_mAP_l": 0.006, "bbox_mAP_copypaste": "0.083 0.296 0.142 0.051 0.021 0.006"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17801, "data_time": 0.16787, "stage0_loss_instance_mil": 0.04508, "stage0_bag_acc": 97.60243, "stage0_mean_ious": 0.38617, "stage0_s": 0.0, "stage0_m": 0.02772, "stage0_l": 0.14795, "stage0_h": 0.41031, "stage1_loss_instance_mil": 0.23286, "stage1_bag_acc": 98.84103, "stage1_neg_loss": 0.07865, "stage1_mean_ious": 0.3545, "stage1_s": 0.0, "stage1_m": 0.02734, "stage1_l": 0.13245, "stage1_h": 0.37727, "loss": 0.35659, "grad_norm": 14.0669, "time": 2.13425}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17801, "data_time": 0.45338, "stage0_loss_instance_mil": 0.02589, "stage0_bag_acc": 99.01337, "stage0_mean_ious": 0.37117, "stage0_s": 0.0, "stage0_m": 0.0511, "stage0_l": 0.11977, "stage0_h": 0.39659, "stage1_loss_instance_mil": 0.27225, "stage1_bag_acc": 98.55319, "stage1_neg_loss": 0.0814, "stage1_mean_ious": 0.33394, "stage1_s": 0.0, "stage1_m": 0.04064, "stage1_l": 0.09544, "stage1_h": 0.35928, "loss": 0.37953, "grad_norm": 15.70967, "time": 5.50162}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17801, "data_time": 0.52624, "stage0_loss_instance_mil": 0.03993, "stage0_bag_acc": 97.62027, "stage0_mean_ious": 0.37733, "stage0_s": 0.0, "stage0_m": 0.0442, "stage0_l": 0.14858, "stage0_h": 0.41301, "stage1_loss_instance_mil": 0.25233, "stage1_bag_acc": 97.23957, "stage1_neg_loss": 0.08557, "stage1_mean_ious": 0.33808, "stage1_s": 0.0, "stage1_m": 0.03163, "stage1_l": 0.12659, "stage1_h": 0.37232, "loss": 0.37783, "grad_norm": 16.10103, "time": 5.76067}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17801, "data_time": 0.32511, "stage0_loss_instance_mil": 0.0175, "stage0_bag_acc": 98.8991, "stage0_mean_ious": 0.37775, "stage0_s": 0.0, "stage0_m": 0.03156, "stage0_l": 0.17048, "stage0_h": 0.40097, "stage1_loss_instance_mil": 0.21102, "stage1_bag_acc": 99.22415, "stage1_neg_loss": 0.07737, "stage1_mean_ious": 0.34495, "stage1_s": 0.0, "stage1_m": 0.01984, "stage1_l": 0.15365, "stage1_h": 0.3666, "loss": 0.3059, "grad_norm": 14.347, "time": 3.74601}
