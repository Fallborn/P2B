{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.22434, "stage0_loss_instance_mil": 0.72064, "stage0_bag_acc": 11.91286, "stage0_mean_ious": 0.38056, "stage0_s": 0.0, "stage0_m": 0.03816, "stage0_l": 0.19963, "stage0_h": 0.40219, "stage1_loss_instance_mil": 0.16425, "stage1_bag_acc": 16.86091, "stage1_neg_loss": 0.00131, "stage1_mean_ious": 0.37915, "stage1_s": 0.0, "stage1_m": 0.03808, "stage1_l": 0.21176, "stage1_h": 0.39941, "loss": 0.8862, "grad_norm": 3.18804, "time": 2.85925}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.37525, "stage0_loss_instance_mil": 0.58911, "stage0_bag_acc": 67.36222, "stage0_mean_ious": 0.39427, "stage0_s": 0.0, "stage0_m": 0.03664, "stage0_l": 0.19441, "stage0_h": 0.41574, "stage1_loss_instance_mil": 0.24463, "stage1_bag_acc": 27.72591, "stage1_neg_loss": 0.00357, "stage1_mean_ious": 0.38357, "stage1_s": 0.0, "stage1_m": 0.03235, "stage1_l": 0.1961, "stage1_h": 0.40234, "loss": 0.83731, "grad_norm": 3.73485, "time": 4.87067}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.4068, "stage0_loss_instance_mil": 0.23687, "stage0_bag_acc": 92.49377, "stage0_mean_ious": 0.39573, "stage0_s": 0.0, "stage0_m": 0.03329, "stage0_l": 0.18135, "stage0_h": 0.4287, "stage1_loss_instance_mil": 0.36687, "stage1_bag_acc": 85.16145, "stage1_neg_loss": 0.0662, "stage1_mean_ious": 0.3879, "stage1_s": 0.0, "stage1_m": 0.02686, "stage1_l": 0.18039, "stage1_h": 0.42037, "loss": 0.66994, "grad_norm": 10.42266, "time": 4.98272}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.29303, "stage0_loss_instance_mil": 0.08517, "stage0_bag_acc": 96.51958, "stage0_mean_ious": 0.36569, "stage0_s": 0.0, "stage0_m": 0.04052, "stage0_l": 0.16015, "stage0_h": 0.3886, "stage1_loss_instance_mil": 0.36941, "stage1_bag_acc": 96.9885, "stage1_neg_loss": 0.08543, "stage1_mean_ious": 0.36035, "stage1_s": 0.0, "stage1_m": 0.03397, "stage1_l": 0.15563, "stage1_h": 0.38279, "loss": 0.54001, "grad_norm": 14.16752, "time": 3.58153}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.44874, "stage0_loss_instance_mil": 0.05918, "stage0_bag_acc": 96.79211, "stage0_mean_ious": 0.39316, "stage0_s": 0.0, "stage0_m": 0.04146, "stage0_l": 0.16048, "stage0_h": 0.4227, "stage1_loss_instance_mil": 0.34534, "stage1_bag_acc": 97.96102, "stage1_neg_loss": 0.10601, "stage1_mean_ious": 0.37057, "stage1_s": 0.0, "stage1_m": 0.0365, "stage1_l": 0.15428, "stage1_h": 0.39909, "loss": 0.51053, "grad_norm": 16.96718, "time": 4.66039}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.35731, "stage0_loss_instance_mil": 0.0854, "stage0_bag_acc": 94.29143, "stage0_mean_ious": 0.35728, "stage0_s": 0.0, "stage0_m": 0.04937, "stage0_l": 0.14807, "stage0_h": 0.38342, "stage1_loss_instance_mil": 0.3508, "stage1_bag_acc": 95.74475, "stage1_neg_loss": 0.0833, "stage1_mean_ious": 0.33352, "stage1_s": 0.00015, "stage1_m": 0.03776, "stage1_l": 0.14186, "stage1_h": 0.35837, "loss": 0.5195, "grad_norm": 16.19263, "time": 4.39075}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 0.35507, "stage0_loss_instance_mil": 0.02933, "stage0_bag_acc": 98.35705, "stage0_mean_ious": 0.34219, "stage0_s": 0.0, "stage0_m": 0.03815, "stage0_l": 0.13476, "stage0_h": 0.37357, "stage1_loss_instance_mil": 0.28361, "stage1_bag_acc": 98.82091, "stage1_neg_loss": 0.08679, "stage1_mean_ious": 0.30923, "stage1_s": 0.0, "stage1_m": 0.03, "stage1_l": 0.11519, "stage1_h": 0.33944, "loss": 0.39973, "grad_norm": 12.80445, "time": 3.85245}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.3984, "stage0_loss_instance_mil": 0.0338, "stage0_bag_acc": 98.36968, "stage0_mean_ious": 0.33506, "stage0_s": 0.0, "stage0_m": 0.0365, "stage0_l": 0.10407, "stage0_h": 0.35704, "stage1_loss_instance_mil": 0.28488, "stage1_bag_acc": 98.74144, "stage1_neg_loss": 0.08991, "stage1_mean_ious": 0.29425, "stage1_s": 0.0, "stage1_m": 0.03249, "stage1_l": 0.09175, "stage1_h": 0.31374, "loss": 0.40859, "grad_norm": 13.9559, "time": 4.76232}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.33867, "stage0_loss_instance_mil": 0.02905, "stage0_bag_acc": 98.41084, "stage0_mean_ious": 0.33925, "stage0_s": 0.0, "stage0_m": 0.0251, "stage0_l": 0.1234, "stage0_h": 0.3698, "stage1_loss_instance_mil": 0.27505, "stage1_bag_acc": 98.43753, "stage1_neg_loss": 0.08568, "stage1_mean_ious": 0.30132, "stage1_s": 0.0, "stage1_m": 0.0216, "stage1_l": 0.11153, "stage1_h": 0.32968, "loss": 0.38978, "grad_norm": 13.57105, "time": 4.43937}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.30196, "stage0_loss_instance_mil": 0.01773, "stage0_bag_acc": 98.93483, "stage0_mean_ious": 0.35127, "stage0_s": 0.00136, "stage0_m": 0.01777, "stage0_l": 0.10382, "stage0_h": 0.38394, "stage1_loss_instance_mil": 0.26939, "stage1_bag_acc": 99.21189, "stage1_neg_loss": 0.08077, "stage1_mean_ious": 0.31142, "stage1_s": 0.00144, "stage1_m": 0.01577, "stage1_l": 0.08497, "stage1_h": 0.34174, "loss": 0.36789, "grad_norm": 11.39425, "time": 3.96063}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.41457, "stage0_loss_instance_mil": 0.02597, "stage0_bag_acc": 98.61317, "stage0_mean_ious": 0.36995, "stage0_s": 0.0, "stage0_m": 0.01131, "stage0_l": 0.1238, "stage0_h": 0.39941, "stage1_loss_instance_mil": 0.24413, "stage1_bag_acc": 99.01873, "stage1_neg_loss": 0.09073, "stage1_mean_ious": 0.33145, "stage1_s": 0.0, "stage1_m": 0.008, "stage1_l": 0.09352, "stage1_h": 0.36046, "loss": 0.36082, "grad_norm": 15.61926, "time": 4.59185}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.40819, "stage0_loss_instance_mil": 0.04127, "stage0_bag_acc": 96.8736, "stage0_mean_ious": 0.35024, "stage0_s": 0.0, "stage0_m": 0.04532, "stage0_l": 0.11686, "stage0_h": 0.38227, "stage1_loss_instance_mil": 0.232, "stage1_bag_acc": 98.22267, "stage1_neg_loss": 0.07649, "stage1_mean_ious": 0.30481, "stage1_s": 0.0, "stage1_m": 0.0316, "stage1_l": 0.09154, "stage1_h": 0.33579, "loss": 0.34976, "grad_norm": 11.94058, "time": 4.58127}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.40416, "stage0_loss_instance_mil": 0.01868, "stage0_bag_acc": 98.97819, "stage0_mean_ious": 0.39507, "stage0_s": 0.00126, "stage0_m": 0.02646, "stage0_l": 0.11111, "stage0_h": 0.4291, "stage1_loss_instance_mil": 0.21301, "stage1_bag_acc": 99.36484, "stage1_neg_loss": 0.07459, "stage1_mean_ious": 0.34997, "stage1_s": 0.00161, "stage1_m": 0.01531, "stage1_l": 0.08666, "stage1_h": 0.383, "loss": 0.30628, "grad_norm": 12.64896, "time": 4.18201}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.36837, "stage0_loss_instance_mil": 0.01978, "stage0_bag_acc": 99.06687, "stage0_mean_ious": 0.38083, "stage0_s": 0.0, "stage0_m": 0.03058, "stage0_l": 0.10418, "stage0_h": 0.42367, "stage1_loss_instance_mil": 0.21709, "stage1_bag_acc": 98.52869, "stage1_neg_loss": 0.07926, "stage1_mean_ious": 0.33354, "stage1_s": 0.0, "stage1_m": 0.02512, "stage1_l": 0.08346, "stage1_h": 0.37274, "loss": 0.31613, "grad_norm": 13.01477, "time": 4.72562}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.39697, "stage0_loss_instance_mil": 0.01707, "stage0_bag_acc": 99.10053, "stage0_mean_ious": 0.39851, "stage0_s": 0.0, "stage0_m": 0.02151, "stage0_l": 0.10314, "stage0_h": 0.43826, "stage1_loss_instance_mil": 0.18846, "stage1_bag_acc": 99.19934, "stage1_neg_loss": 0.07409, "stage1_mean_ious": 0.35602, "stage1_s": 0.0, "stage1_m": 0.01327, "stage1_l": 0.08619, "stage1_h": 0.39465, "loss": 0.27962, "grad_norm": 11.07751, "time": 3.94369}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.3551, "stage0_loss_instance_mil": 0.01531, "stage0_bag_acc": 99.02456, "stage0_mean_ious": 0.36567, "stage0_s": 0.0, "stage0_m": 0.02717, "stage0_l": 0.12014, "stage0_h": 0.4043, "stage1_loss_instance_mil": 0.17433, "stage1_bag_acc": 99.59927, "stage1_neg_loss": 0.07163, "stage1_mean_ious": 0.32516, "stage1_s": 0.0, "stage1_m": 0.01825, "stage1_l": 0.09046, "stage1_h": 0.36284, "loss": 0.26127, "grad_norm": 10.05125, "time": 3.94314}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.34329, "stage0_loss_instance_mil": 0.00984, "stage0_bag_acc": 99.50181, "stage0_mean_ious": 0.37617, "stage0_s": 0.0, "stage0_m": 0.03383, "stage0_l": 0.10174, "stage0_h": 0.41247, "stage1_loss_instance_mil": 0.15998, "stage1_bag_acc": 99.63131, "stage1_neg_loss": 0.05858, "stage1_mean_ious": 0.33924, "stage1_s": 0.0, "stage1_m": 0.02614, "stage1_l": 0.08245, "stage1_h": 0.37378, "loss": 0.2284, "grad_norm": 8.3532, "time": 4.72452}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.3347, "stage0_loss_instance_mil": 0.01034, "stage0_bag_acc": 99.2433, "stage0_mean_ious": 0.38523, "stage0_s": 0.0, "stage0_m": 0.03773, "stage0_l": 0.11142, "stage0_h": 0.4262, "stage1_loss_instance_mil": 0.18305, "stage1_bag_acc": 99.37336, "stage1_neg_loss": 0.06643, "stage1_mean_ious": 0.34351, "stage1_s": 0.0, "stage1_m": 0.02582, "stage1_l": 0.09455, "stage1_h": 0.38292, "loss": 0.25982, "grad_norm": 11.29481, "time": 4.15755}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.068, "bbox_mAP_50": 0.218, "bbox_mAP_75": 0.128, "bbox_mAP_s": 0.045, "bbox_mAP_m": 0.022, "bbox_mAP_l": 0.008, "bbox_mAP_copypaste": "0.068 0.218 0.128 0.045 0.022 0.008"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.2163, "stage0_loss_instance_mil": 0.01814, "stage0_bag_acc": 99.22348, "stage0_mean_ious": 0.39147, "stage0_s": 0.0, "stage0_m": 0.03415, "stage0_l": 0.09418, "stage0_h": 0.4237, "stage1_loss_instance_mil": 0.15152, "stage1_bag_acc": 99.3015, "stage1_neg_loss": 0.06047, "stage1_mean_ious": 0.3479, "stage1_s": 0.0, "stage1_m": 0.02663, "stage1_l": 0.07639, "stage1_h": 0.37781, "loss": 0.23014, "grad_norm": 8.32922, "time": 2.88896}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.38114, "stage0_loss_instance_mil": 0.01769, "stage0_bag_acc": 98.72512, "stage0_mean_ious": 0.428, "stage0_s": 0.0, "stage0_m": 0.0345, "stage0_l": 0.11969, "stage0_h": 0.47549, "stage1_loss_instance_mil": 0.1468, "stage1_bag_acc": 98.64149, "stage1_neg_loss": 0.06073, "stage1_mean_ious": 0.38772, "stage1_s": 0.0, "stage1_m": 0.02775, "stage1_l": 0.10032, "stage1_h": 0.43269, "loss": 0.22521, "grad_norm": 10.71082, "time": 4.51879}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.33701, "stage0_loss_instance_mil": 0.01329, "stage0_bag_acc": 99.02539, "stage0_mean_ious": 0.4219, "stage0_s": 0.00088, "stage0_m": 0.04171, "stage0_l": 0.10069, "stage0_h": 0.46606, "stage1_loss_instance_mil": 0.14308, "stage1_bag_acc": 99.4731, "stage1_neg_loss": 0.05526, "stage1_mean_ious": 0.38593, "stage1_s": 0.00039, "stage1_m": 0.03243, "stage1_l": 0.08811, "stage1_h": 0.4284, "loss": 0.21163, "grad_norm": 8.62035, "time": 4.18998}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.22112, "stage0_loss_instance_mil": 0.01562, "stage0_bag_acc": 99.08494, "stage0_mean_ious": 0.45345, "stage0_s": 0.0, "stage0_m": 0.04344, "stage0_l": 0.12412, "stage0_h": 0.49267, "stage1_loss_instance_mil": 0.13266, "stage1_bag_acc": 99.24921, "stage1_neg_loss": 0.05723, "stage1_mean_ious": 0.41798, "stage1_s": 0.0, "stage1_m": 0.0305, "stage1_l": 0.11569, "stage1_h": 0.45472, "loss": 0.20551, "grad_norm": 9.51539, "time": 2.86915}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.52675, "stage0_loss_instance_mil": 0.00988, "stage0_bag_acc": 99.4818, "stage0_mean_ious": 0.44701, "stage0_s": 0.0, "stage0_m": 0.03824, "stage0_l": 0.10893, "stage0_h": 0.48371, "stage1_loss_instance_mil": 0.13145, "stage1_bag_acc": 99.70614, "stage1_neg_loss": 0.05678, "stage1_mean_ious": 0.40969, "stage1_s": 0.0, "stage1_m": 0.02565, "stage1_l": 0.09145, "stage1_h": 0.4458, "loss": 0.19812, "grad_norm": 8.72321, "time": 5.76534}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.38914, "stage0_loss_instance_mil": 0.02119, "stage0_bag_acc": 98.77638, "stage0_mean_ious": 0.42754, "stage0_s": 0.00078, "stage0_m": 0.03696, "stage0_l": 0.14362, "stage0_h": 0.46839, "stage1_loss_instance_mil": 0.12546, "stage1_bag_acc": 99.14946, "stage1_neg_loss": 0.05027, "stage1_mean_ious": 0.40212, "stage1_s": 0.002, "stage1_m": 0.03111, "stage1_l": 0.12514, "stage1_h": 0.44258, "loss": 0.19692, "grad_norm": 8.09061, "time": 4.48822}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.4346, "stage0_loss_instance_mil": 0.00589, "stage0_bag_acc": 99.69272, "stage0_mean_ious": 0.44285, "stage0_s": 0.0, "stage0_m": 0.01786, "stage0_l": 0.11992, "stage0_h": 0.4806, "stage1_loss_instance_mil": 0.09786, "stage1_bag_acc": 99.78889, "stage1_neg_loss": 0.04275, "stage1_mean_ious": 0.40636, "stage1_s": 0.0, "stage1_m": 0.01661, "stage1_l": 0.10692, "stage1_h": 0.44145, "loss": 0.1465, "grad_norm": 5.26571, "time": 3.77729}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.49183, "stage0_loss_instance_mil": 0.01048, "stage0_bag_acc": 99.68974, "stage0_mean_ious": 0.41633, "stage0_s": 0.0, "stage0_m": 0.02084, "stage0_l": 0.11084, "stage0_h": 0.45839, "stage1_loss_instance_mil": 0.09874, "stage1_bag_acc": 99.6614, "stage1_neg_loss": 0.04783, "stage1_mean_ious": 0.38772, "stage1_s": 0.00026, "stage1_m": 0.01572, "stage1_l": 0.09884, "stage1_h": 0.42798, "loss": 0.15704, "grad_norm": 5.95562, "time": 5.55466}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.42749, "stage0_loss_instance_mil": 0.00608, "stage0_bag_acc": 99.80556, "stage0_mean_ious": 0.41002, "stage0_s": 0.0, "stage0_m": 0.04367, "stage0_l": 0.11781, "stage0_h": 0.44723, "stage1_loss_instance_mil": 0.09054, "stage1_bag_acc": 99.73997, "stage1_neg_loss": 0.04289, "stage1_mean_ious": 0.37977, "stage1_s": 0.0, "stage1_m": 0.03551, "stage1_l": 0.11077, "stage1_h": 0.41563, "loss": 0.13951, "grad_norm": 5.17217, "time": 4.77245}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.68874, "stage0_loss_instance_mil": 0.00435, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.42056, "stage0_s": 0.0, "stage0_m": 0.01153, "stage0_l": 0.08971, "stage0_h": 0.45095, "stage1_loss_instance_mil": 0.08311, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.04788, "stage1_mean_ious": 0.38774, "stage1_s": 0.0, "stage1_m": 0.0105, "stage1_l": 0.08031, "stage1_h": 0.41686, "loss": 0.13533, "grad_norm": 5.5353, "time": 5.03598}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.92325, "stage0_loss_instance_mil": 0.00331, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.42418, "stage0_s": 0.0, "stage0_m": 0.03159, "stage0_l": 0.10188, "stage0_h": 0.46369, "stage1_loss_instance_mil": 0.09044, "stage1_bag_acc": 99.7614, "stage1_neg_loss": 0.04484, "stage1_mean_ious": 0.39357, "stage1_s": 0.0, "stage1_m": 0.02395, "stage1_l": 0.08247, "stage1_h": 0.43251, "loss": 0.13858, "grad_norm": 5.37901, "time": 5.1753}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.41341, "stage0_loss_instance_mil": 0.0101, "stage0_bag_acc": 99.54553, "stage0_mean_ious": 0.41129, "stage0_s": 0.0, "stage0_m": 0.05332, "stage0_l": 0.11558, "stage0_h": 0.46485, "stage1_loss_instance_mil": 0.09651, "stage1_bag_acc": 99.74603, "stage1_neg_loss": 0.05056, "stage1_mean_ious": 0.38028, "stage1_s": 0.0, "stage1_m": 0.03971, "stage1_l": 0.1074, "stage1_h": 0.42994, "loss": 0.15717, "grad_norm": 6.7318, "time": 3.49346}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.56776, "stage0_loss_instance_mil": 0.00696, "stage0_bag_acc": 99.43392, "stage0_mean_ious": 0.4164, "stage0_s": 0.0, "stage0_m": 0.03156, "stage0_l": 0.10611, "stage0_h": 0.4627, "stage1_loss_instance_mil": 0.0945, "stage1_bag_acc": 99.32281, "stage1_neg_loss": 0.04244, "stage1_mean_ious": 0.38409, "stage1_s": 0.0, "stage1_m": 0.02276, "stage1_l": 0.09393, "stage1_h": 0.42811, "loss": 0.1439, "grad_norm": 6.05652, "time": 5.48171}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.50887, "stage0_loss_instance_mil": 0.00472, "stage0_bag_acc": 99.68043, "stage0_mean_ious": 0.40942, "stage0_s": 0.0, "stage0_m": 0.02566, "stage0_l": 0.09804, "stage0_h": 0.4541, "stage1_loss_instance_mil": 0.08229, "stage1_bag_acc": 99.79808, "stage1_neg_loss": 0.04631, "stage1_mean_ious": 0.37874, "stage1_s": 0.0, "stage1_m": 0.01813, "stage1_l": 0.08372, "stage1_h": 0.42184, "loss": 0.13332, "grad_norm": 5.12978, "time": 5.20907}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.16295, "stage0_loss_instance_mil": 0.00544, "stage0_bag_acc": 99.82909, "stage0_mean_ious": 0.41018, "stage0_s": 0.0, "stage0_m": 0.02526, "stage0_l": 0.15678, "stage0_h": 0.45302, "stage1_loss_instance_mil": 0.08442, "stage1_bag_acc": 99.81385, "stage1_neg_loss": 0.04121, "stage1_mean_ious": 0.37512, "stage1_s": 0.0, "stage1_m": 0.02048, "stage1_l": 0.14039, "stage1_h": 0.41632, "loss": 0.13106, "grad_norm": 5.20661, "time": 2.4514}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.50954, "stage0_loss_instance_mil": 0.00374, "stage0_bag_acc": 99.91304, "stage0_mean_ious": 0.41796, "stage0_s": 0.0, "stage0_m": 0.03275, "stage0_l": 0.12341, "stage0_h": 0.46611, "stage1_loss_instance_mil": 0.07998, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.04615, "stage1_mean_ious": 0.38604, "stage1_s": 0.0, "stage1_m": 0.02413, "stage1_l": 0.10873, "stage1_h": 0.43269, "loss": 0.12987, "grad_norm": 5.37345, "time": 4.96732}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.35314, "stage0_loss_instance_mil": 0.00223, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.42779, "stage0_s": 0.0, "stage0_m": 0.02185, "stage0_l": 0.11688, "stage0_h": 0.46601, "stage1_loss_instance_mil": 0.08436, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04312, "stage1_mean_ious": 0.39259, "stage1_s": 0.0, "stage1_m": 0.01683, "stage1_l": 0.1061, "stage1_h": 0.42819, "loss": 0.12971, "grad_norm": 5.15698, "time": 4.47515}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.07955, "stage0_loss_instance_mil": 0.00718, "stage0_bag_acc": 99.77143, "stage0_mean_ious": 0.4022, "stage0_s": 0.0, "stage0_m": 0.03164, "stage0_l": 0.10358, "stage0_h": 0.44118, "stage1_loss_instance_mil": 0.08148, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.03912, "stage1_mean_ious": 0.37066, "stage1_s": 0.0, "stage1_m": 0.02611, "stage1_l": 0.08575, "stage1_h": 0.40859, "loss": 0.12778, "grad_norm": 4.51823, "time": 1.91072}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.07, "bbox_mAP_50": 0.229, "bbox_mAP_75": 0.127, "bbox_mAP_s": 0.044, "bbox_mAP_m": 0.02, "bbox_mAP_l": 0.007, "bbox_mAP_copypaste": "0.070 0.229 0.127 0.044 0.020 0.007"}
