{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09959, "stage0_loss_instance_mil": 0.7278, "stage0_bag_acc": 8.19246, "stage0_mean_ious": 0.33077, "stage0_s": 0.0, "stage0_m": 0.02429, "stage0_l": 0.17744, "stage0_h": 0.34595, "stage1_loss_instance_mil": 0.16113, "stage1_bag_acc": 15.83909, "stage1_neg_loss": 0.0016, "stage1_mean_ious": 0.3427, "stage1_s": 0.0, "stage1_m": 0.02414, "stage1_l": 0.20731, "stage1_h": 0.35521, "loss": 0.89052, "grad_norm": 3.27319, "time": 1.71163}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0438, "stage0_loss_instance_mil": 0.62311, "stage0_bag_acc": 54.79336, "stage0_mean_ious": 0.35567, "stage0_s": 0.00096, "stage0_m": 0.01399, "stage0_l": 0.20728, "stage0_h": 0.37259, "stage1_loss_instance_mil": 0.21555, "stage1_bag_acc": 19.17501, "stage1_neg_loss": 0.00336, "stage1_mean_ious": 0.36306, "stage1_s": 0.00117, "stage1_m": 0.01654, "stage1_l": 0.22518, "stage1_h": 0.37769, "loss": 0.84202, "grad_norm": 3.64942, "time": 1.69339}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.0443, "stage0_loss_instance_mil": 0.26994, "stage0_bag_acc": 85.98803, "stage0_mean_ious": 0.4298, "stage0_s": 0.0, "stage0_m": 0.02809, "stage0_l": 0.24017, "stage0_h": 0.45294, "stage1_loss_instance_mil": 0.30792, "stage1_bag_acc": 77.82568, "stage1_neg_loss": 0.06014, "stage1_mean_ious": 0.43036, "stage1_s": 0.0, "stage1_m": 0.02769, "stage1_l": 0.24905, "stage1_h": 0.45217, "loss": 0.63801, "grad_norm": 9.62157, "time": 1.70821}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.10245, "stage0_loss_instance_mil": 0.07164, "stage0_bag_acc": 96.66867, "stage0_mean_ious": 0.40696, "stage0_s": 0.0, "stage0_m": 0.05419, "stage0_l": 0.16741, "stage0_h": 0.43367, "stage1_loss_instance_mil": 0.30904, "stage1_bag_acc": 96.97859, "stage1_neg_loss": 0.08623, "stage1_mean_ious": 0.40848, "stage1_s": 0.0, "stage1_m": 0.04574, "stage1_l": 0.16219, "stage1_h": 0.43653, "loss": 0.46692, "grad_norm": 13.82186, "time": 1.78585}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04416, "stage0_loss_instance_mil": 0.08601, "stage0_bag_acc": 94.97062, "stage0_mean_ious": 0.40982, "stage0_s": 0.0, "stage0_m": 0.05759, "stage0_l": 0.16986, "stage0_h": 0.44199, "stage1_loss_instance_mil": 0.28333, "stage1_bag_acc": 96.38503, "stage1_neg_loss": 0.08237, "stage1_mean_ious": 0.3966, "stage1_s": 0.0, "stage1_m": 0.04963, "stage1_l": 0.16072, "stage1_h": 0.42965, "loss": 0.45171, "grad_norm": 15.0394, "time": 1.65652}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04478, "stage0_loss_instance_mil": 0.07011, "stage0_bag_acc": 96.22147, "stage0_mean_ious": 0.44541, "stage0_s": 0.0, "stage0_m": 0.0317, "stage0_l": 0.16936, "stage0_h": 0.46938, "stage1_loss_instance_mil": 0.26713, "stage1_bag_acc": 97.13744, "stage1_neg_loss": 0.08688, "stage1_mean_ious": 0.4262, "stage1_s": 0.0, "stage1_m": 0.02678, "stage1_l": 0.16252, "stage1_h": 0.44865, "loss": 0.42412, "grad_norm": 15.54059, "time": 1.69567}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09694, "stage0_loss_instance_mil": 0.04425, "stage0_bag_acc": 97.396, "stage0_mean_ious": 0.42023, "stage0_s": 0.0, "stage0_m": 0.04466, "stage0_l": 0.15849, "stage0_h": 0.45677, "stage1_loss_instance_mil": 0.25348, "stage1_bag_acc": 97.99822, "stage1_neg_loss": 0.07839, "stage1_mean_ious": 0.39659, "stage1_s": 0.0, "stage1_m": 0.03177, "stage1_l": 0.16436, "stage1_h": 0.42841, "loss": 0.37612, "grad_norm": 15.71457, "time": 1.72859}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04497, "stage0_loss_instance_mil": 0.04934, "stage0_bag_acc": 96.50309, "stage0_mean_ious": 0.41139, "stage0_s": 0.0, "stage0_m": 0.05145, "stage0_l": 0.1751, "stage0_h": 0.44259, "stage1_loss_instance_mil": 0.23839, "stage1_bag_acc": 97.89846, "stage1_neg_loss": 0.07646, "stage1_mean_ious": 0.38684, "stage1_s": 0.0, "stage1_m": 0.04297, "stage1_l": 0.16506, "stage1_h": 0.41722, "loss": 0.36418, "grad_norm": 14.35819, "time": 1.69996}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04586, "stage0_loss_instance_mil": 0.03399, "stage0_bag_acc": 97.90322, "stage0_mean_ious": 0.40822, "stage0_s": 0.0, "stage0_m": 0.02833, "stage0_l": 0.17587, "stage0_h": 0.42959, "stage1_loss_instance_mil": 0.26104, "stage1_bag_acc": 98.41072, "stage1_neg_loss": 0.07588, "stage1_mean_ious": 0.38819, "stage1_s": 0.0, "stage1_m": 0.02039, "stage1_l": 0.16632, "stage1_h": 0.40916, "loss": 0.3709, "grad_norm": 13.56542, "time": 1.70611}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.10186, "stage0_loss_instance_mil": 0.03268, "stage0_bag_acc": 97.43926, "stage0_mean_ious": 0.47686, "stage0_s": 0.0, "stage0_m": 0.0414, "stage0_l": 0.19015, "stage0_h": 0.51091, "stage1_loss_instance_mil": 0.20939, "stage1_bag_acc": 98.56066, "stage1_neg_loss": 0.0768, "stage1_mean_ious": 0.44518, "stage1_s": 0.0, "stage1_m": 0.03504, "stage1_l": 0.17724, "stage1_h": 0.47758, "loss": 0.31888, "grad_norm": 15.30238, "time": 1.75412}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04609, "stage0_loss_instance_mil": 0.0275, "stage0_bag_acc": 98.54542, "stage0_mean_ious": 0.41273, "stage0_s": 0.0, "stage0_m": 0.0309, "stage0_l": 0.16835, "stage0_h": 0.44618, "stage1_loss_instance_mil": 0.20504, "stage1_bag_acc": 99.3717, "stage1_neg_loss": 0.07194, "stage1_mean_ious": 0.38753, "stage1_s": 0.0, "stage1_m": 0.0241, "stage1_l": 0.16639, "stage1_h": 0.41922, "loss": 0.30447, "grad_norm": 14.14464, "time": 1.70859}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04423, "stage0_loss_instance_mil": 0.02475, "stage0_bag_acc": 98.59011, "stage0_mean_ious": 0.41559, "stage0_s": 0.0, "stage0_m": 0.03933, "stage0_l": 0.1419, "stage0_h": 0.45806, "stage1_loss_instance_mil": 0.21416, "stage1_bag_acc": 99.37213, "stage1_neg_loss": 0.08315, "stage1_mean_ious": 0.38793, "stage1_s": 0.0, "stage1_m": 0.03172, "stage1_l": 0.13323, "stage1_h": 0.42898, "loss": 0.32205, "grad_norm": 14.65212, "time": 1.67785}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09766, "stage0_loss_instance_mil": 0.02461, "stage0_bag_acc": 98.3786, "stage0_mean_ious": 0.41079, "stage0_s": 0.00187, "stage0_m": 0.04622, "stage0_l": 0.13617, "stage0_h": 0.44953, "stage1_loss_instance_mil": 0.18636, "stage1_bag_acc": 98.81132, "stage1_neg_loss": 0.06716, "stage1_mean_ious": 0.38231, "stage1_s": 0.00163, "stage1_m": 0.04084, "stage1_l": 0.13088, "stage1_h": 0.41816, "loss": 0.27813, "grad_norm": 11.8192, "time": 1.73158}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04427, "stage0_loss_instance_mil": 0.01571, "stage0_bag_acc": 99.05483, "stage0_mean_ious": 0.42963, "stage0_s": 0.0, "stage0_m": 0.03647, "stage0_l": 0.16374, "stage0_h": 0.46227, "stage1_loss_instance_mil": 0.15531, "stage1_bag_acc": 99.39424, "stage1_neg_loss": 0.06074, "stage1_mean_ious": 0.39769, "stage1_s": 0.0, "stage1_m": 0.02757, "stage1_l": 0.16027, "stage1_h": 0.42766, "loss": 0.23176, "grad_norm": 10.22254, "time": 1.68697}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04526, "stage0_loss_instance_mil": 0.01547, "stage0_bag_acc": 98.84729, "stage0_mean_ious": 0.35531, "stage0_s": 0.0, "stage0_m": 0.03138, "stage0_l": 0.14035, "stage0_h": 0.39519, "stage1_loss_instance_mil": 0.17206, "stage1_bag_acc": 99.44284, "stage1_neg_loss": 0.06724, "stage1_mean_ious": 0.33397, "stage1_s": 0.0, "stage1_m": 0.02228, "stage1_l": 0.1326, "stage1_h": 0.37251, "loss": 0.25477, "grad_norm": 11.26647, "time": 1.69737}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0965, "stage0_loss_instance_mil": 0.02256, "stage0_bag_acc": 98.97621, "stage0_mean_ious": 0.32476, "stage0_s": 0.0, "stage0_m": 0.05253, "stage0_l": 0.10348, "stage0_h": 0.35744, "stage1_loss_instance_mil": 0.16407, "stage1_bag_acc": 99.03153, "stage1_neg_loss": 0.05944, "stage1_mean_ious": 0.30403, "stage1_s": 0.0, "stage1_m": 0.03965, "stage1_l": 0.09285, "stage1_h": 0.33676, "loss": 0.24608, "grad_norm": 9.6685, "time": 1.71452}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04456, "stage0_loss_instance_mil": 0.02525, "stage0_bag_acc": 98.00357, "stage0_mean_ious": 0.3826, "stage0_s": 0.0, "stage0_m": 0.02486, "stage0_l": 0.12484, "stage0_h": 0.4094, "stage1_loss_instance_mil": 0.16101, "stage1_bag_acc": 98.97132, "stage1_neg_loss": 0.06894, "stage1_mean_ious": 0.35923, "stage1_s": 0.0, "stage1_m": 0.02223, "stage1_l": 0.11199, "stage1_h": 0.38485, "loss": 0.25521, "grad_norm": 11.05003, "time": 1.67946}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04406, "stage0_loss_instance_mil": 0.01387, "stage0_bag_acc": 99.23871, "stage0_mean_ious": 0.41069, "stage0_s": 0.0, "stage0_m": 0.03638, "stage0_l": 0.14815, "stage0_h": 0.44888, "stage1_loss_instance_mil": 0.14635, "stage1_bag_acc": 99.43693, "stage1_neg_loss": 0.06351, "stage1_mean_ious": 0.38477, "stage1_s": 0.0, "stage1_m": 0.02699, "stage1_l": 0.135, "stage1_h": 0.42252, "loss": 0.22373, "grad_norm": 11.32168, "time": 1.66637}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.069, "bbox_mAP_50": 0.239, "bbox_mAP_75": 0.129, "bbox_mAP_s": 0.041, "bbox_mAP_m": 0.018, "bbox_mAP_l": 0.007, "bbox_mAP_copypaste": "0.069 0.239 0.129 0.041 0.018 0.007"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09666, "stage0_loss_instance_mil": 0.01309, "stage0_bag_acc": 99.58052, "stage0_mean_ious": 0.3595, "stage0_s": 0.0, "stage0_m": 0.02872, "stage0_l": 0.14556, "stage0_h": 0.38505, "stage1_loss_instance_mil": 0.13267, "stage1_bag_acc": 99.76667, "stage1_neg_loss": 0.05442, "stage1_mean_ious": 0.34492, "stage1_s": 0.0, "stage1_m": 0.02081, "stage1_l": 0.13583, "stage1_h": 0.37029, "loss": 0.20017, "grad_norm": 8.25104, "time": 1.70711}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04367, "stage0_loss_instance_mil": 0.00793, "stage0_bag_acc": 99.61498, "stage0_mean_ious": 0.35421, "stage0_s": 0.0, "stage0_m": 0.04326, "stage0_l": 0.15249, "stage0_h": 0.39833, "stage1_loss_instance_mil": 0.13554, "stage1_bag_acc": 99.61018, "stage1_neg_loss": 0.05568, "stage1_mean_ious": 0.33661, "stage1_s": 0.0, "stage1_m": 0.03674, "stage1_l": 0.14199, "stage1_h": 0.37999, "loss": 0.19916, "grad_norm": 8.56376, "time": 1.67386}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04307, "stage0_loss_instance_mil": 0.01769, "stage0_bag_acc": 98.63402, "stage0_mean_ious": 0.36994, "stage0_s": 0.0, "stage0_m": 0.02262, "stage0_l": 0.14944, "stage0_h": 0.394, "stage1_loss_instance_mil": 0.14165, "stage1_bag_acc": 98.73835, "stage1_neg_loss": 0.05888, "stage1_mean_ious": 0.35051, "stage1_s": 0.0, "stage1_m": 0.01445, "stage1_l": 0.13497, "stage1_h": 0.37476, "loss": 0.21823, "grad_norm": 9.08631, "time": 1.67657}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0962, "stage0_loss_instance_mil": 0.01282, "stage0_bag_acc": 98.98319, "stage0_mean_ious": 0.38442, "stage0_s": 0.0, "stage0_m": 0.03571, "stage0_l": 0.12723, "stage0_h": 0.418, "stage1_loss_instance_mil": 0.12596, "stage1_bag_acc": 99.70909, "stage1_neg_loss": 0.0643, "stage1_mean_ious": 0.35971, "stage1_s": 0.0, "stage1_m": 0.02912, "stage1_l": 0.11322, "stage1_h": 0.39226, "loss": 0.20307, "grad_norm": 10.87552, "time": 1.72507}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04375, "stage0_loss_instance_mil": 0.02024, "stage0_bag_acc": 98.83473, "stage0_mean_ious": 0.38703, "stage0_s": 0.0, "stage0_m": 0.0467, "stage0_l": 0.15332, "stage0_h": 0.43053, "stage1_loss_instance_mil": 0.14036, "stage1_bag_acc": 99.39757, "stage1_neg_loss": 0.05258, "stage1_mean_ious": 0.35803, "stage1_s": 0.0, "stage1_m": 0.03041, "stage1_l": 0.14387, "stage1_h": 0.39887, "loss": 0.21318, "grad_norm": 9.12578, "time": 1.68319}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04329, "stage0_loss_instance_mil": 0.01444, "stage0_bag_acc": 99.30148, "stage0_mean_ious": 0.40584, "stage0_s": 0.0, "stage0_m": 0.02242, "stage0_l": 0.137, "stage0_h": 0.43223, "stage1_loss_instance_mil": 0.10612, "stage1_bag_acc": 99.04315, "stage1_neg_loss": 0.04608, "stage1_mean_ious": 0.38054, "stage1_s": 0.0, "stage1_m": 0.01382, "stage1_l": 0.12384, "stage1_h": 0.40663, "loss": 0.16664, "grad_norm": 7.1714, "time": 1.65906}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09738, "stage0_loss_instance_mil": 0.01317, "stage0_bag_acc": 98.72527, "stage0_mean_ious": 0.38387, "stage0_s": 0.0, "stage0_m": 0.02146, "stage0_l": 0.14527, "stage0_h": 0.41387, "stage1_loss_instance_mil": 0.08805, "stage1_bag_acc": 99.38961, "stage1_neg_loss": 0.03769, "stage1_mean_ious": 0.35882, "stage1_s": 0.0, "stage1_m": 0.015, "stage1_l": 0.13746, "stage1_h": 0.38711, "loss": 0.13891, "grad_norm": 5.02538, "time": 1.73784}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04142, "stage0_loss_instance_mil": 0.00718, "stage0_bag_acc": 99.70458, "stage0_mean_ious": 0.37539, "stage0_s": 0.00188, "stage0_m": 0.04073, "stage0_l": 0.14481, "stage0_h": 0.41294, "stage1_loss_instance_mil": 0.08739, "stage1_bag_acc": 99.78363, "stage1_neg_loss": 0.04332, "stage1_mean_ious": 0.35092, "stage1_s": 0.00217, "stage1_m": 0.03248, "stage1_l": 0.1281, "stage1_h": 0.38679, "loss": 0.13789, "grad_norm": 4.8311, "time": 1.64328}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04488, "stage0_loss_instance_mil": 0.00413, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.38048, "stage0_s": 0.0, "stage0_m": 0.04243, "stage0_l": 0.15653, "stage0_h": 0.41153, "stage1_loss_instance_mil": 0.08618, "stage1_bag_acc": 99.78409, "stage1_neg_loss": 0.04329, "stage1_mean_ious": 0.35554, "stage1_s": 0.0, "stage1_m": 0.03286, "stage1_l": 0.14188, "stage1_h": 0.38733, "loss": 0.13359, "grad_norm": 5.51844, "time": 1.72064}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09906, "stage0_loss_instance_mil": 0.00465, "stage0_bag_acc": 99.78363, "stage0_mean_ious": 0.3916, "stage0_s": 0.0, "stage0_m": 0.03112, "stage0_l": 0.12921, "stage0_h": 0.42664, "stage1_loss_instance_mil": 0.08335, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03846, "stage1_mean_ious": 0.36518, "stage1_s": 0.0, "stage1_m": 0.02019, "stage1_l": 0.12004, "stage1_h": 0.39984, "loss": 0.12645, "grad_norm": 4.83863, "time": 1.72236}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04437, "stage0_loss_instance_mil": 0.00737, "stage0_bag_acc": 99.78889, "stage0_mean_ious": 0.36374, "stage0_s": 0.0, "stage0_m": 0.02699, "stage0_l": 0.1378, "stage0_h": 0.3938, "stage1_loss_instance_mil": 0.08287, "stage1_bag_acc": 99.69798, "stage1_neg_loss": 0.04185, "stage1_mean_ious": 0.3389, "stage1_s": 0.0, "stage1_m": 0.01928, "stage1_l": 0.12624, "stage1_h": 0.36791, "loss": 0.13209, "grad_norm": 5.42587, "time": 1.6948}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04447, "stage0_loss_instance_mil": 0.00639, "stage0_bag_acc": 99.47685, "stage0_mean_ious": 0.36882, "stage0_s": 0.0, "stage0_m": 0.01752, "stage0_l": 0.1381, "stage0_h": 0.40089, "stage1_loss_instance_mil": 0.0782, "stage1_bag_acc": 99.54338, "stage1_neg_loss": 0.04323, "stage1_mean_ious": 0.3435, "stage1_s": 0.0, "stage1_m": 0.01234, "stage1_l": 0.12745, "stage1_h": 0.37317, "loss": 0.12781, "grad_norm": 6.13969, "time": 1.69738}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09703, "stage0_loss_instance_mil": 0.00499, "stage0_bag_acc": 99.78711, "stage0_mean_ious": 0.35514, "stage0_s": 0.0, "stage0_m": 0.03434, "stage0_l": 0.11731, "stage0_h": 0.38657, "stage1_loss_instance_mil": 0.09114, "stage1_bag_acc": 99.70811, "stage1_neg_loss": 0.0513, "stage1_mean_ious": 0.33255, "stage1_s": 0.0, "stage1_m": 0.02328, "stage1_l": 0.10708, "stage1_h": 0.36235, "loss": 0.14742, "grad_norm": 7.06804, "time": 1.74509}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04446, "stage0_loss_instance_mil": 0.00467, "stage0_bag_acc": 99.78804, "stage0_mean_ious": 0.37977, "stage0_s": 0.0, "stage0_m": 0.02686, "stage0_l": 0.10795, "stage0_h": 0.40937, "stage1_loss_instance_mil": 0.08848, "stage1_bag_acc": 99.70016, "stage1_neg_loss": 0.03954, "stage1_mean_ious": 0.35287, "stage1_s": 0.0, "stage1_m": 0.01906, "stage1_l": 0.10024, "stage1_h": 0.38028, "loss": 0.13269, "grad_norm": 5.46489, "time": 1.69937}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04313, "stage0_loss_instance_mil": 0.00718, "stage0_bag_acc": 99.68429, "stage0_mean_ious": 0.38027, "stage0_s": 0.0, "stage0_m": 0.02869, "stage0_l": 0.14372, "stage0_h": 0.41395, "stage1_loss_instance_mil": 0.08063, "stage1_bag_acc": 99.5568, "stage1_neg_loss": 0.03767, "stage1_mean_ious": 0.35893, "stage1_s": 0.0, "stage1_m": 0.02111, "stage1_l": 0.13314, "stage1_h": 0.39172, "loss": 0.12547, "grad_norm": 5.22799, "time": 1.64364}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09641, "stage0_loss_instance_mil": 0.00256, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.35176, "stage0_s": 0.0, "stage0_m": 0.02052, "stage0_l": 0.13019, "stage0_h": 0.39102, "stage1_loss_instance_mil": 0.08425, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.03427, "stage1_mean_ious": 0.33396, "stage1_s": 0.0, "stage1_m": 0.01725, "stage1_l": 0.11908, "stage1_h": 0.37203, "loss": 0.12108, "grad_norm": 4.44046, "time": 1.71674}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04505, "stage0_loss_instance_mil": 0.0082, "stage0_bag_acc": 99.625, "stage0_mean_ious": 0.38222, "stage0_s": 0.0, "stage0_m": 0.00847, "stage0_l": 0.12256, "stage0_h": 0.41134, "stage1_loss_instance_mil": 0.08233, "stage1_bag_acc": 99.625, "stage1_neg_loss": 0.03559, "stage1_mean_ious": 0.35685, "stage1_s": 0.0, "stage1_m": 0.00519, "stage1_l": 0.11232, "stage1_h": 0.3837, "loss": 0.12612, "grad_norm": 4.4574, "time": 1.71922}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04432, "stage0_loss_instance_mil": 0.00357, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.37368, "stage0_s": 0.00187, "stage0_m": 0.02981, "stage0_l": 0.14378, "stage0_h": 0.40454, "stage1_loss_instance_mil": 0.08161, "stage1_bag_acc": 99.80193, "stage1_neg_loss": 0.03744, "stage1_mean_ious": 0.35055, "stage1_s": 0.00213, "stage1_m": 0.01987, "stage1_l": 0.12984, "stage1_h": 0.38067, "loss": 0.12262, "grad_norm": 5.19001, "time": 1.70144}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.075, "bbox_mAP_50": 0.253, "bbox_mAP_75": 0.137, "bbox_mAP_s": 0.046, "bbox_mAP_m": 0.024, "bbox_mAP_l": 0.007, "bbox_mAP_copypaste": "0.075 0.253 0.137 0.046 0.024 0.007"}
