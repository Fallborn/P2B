{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_val.json',\n        img_prefix='data/coco/images/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 16562, "data_time": 0.08593, "stage0_loss_instance_mil": 0.66694, "stage0_bag_acc": 26.7266, "stage0_mean_ious": 0.31503, "stage0_s": 0.0, "stage0_m": 0.03631, "stage0_l": 0.25089, "stage0_h": 0.31289, "stage1_loss_instance_mil": 0.18363, "stage1_bag_acc": 22.14778, "stage1_neg_loss": 0.0046, "stage1_mean_ious": 0.30352, "stage1_s": 0.0, "stage1_m": 0.02944, "stage1_l": 0.23638, "stage1_h": 0.30257, "loss": 0.85518, "grad_norm": 3.38781, "time": 1.268}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 16562, "data_time": 0.03428, "stage0_loss_instance_mil": 0.43253, "stage0_bag_acc": 61.65325, "stage0_mean_ious": 0.39601, "stage0_s": 0.0, "stage0_m": 0.07171, "stage0_l": 0.30954, "stage0_h": 0.39579, "stage1_loss_instance_mil": 0.23652, "stage1_bag_acc": 53.18321, "stage1_neg_loss": 0.03023, "stage1_mean_ious": 0.3622, "stage1_s": 0.0, "stage1_m": 0.06648, "stage1_l": 0.29562, "stage1_h": 0.36127, "loss": 0.69928, "grad_norm": 4.48958, "time": 1.19791}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 16571, "data_time": 0.03584, "stage0_loss_instance_mil": 0.22885, "stage0_bag_acc": 86.23821, "stage0_mean_ious": 0.32562, "stage0_s": 0.0, "stage0_m": 0.10042, "stage0_l": 0.24403, "stage0_h": 0.32786, "stage1_loss_instance_mil": 0.42962, "stage1_bag_acc": 63.75208, "stage1_neg_loss": 0.09996, "stage1_mean_ious": 0.32646, "stage1_s": 0.0, "stage1_m": 0.09249, "stage1_l": 0.24103, "stage1_h": 0.33056, "loss": 0.75843, "grad_norm": 10.42808, "time": 1.19116}
{"mode": "val", "epoch": 1, "iter": 180, "lr": 0.00359, "eval_iter_num": 720, "bbox_mAP": 0.009, "bbox_mAP_50": 0.039, "bbox_mAP_75": 0.014, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.002, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.009 0.039 0.014 0.004 0.002 0.001"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00459, "memory": 16578, "data_time": 0.08729, "stage0_loss_instance_mil": 0.13558, "stage0_bag_acc": 91.33701, "stage0_mean_ious": 0.41765, "stage0_s": 0.0, "stage0_m": 0.06139, "stage0_l": 0.22561, "stage0_h": 0.42836, "stage1_loss_instance_mil": 0.32333, "stage1_bag_acc": 83.89934, "stage1_neg_loss": 0.06547, "stage1_mean_ious": 0.40535, "stage1_s": 0.0, "stage1_m": 0.06016, "stage1_l": 0.22504, "stage1_h": 0.41597, "loss": 0.52438, "grad_norm": 5.40044, "time": 1.23806}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00558, "memory": 16578, "data_time": 0.03663, "stage0_loss_instance_mil": 0.12552, "stage0_bag_acc": 93.15838, "stage0_mean_ious": 0.46179, "stage0_s": 0.0, "stage0_m": 0.13374, "stage0_l": 0.28891, "stage0_h": 0.47182, "stage1_loss_instance_mil": 0.34307, "stage1_bag_acc": 79.10087, "stage1_neg_loss": 0.06597, "stage1_mean_ious": 0.44769, "stage1_s": 0.0, "stage1_m": 0.1286, "stage1_l": 0.27969, "stage1_h": 0.45715, "loss": 0.53456, "grad_norm": 4.61476, "time": 1.22681}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00658, "memory": 16578, "data_time": 0.0378, "stage0_loss_instance_mil": 0.198, "stage0_bag_acc": 87.4763, "stage0_mean_ious": 0.46217, "stage0_s": 0.0, "stage0_m": 0.04347, "stage0_l": 0.32668, "stage0_h": 0.47057, "stage1_loss_instance_mil": 0.29702, "stage1_bag_acc": 78.47343, "stage1_neg_loss": 0.0497, "stage1_mean_ious": 0.46875, "stage1_s": 0.0, "stage1_m": 0.041, "stage1_l": 0.34909, "stage1_h": 0.47374, "loss": 0.54472, "grad_norm": 4.64422, "time": 1.2093}
{"mode": "val", "epoch": 2, "iter": 180, "lr": 0.00718, "eval_iter_num": 720, "bbox_mAP": 0.008, "bbox_mAP_50": 0.039, "bbox_mAP_75": 0.011, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.001, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.008 0.039 0.011 0.003 0.001 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00818, "memory": 16578, "data_time": 0.08661, "stage0_loss_instance_mil": 0.13223, "stage0_bag_acc": 92.20751, "stage0_mean_ious": 0.509, "stage0_s": 0.0, "stage0_m": 0.05228, "stage0_l": 0.27075, "stage0_h": 0.52768, "stage1_loss_instance_mil": 0.30664, "stage1_bag_acc": 77.20935, "stage1_neg_loss": 0.05302, "stage1_mean_ious": 0.51638, "stage1_s": 0.0, "stage1_m": 0.06255, "stage1_l": 0.31606, "stage1_h": 0.52986, "loss": 0.49189, "grad_norm": 3.64703, "time": 1.26575}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00918, "memory": 16578, "data_time": 0.041, "stage0_loss_instance_mil": 0.12499, "stage0_bag_acc": 93.21157, "stage0_mean_ious": 0.46359, "stage0_s": 0.0, "stage0_m": 0.06116, "stage0_l": 0.31896, "stage0_h": 0.4664, "stage1_loss_instance_mil": 0.25488, "stage1_bag_acc": 81.47089, "stage1_neg_loss": 0.04801, "stage1_mean_ious": 0.4745, "stage1_s": 0.0, "stage1_m": 0.0738, "stage1_l": 0.3371, "stage1_h": 0.47546, "loss": 0.42789, "grad_norm": 3.62122, "time": 1.25556}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 16578, "data_time": 0.03969, "stage0_loss_instance_mil": 0.19602, "stage0_bag_acc": 86.97405, "stage0_mean_ious": 0.51639, "stage0_s": 0.0, "stage0_m": 0.06436, "stage0_l": 0.3018, "stage0_h": 0.54112, "stage1_loss_instance_mil": 0.1877, "stage1_bag_acc": 87.4877, "stage1_neg_loss": 0.05768, "stage1_mean_ious": 0.52447, "stage1_s": 0.0, "stage1_m": 0.06953, "stage1_l": 0.32542, "stage1_h": 0.54674, "loss": 0.4414, "grad_norm": 4.43262, "time": 1.18217}
{"mode": "val", "epoch": 3, "iter": 180, "lr": 0.01, "eval_iter_num": 720, "bbox_mAP": 0.002, "bbox_mAP_50": 0.01, "bbox_mAP_75": 0.004, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.002 0.010 0.004 0.001 0.000 0.000"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 16578, "data_time": 0.09145, "stage0_loss_instance_mil": 0.16798, "stage0_bag_acc": 88.77389, "stage0_mean_ious": 0.48642, "stage0_s": 0.0, "stage0_m": 0.11276, "stage0_l": 0.35396, "stage0_h": 0.49122, "stage1_loss_instance_mil": 0.1952, "stage1_bag_acc": 87.13657, "stage1_neg_loss": 0.04369, "stage1_mean_ious": 0.49418, "stage1_s": 0.0, "stage1_m": 0.11754, "stage1_l": 0.36871, "stage1_h": 0.49725, "loss": 0.40687, "grad_norm": 4.0671, "time": 1.26842}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 16578, "data_time": 0.03898, "stage0_loss_instance_mil": 0.09416, "stage0_bag_acc": 93.63999, "stage0_mean_ious": 0.5203, "stage0_s": 0.0, "stage0_m": 0.08082, "stage0_l": 0.37155, "stage0_h": 0.53223, "stage1_loss_instance_mil": 0.16411, "stage1_bag_acc": 92.34561, "stage1_neg_loss": 0.05341, "stage1_mean_ious": 0.51581, "stage1_s": 0.0, "stage1_m": 0.08917, "stage1_l": 0.39561, "stage1_h": 0.52258, "loss": 0.31167, "grad_norm": 3.73964, "time": 1.19956}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 16578, "data_time": 0.03989, "stage0_loss_instance_mil": 0.08733, "stage0_bag_acc": 94.08866, "stage0_mean_ious": 0.51167, "stage0_s": 0.0, "stage0_m": 0.06459, "stage0_l": 0.3825, "stage0_h": 0.52426, "stage1_loss_instance_mil": 0.13072, "stage1_bag_acc": 94.0475, "stage1_neg_loss": 0.04031, "stage1_mean_ious": 0.50683, "stage1_s": 0.0, "stage1_m": 0.06976, "stage1_l": 0.39484, "stage1_h": 0.51608, "loss": 0.25835, "grad_norm": 3.1505, "time": 1.21684}
