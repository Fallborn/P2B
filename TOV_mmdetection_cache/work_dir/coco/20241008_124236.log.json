{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+4746fde", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=18)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=3,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 16775, "data_time": 0.08223, "stage0_loss_instance_mil": 0.49983, "stage0_bag_acc": 47.58804, "stage0_mean_ious": 0.33753, "stage0_s": 0.0, "stage0_m": 0.01943, "stage0_l": 0.18486, "stage0_h": 0.35094, "stage1_loss_instance_mil": 0.27748, "stage1_bag_acc": 37.76938, "stage1_neg_loss": 0.02559, "stage1_mean_ious": 0.32398, "stage1_s": 0.0, "stage1_m": 0.01739, "stage1_l": 0.16792, "stage1_h": 0.33815, "loss": 0.8029, "grad_norm": 7.95674, "time": 1.30003}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 16775, "data_time": 0.03072, "stage0_loss_instance_mil": 0.20749, "stage0_bag_acc": 88.68106, "stage0_mean_ious": 0.3835, "stage0_s": 0.0, "stage0_m": 0.01794, "stage0_l": 0.22755, "stage0_h": 0.40233, "stage1_loss_instance_mil": 0.58071, "stage1_bag_acc": 59.31334, "stage1_neg_loss": 0.12611, "stage1_mean_ious": 0.37156, "stage1_s": 0.0, "stage1_m": 0.01464, "stage1_l": 0.23164, "stage1_h": 0.38717, "loss": 0.91431, "grad_norm": 12.80679, "time": 1.2623}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 16775, "data_time": 0.02958, "stage0_loss_instance_mil": 0.21112, "stage0_bag_acc": 86.78461, "stage0_mean_ious": 0.43007, "stage0_s": 0.00169, "stage0_m": 0.03423, "stage0_l": 0.2624, "stage0_h": 0.4485, "stage1_loss_instance_mil": 0.4367, "stage1_bag_acc": 63.04372, "stage1_neg_loss": 0.08175, "stage1_mean_ious": 0.43281, "stage1_s": 0.00199, "stage1_m": 0.03972, "stage1_l": 0.27416, "stage1_h": 0.44963, "loss": 0.72957, "grad_norm": 7.03052, "time": 1.24385}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00917, "memory": 16775, "data_time": 0.0722, "stage0_loss_instance_mil": 0.32184, "stage0_bag_acc": 75.29856, "stage0_mean_ious": 0.40227, "stage0_s": 0.0, "stage0_m": 0.05601, "stage0_l": 0.22887, "stage0_h": 0.41802, "stage1_loss_instance_mil": 0.31915, "stage1_bag_acc": 61.62475, "stage1_neg_loss": 0.13573, "stage1_mean_ious": 0.39691, "stage1_s": 0.0, "stage1_m": 0.056, "stage1_l": 0.24821, "stage1_h": 0.40803, "loss": 0.77672, "grad_norm": 10.17103, "time": 1.28311}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01117, "memory": 16775, "data_time": 0.0271, "stage0_loss_instance_mil": 0.28923, "stage0_bag_acc": 77.77188, "stage0_mean_ious": 0.44358, "stage0_s": 0.0, "stage0_m": 0.04744, "stage0_l": 0.27237, "stage0_h": 0.46311, "stage1_loss_instance_mil": 0.24411, "stage1_bag_acc": 73.29267, "stage1_neg_loss": 0.06174, "stage1_mean_ious": 0.4473, "stage1_s": 0.0, "stage1_m": 0.04571, "stage1_l": 0.29076, "stage1_h": 0.46549, "loss": 0.59507, "grad_norm": 5.02374, "time": 1.23548}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01317, "memory": 16775, "data_time": 0.02705, "stage0_loss_instance_mil": 0.27743, "stage0_bag_acc": 80.67631, "stage0_mean_ious": 0.42366, "stage0_s": 0.0, "stage0_m": 0.05178, "stage0_l": 0.21425, "stage0_h": 0.44474, "stage1_loss_instance_mil": 0.3624, "stage1_bag_acc": 69.26159, "stage1_neg_loss": 0.0556, "stage1_mean_ious": 0.43447, "stage1_s": 0.0, "stage1_m": 0.05426, "stage1_l": 0.22632, "stage1_h": 0.45366, "loss": 0.69544, "grad_norm": 6.56829, "time": 1.23602}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01636, "memory": 16775, "data_time": 0.07748, "stage0_loss_instance_mil": 0.56576, "stage0_bag_acc": 51.03594, "stage0_mean_ious": 0.26183, "stage0_s": 0.0, "stage0_m": 0.05332, "stage0_l": 0.22388, "stage0_h": 0.25826, "stage1_loss_instance_mil": 0.27613, "stage1_bag_acc": 36.60483, "stage1_neg_loss": 0.06569, "stage1_mean_ious": 0.25319, "stage1_s": 0.0, "stage1_m": 0.05683, "stage1_l": 0.22744, "stage1_h": 0.24645, "loss": 0.90758, "grad_norm": 6.39874, "time": 1.28988}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01836, "memory": 16775, "data_time": 0.02895, "stage0_loss_instance_mil": 0.55988, "stage0_bag_acc": 47.07026, "stage0_mean_ious": 0.18674, "stage0_s": 0.0, "stage0_m": 0.0704, "stage0_l": 0.21086, "stage0_h": 0.17508, "stage1_loss_instance_mil": 0.25092, "stage1_bag_acc": 36.67704, "stage1_neg_loss": 0.03465, "stage1_mean_ious": 0.17849, "stage1_s": 0.0, "stage1_m": 0.08391, "stage1_l": 0.20495, "stage1_h": 0.16424, "loss": 0.84545, "grad_norm": 2.61074, "time": 1.22476}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02756, "stage0_loss_instance_mil": 0.54794, "stage0_bag_acc": 47.99778, "stage0_mean_ious": 0.21026, "stage0_s": 0.0, "stage0_m": 0.02248, "stage0_l": 0.14894, "stage0_h": 0.20674, "stage1_loss_instance_mil": 0.25061, "stage1_bag_acc": 40.74257, "stage1_neg_loss": 0.0301, "stage1_mean_ious": 0.20437, "stage1_s": 0.0, "stage1_m": 0.02316, "stage1_l": 0.14858, "stage1_h": 0.20043, "loss": 0.82865, "grad_norm": 2.20494, "time": 1.23545}
{"mode": "val", "epoch": 3, "iter": 180, "lr": 0.02, "eval_iter_num": 90, "bbox_mAP": 0.009, "bbox_mAP_50": 0.038, "bbox_mAP_75": 0.015, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.002, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.009 0.038 0.015 0.003 0.002 0.000"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 16775, "data_time": 0.07792, "stage0_loss_instance_mil": 0.58169, "stage0_bag_acc": 40.56299, "stage0_mean_ious": 0.35119, "stage0_s": 0.0, "stage0_m": 0.0383, "stage0_l": 0.24268, "stage0_h": 0.36044, "stage1_loss_instance_mil": 0.25489, "stage1_bag_acc": 25.89173, "stage1_neg_loss": 0.02943, "stage1_mean_ious": 0.33063, "stage1_s": 0.0, "stage1_m": 0.04298, "stage1_l": 0.23552, "stage1_h": 0.33732, "loss": 0.866, "grad_norm": 1.91736, "time": 1.31038}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 16775, "data_time": 0.02452, "stage0_loss_instance_mil": 0.51624, "stage0_bag_acc": 52.20957, "stage0_mean_ious": 0.3277, "stage0_s": 0.0, "stage0_m": 0.03845, "stage0_l": 0.19812, "stage0_h": 0.3333, "stage1_loss_instance_mil": 0.27162, "stage1_bag_acc": 40.16906, "stage1_neg_loss": 0.03827, "stage1_mean_ious": 0.30915, "stage1_s": 0.0, "stage1_m": 0.03657, "stage1_l": 0.18826, "stage1_h": 0.31448, "loss": 0.82612, "grad_norm": 3.27828, "time": 1.2034}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02667, "stage0_loss_instance_mil": 0.49413, "stage0_bag_acc": 56.06515, "stage0_mean_ious": 0.30343, "stage0_s": 0.0, "stage0_m": 0.06121, "stage0_l": 0.25127, "stage0_h": 0.29983, "stage1_loss_instance_mil": 0.22628, "stage1_bag_acc": 52.55609, "stage1_neg_loss": 0.05179, "stage1_mean_ious": 0.2843, "stage1_s": 0.0, "stage1_m": 0.05395, "stage1_l": 0.22617, "stage1_h": 0.28148, "loss": 0.77219, "grad_norm": 2.8857, "time": 1.22919}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 16775, "data_time": 0.07469, "stage0_loss_instance_mil": 0.45903, "stage0_bag_acc": 53.65899, "stage0_mean_ious": 0.2966, "stage0_s": 0.0, "stage0_m": 0.05553, "stage0_l": 0.21395, "stage0_h": 0.30204, "stage1_loss_instance_mil": 0.18226, "stage1_bag_acc": 49.84182, "stage1_neg_loss": 0.04363, "stage1_mean_ious": 0.2906, "stage1_s": 0.0, "stage1_m": 0.04603, "stage1_l": 0.19681, "stage1_h": 0.29886, "loss": 0.68493, "grad_norm": 2.20304, "time": 1.28075}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 16775, "data_time": 0.02552, "stage0_loss_instance_mil": 0.44413, "stage0_bag_acc": 61.31458, "stage0_mean_ious": 0.29086, "stage0_s": 0.0, "stage0_m": 0.03362, "stage0_l": 0.21548, "stage0_h": 0.2974, "stage1_loss_instance_mil": 0.22671, "stage1_bag_acc": 53.02736, "stage1_neg_loss": 0.03328, "stage1_mean_ious": 0.27231, "stage1_s": 0.0, "stage1_m": 0.03088, "stage1_l": 0.20235, "stage1_h": 0.27896, "loss": 0.70413, "grad_norm": 1.76184, "time": 1.23079}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02704, "stage0_loss_instance_mil": 0.37685, "stage0_bag_acc": 66.64055, "stage0_mean_ious": 0.29993, "stage0_s": 0.0, "stage0_m": 0.0275, "stage0_l": 0.21187, "stage0_h": 0.30189, "stage1_loss_instance_mil": 0.18994, "stage1_bag_acc": 62.85631, "stage1_neg_loss": 0.05935, "stage1_mean_ious": 0.28663, "stage1_s": 0.0, "stage1_m": 0.03005, "stage1_l": 0.20131, "stage1_h": 0.29011, "loss": 0.62614, "grad_norm": 2.01749, "time": 1.206}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 16775, "data_time": 0.07499, "stage0_loss_instance_mil": 0.45648, "stage0_bag_acc": 63.30864, "stage0_mean_ious": 0.27979, "stage0_s": 0.0, "stage0_m": 0.05455, "stage0_l": 0.20958, "stage0_h": 0.27859, "stage1_loss_instance_mil": 0.20554, "stage1_bag_acc": 54.06865, "stage1_neg_loss": 0.0358, "stage1_mean_ious": 0.2717, "stage1_s": 0.0, "stage1_m": 0.03871, "stage1_l": 0.19317, "stage1_h": 0.27462, "loss": 0.69783, "grad_norm": 2.04855, "time": 1.25305}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 16775, "data_time": 0.02555, "stage0_loss_instance_mil": 0.35208, "stage0_bag_acc": 71.70941, "stage0_mean_ious": 0.29897, "stage0_s": 0.0, "stage0_m": 0.06752, "stage0_l": 0.22379, "stage0_h": 0.30588, "stage1_loss_instance_mil": 0.16129, "stage1_bag_acc": 71.7468, "stage1_neg_loss": 0.04497, "stage1_mean_ious": 0.28952, "stage1_s": 0.0, "stage1_m": 0.06083, "stage1_l": 0.2075, "stage1_h": 0.29805, "loss": 0.55834, "grad_norm": 1.58212, "time": 1.20223}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02582, "stage0_loss_instance_mil": 0.29318, "stage0_bag_acc": 76.53047, "stage0_mean_ious": 0.29946, "stage0_s": 0.0, "stage0_m": 0.05697, "stage0_l": 0.23831, "stage0_h": 0.30015, "stage1_loss_instance_mil": 0.18321, "stage1_bag_acc": 70.2899, "stage1_neg_loss": 0.05405, "stage1_mean_ious": 0.29158, "stage1_s": 0.0, "stage1_m": 0.05214, "stage1_l": 0.23155, "stage1_h": 0.29385, "loss": 0.53045, "grad_norm": 1.84279, "time": 1.20792}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 0.02, "eval_iter_num": 90, "bbox_mAP": 0.012, "bbox_mAP_50": 0.055, "bbox_mAP_75": 0.018, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.002, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.012 0.055 0.018 0.004 0.002 0.000"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 16775, "data_time": 0.07473, "stage0_loss_instance_mil": 0.28217, "stage0_bag_acc": 79.19154, "stage0_mean_ious": 0.31897, "stage0_s": 0.0, "stage0_m": 0.03978, "stage0_l": 0.21228, "stage0_h": 0.32836, "stage1_loss_instance_mil": 0.22186, "stage1_bag_acc": 73.46126, "stage1_neg_loss": 0.07361, "stage1_mean_ious": 0.30186, "stage1_s": 0.0, "stage1_m": 0.04211, "stage1_l": 0.20048, "stage1_h": 0.31098, "loss": 0.57764, "grad_norm": 1.93633, "time": 1.25713}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 16775, "data_time": 0.02885, "stage0_loss_instance_mil": 0.26772, "stage0_bag_acc": 80.60685, "stage0_mean_ious": 0.31048, "stage0_s": 0.0, "stage0_m": 0.07672, "stage0_l": 0.24055, "stage0_h": 0.3122, "stage1_loss_instance_mil": 0.2608, "stage1_bag_acc": 68.99311, "stage1_neg_loss": 0.05857, "stage1_mean_ious": 0.29402, "stage1_s": 0.0, "stage1_m": 0.06754, "stage1_l": 0.2294, "stage1_h": 0.29653, "loss": 0.58708, "grad_norm": 1.8807, "time": 1.24981}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02793, "stage0_loss_instance_mil": 0.28629, "stage0_bag_acc": 77.52762, "stage0_mean_ious": 0.28466, "stage0_s": 0.0, "stage0_m": 0.04814, "stage0_l": 0.21764, "stage0_h": 0.28432, "stage1_loss_instance_mil": 0.2227, "stage1_bag_acc": 70.63544, "stage1_neg_loss": 0.04684, "stage1_mean_ious": 0.26925, "stage1_s": 0.0, "stage1_m": 0.04901, "stage1_l": 0.21605, "stage1_h": 0.26859, "loss": 0.55583, "grad_norm": 1.79798, "time": 1.26957}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 16775, "data_time": 0.07688, "stage0_loss_instance_mil": 0.25392, "stage0_bag_acc": 82.4795, "stage0_mean_ious": 0.23963, "stage0_s": 0.0, "stage0_m": 0.02784, "stage0_l": 0.23626, "stage0_h": 0.2324, "stage1_loss_instance_mil": 0.29198, "stage1_bag_acc": 67.81265, "stage1_neg_loss": 0.04479, "stage1_mean_ious": 0.23597, "stage1_s": 0.0, "stage1_m": 0.02409, "stage1_l": 0.23689, "stage1_h": 0.22982, "loss": 0.59068, "grad_norm": 1.74408, "time": 1.29178}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 16775, "data_time": 0.02853, "stage0_loss_instance_mil": 0.26197, "stage0_bag_acc": 79.72781, "stage0_mean_ious": 0.2478, "stage0_s": 0.0, "stage0_m": 0.04488, "stage0_l": 0.21228, "stage0_h": 0.24811, "stage1_loss_instance_mil": 0.22727, "stage1_bag_acc": 71.98332, "stage1_neg_loss": 0.0565, "stage1_mean_ious": 0.24027, "stage1_s": 0.0, "stage1_m": 0.038, "stage1_l": 0.21325, "stage1_h": 0.23974, "loss": 0.54573, "grad_norm": 1.69875, "time": 1.25906}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 16775, "data_time": 0.02827, "stage0_loss_instance_mil": 0.23451, "stage0_bag_acc": 82.61263, "stage0_mean_ious": 0.23031, "stage0_s": 0.0, "stage0_m": 0.03415, "stage0_l": 0.23798, "stage0_h": 0.22222, "stage1_loss_instance_mil": 0.21309, "stage1_bag_acc": 76.16075, "stage1_neg_loss": 0.05722, "stage1_mean_ious": 0.22165, "stage1_s": 0.0, "stage1_m": 0.03168, "stage1_l": 0.22964, "stage1_h": 0.21292, "loss": 0.50481, "grad_norm": 1.73894, "time": 1.2336}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 16775, "data_time": 0.07511, "stage0_loss_instance_mil": 0.27806, "stage0_bag_acc": 78.15236, "stage0_mean_ious": 0.29318, "stage0_s": 0.0, "stage0_m": 0.056, "stage0_l": 0.25913, "stage0_h": 0.28965, "stage1_loss_instance_mil": 0.22956, "stage1_bag_acc": 68.63044, "stage1_neg_loss": 0.03444, "stage1_mean_ious": 0.27566, "stage1_s": 0.0, "stage1_m": 0.04135, "stage1_l": 0.25962, "stage1_h": 0.27132, "loss": 0.54205, "grad_norm": 1.31052, "time": 1.27568}
