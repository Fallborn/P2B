{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+e1fb402", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=2,\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/images/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ]))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.3, momentum=0.9, weight_decay=0.001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=18)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=1,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.02967, "memory": 8582, "data_time": 0.05621, "stage0_loss_instance_mil": 0.68664, "stage0_bag_acc": 25.28123, "stage0_mean_ious": 0.32301, "stage0_s": 0.0, "stage0_m": 0.00213, "stage0_l": 0.10549, "stage0_h": 0.34013, "stage1_loss_instance_mil": 0.20355, "stage1_bag_acc": 29.2877, "stage1_neg_loss": 0.01565, "stage1_mean_ious": 0.31122, "stage1_s": 0.0, "stage1_m": 0.00227, "stage1_l": 0.10909, "stage1_h": 0.32603, "loss": 0.90585, "grad_norm": 5.03261, "time": 0.63128}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.05964, "memory": 8598, "data_time": 0.01052, "stage0_loss_instance_mil": 0.71492, "stage0_bag_acc": 17.53878, "stage0_mean_ious": 0.26269, "stage0_s": 0.0, "stage0_m": 0.00152, "stage0_l": 0.08419, "stage0_h": 0.27744, "stage1_loss_instance_mil": 0.14567, "stage1_bag_acc": 22.75396, "stage1_neg_loss": 0.00485, "stage1_mean_ious": 0.25231, "stage1_s": 0.0, "stage1_m": 0.00205, "stage1_l": 0.07898, "stage1_h": 0.26639, "loss": 0.86543, "grad_norm": 0.96786, "time": 0.59048}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.08961, "memory": 8598, "data_time": 0.01177, "stage0_loss_instance_mil": 0.69955, "stage0_bag_acc": 20.42189, "stage0_mean_ious": 0.23499, "stage0_s": 0.0, "stage0_m": 0.00263, "stage0_l": 0.06422, "stage0_h": 0.2458, "stage1_loss_instance_mil": 0.14391, "stage1_bag_acc": 21.34389, "stage1_neg_loss": 0.00481, "stage1_mean_ious": 0.22677, "stage1_s": 0.0, "stage1_m": 0.00189, "stage1_l": 0.06183, "stage1_h": 0.23755, "loss": 0.84827, "grad_norm": 0.59074, "time": 0.61532}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.11958, "memory": 8636, "data_time": 0.0114, "stage0_loss_instance_mil": 0.68061, "stage0_bag_acc": 27.66973, "stage0_mean_ious": 0.30836, "stage0_s": 0.0, "stage0_m": 0.00651, "stage0_l": 0.05466, "stage0_h": 0.33181, "stage1_loss_instance_mil": 0.1423, "stage1_bag_acc": 18.45373, "stage1_neg_loss": 0.01234, "stage1_mean_ious": 0.30265, "stage1_s": 0.0, "stage1_m": 0.0067, "stage1_l": 0.05055, "stage1_h": 0.32617, "loss": 0.83525, "grad_norm": 0.71491, "time": 0.60024}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.14955, "memory": 8645, "data_time": 0.01089, "stage0_loss_instance_mil": 0.69027, "stage0_bag_acc": 20.62348, "stage0_mean_ious": 0.28747, "stage0_s": 0.0, "stage0_m": 0.00779, "stage0_l": 0.07823, "stage0_h": 0.31804, "stage1_loss_instance_mil": 0.12541, "stage1_bag_acc": 33.37146, "stage1_neg_loss": 0.01504, "stage1_mean_ious": 0.27716, "stage1_s": 0.0, "stage1_m": 0.0079, "stage1_l": 0.0762, "stage1_h": 0.3076, "loss": 0.83072, "grad_norm": 0.63336, "time": 0.58494}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.17952, "memory": 8645, "data_time": 0.01084, "stage0_loss_instance_mil": 0.68628, "stage0_bag_acc": 19.98593, "stage0_mean_ious": 0.30833, "stage0_s": 0.0, "stage0_m": 0.00734, "stage0_l": 0.1111, "stage0_h": 0.33251, "stage1_loss_instance_mil": 0.11606, "stage1_bag_acc": 20.66489, "stage1_neg_loss": 0.01567, "stage1_mean_ious": 0.29925, "stage1_s": 0.0, "stage1_m": 0.00674, "stage1_l": 0.10951, "stage1_h": 0.32177, "loss": 0.81801, "grad_norm": 0.45686, "time": 0.59249}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.20949, "memory": 8645, "data_time": 0.01164, "stage0_loss_instance_mil": 0.69022, "stage0_bag_acc": 14.47807, "stage0_mean_ious": 0.24196, "stage0_s": 0.00042, "stage0_m": 0.00575, "stage0_l": 0.08818, "stage0_h": 0.25191, "stage1_loss_instance_mil": 0.11061, "stage1_bag_acc": 18.15408, "stage1_neg_loss": 0.01918, "stage1_mean_ious": 0.23687, "stage1_s": 0.0001, "stage1_m": 0.00742, "stage1_l": 0.09068, "stage1_h": 0.24462, "loss": 0.82002, "grad_norm": 0.29476, "time": 0.59953}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.21548, "eval_iter_num": 720, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.24545, "memory": 8645, "data_time": 0.05796, "stage0_loss_instance_mil": 0.68433, "stage0_bag_acc": 20.74433, "stage0_mean_ious": 0.27307, "stage0_s": 0.0, "stage0_m": 0.00572, "stage0_l": 0.12366, "stage0_h": 0.28316, "stage1_loss_instance_mil": 0.10868, "stage1_bag_acc": 19.37409, "stage1_neg_loss": 0.02134, "stage1_mean_ious": 0.24679, "stage1_s": 0.0, "stage1_m": 0.00576, "stage1_l": 0.1266, "stage1_h": 0.25413, "loss": 0.81435, "grad_norm": 0.25826, "time": 0.63131}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.27542, "memory": 8645, "data_time": 0.01118, "stage0_loss_instance_mil": 0.69411, "stage0_bag_acc": 19.80013, "stage0_mean_ious": 0.33842, "stage0_s": 0.0, "stage0_m": 0.00349, "stage0_l": 0.07577, "stage0_h": 0.36743, "stage1_loss_instance_mil": 0.10071, "stage1_bag_acc": 18.57955, "stage1_neg_loss": 0.02053, "stage1_mean_ious": 0.31522, "stage1_s": 0.0, "stage1_m": 0.00397, "stage1_l": 0.075, "stage1_h": 0.34185, "loss": 0.81535, "grad_norm": 0.32956, "time": 0.58885}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.3, "memory": 8645, "data_time": 0.01159, "stage0_loss_instance_mil": 0.68895, "stage0_bag_acc": 17.43521, "stage0_mean_ious": 0.08884, "stage0_s": 0.0, "stage0_m": 0.0171, "stage0_l": 0.09799, "stage0_h": 0.07921, "stage1_loss_instance_mil": 0.087, "stage1_bag_acc": 20.17612, "stage1_neg_loss": 0.01868, "stage1_mean_ious": 0.08166, "stage1_s": 0.0, "stage1_m": 0.01321, "stage1_l": 0.10008, "stage1_h": 0.071, "loss": 0.79464, "grad_norm": 0.22069, "time": 0.59416}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.3, "memory": 8645, "data_time": 0.01148, "stage0_loss_instance_mil": 0.68913, "stage0_bag_acc": 16.52963, "stage0_mean_ious": 0.0781, "stage0_s": 0.0, "stage0_m": 0.0268, "stage0_l": 0.10673, "stage0_h": 0.06023, "stage1_loss_instance_mil": 0.08458, "stage1_bag_acc": 19.11058, "stage1_neg_loss": 0.02239, "stage1_mean_ious": 0.07357, "stage1_s": 0.0, "stage1_m": 0.03015, "stage1_l": 0.10368, "stage1_h": 0.05601, "loss": 0.7961, "grad_norm": 0.16245, "time": 0.60264}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.3, "memory": 8645, "data_time": 0.01141, "stage0_loss_instance_mil": 0.67213, "stage0_bag_acc": 26.28632, "stage0_mean_ious": 0.07332, "stage0_s": 0.0, "stage0_m": 0.01113, "stage0_l": 0.10689, "stage0_h": 0.05791, "stage1_loss_instance_mil": 0.08867, "stage1_bag_acc": 23.47475, "stage1_neg_loss": 0.02208, "stage1_mean_ious": 0.06938, "stage1_s": 0.0, "stage1_m": 0.0116, "stage1_l": 0.10332, "stage1_h": 0.05434, "loss": 0.78289, "grad_norm": 0.17718, "time": 0.59926}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.3, "memory": 8645, "data_time": 0.01183, "stage0_loss_instance_mil": 0.69333, "stage0_bag_acc": 14.93646, "stage0_mean_ious": 0.0682, "stage0_s": 0.0, "stage0_m": 0.01081, "stage0_l": 0.08249, "stage0_h": 0.0588, "stage1_loss_instance_mil": 0.08248, "stage1_bag_acc": 10.38442, "stage1_neg_loss": 0.02171, "stage1_mean_ious": 0.06557, "stage1_s": 0.0, "stage1_m": 0.01341, "stage1_l": 0.07869, "stage1_h": 0.05606, "loss": 0.79752, "grad_norm": 0.15698, "time": 0.61787}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.3, "memory": 8645, "data_time": 0.01089, "stage0_loss_instance_mil": 0.68786, "stage0_bag_acc": 17.5759, "stage0_mean_ious": 0.07457, "stage0_s": 0.0, "stage0_m": 0.013, "stage0_l": 0.07916, "stage0_h": 0.06139, "stage1_loss_instance_mil": 0.08625, "stage1_bag_acc": 19.23571, "stage1_neg_loss": 0.01982, "stage1_mean_ious": 0.06835, "stage1_s": 0.0, "stage1_m": 0.01165, "stage1_l": 0.07491, "stage1_h": 0.05596, "loss": 0.79393, "grad_norm": 0.17788, "time": 0.56108}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.3, "eval_iter_num": 720, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.3, "memory": 8645, "data_time": 0.05886, "stage0_loss_instance_mil": 0.67837, "stage0_bag_acc": 21.32263, "stage0_mean_ious": 0.06847, "stage0_s": 0.0, "stage0_m": 0.01584, "stage0_l": 0.07553, "stage0_h": 0.05932, "stage1_loss_instance_mil": 0.08428, "stage1_bag_acc": 26.12306, "stage1_neg_loss": 0.02174, "stage1_mean_ious": 0.06267, "stage1_s": 0.0, "stage1_m": 0.01568, "stage1_l": 0.07056, "stage1_h": 0.05377, "loss": 0.78439, "grad_norm": 0.15448, "time": 0.65812}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.3, "memory": 8645, "data_time": 0.01171, "stage0_loss_instance_mil": 0.69255, "stage0_bag_acc": 16.52323, "stage0_mean_ious": 0.06562, "stage0_s": 0.0, "stage0_m": 0.02115, "stage0_l": 0.06223, "stage0_h": 0.05549, "stage1_loss_instance_mil": 0.08129, "stage1_bag_acc": 19.65117, "stage1_neg_loss": 0.02302, "stage1_mean_ious": 0.06125, "stage1_s": 0.0, "stage1_m": 0.02168, "stage1_l": 0.05638, "stage1_h": 0.05118, "loss": 0.79686, "grad_norm": 0.18253, "time": 0.61431}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.3, "memory": 8647, "data_time": 0.01263, "stage0_loss_instance_mil": 0.69146, "stage0_bag_acc": 21.68394, "stage0_mean_ious": 0.14726, "stage0_s": 0.0, "stage0_m": 0.00723, "stage0_l": 0.07987, "stage0_h": 0.15013, "stage1_loss_instance_mil": 0.09046, "stage1_bag_acc": 18.13397, "stage1_neg_loss": 0.02224, "stage1_mean_ious": 0.14088, "stage1_s": 0.0, "stage1_m": 0.00647, "stage1_l": 0.07839, "stage1_h": 0.14264, "loss": 0.80416, "grad_norm": 0.21894, "time": 0.58763}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.3, "memory": 8647, "data_time": 0.01307, "stage0_loss_instance_mil": 0.70429, "stage0_bag_acc": 17.51638, "stage0_mean_ious": 0.32307, "stage0_s": 0.0, "stage0_m": 0.00718, "stage0_l": 0.06866, "stage0_h": 0.34821, "stage1_loss_instance_mil": 0.10136, "stage1_bag_acc": 19.76089, "stage1_neg_loss": 0.0236, "stage1_mean_ious": 0.30785, "stage1_s": 0.0, "stage1_m": 0.00626, "stage1_l": 0.05929, "stage1_h": 0.33295, "loss": 0.82924, "grad_norm": 0.24327, "time": 0.6176}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.3, "memory": 8647, "data_time": 0.01322, "stage0_loss_instance_mil": 0.70239, "stage0_bag_acc": 13.14858, "stage0_mean_ious": 0.34753, "stage0_s": 0.0, "stage0_m": 0.0006, "stage0_l": 0.08084, "stage0_h": 0.37045, "stage1_loss_instance_mil": 0.10351, "stage1_bag_acc": 21.8374, "stage1_neg_loss": 0.02237, "stage1_mean_ious": 0.34307, "stage1_s": 0.0, "stage1_m": 0.00038, "stage1_l": 0.08044, "stage1_h": 0.36537, "loss": 0.82826, "grad_norm": 0.21251, "time": 0.62981}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.3, "memory": 8647, "data_time": 0.01346, "stage0_loss_instance_mil": 0.68845, "stage0_bag_acc": 21.10702, "stage0_mean_ious": 0.34439, "stage0_s": 0.0, "stage0_m": 0.00493, "stage0_l": 0.06763, "stage0_h": 0.38244, "stage1_loss_instance_mil": 0.10644, "stage1_bag_acc": 25.01416, "stage1_neg_loss": 0.02368, "stage1_mean_ious": 0.3407, "stage1_s": 0.0, "stage1_m": 0.00475, "stage1_l": 0.06494, "stage1_h": 0.37754, "loss": 0.81857, "grad_norm": 0.15364, "time": 0.61393}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.3, "memory": 8647, "data_time": 0.01302, "stage0_loss_instance_mil": 0.68697, "stage0_bag_acc": 20.6325, "stage0_mean_ious": 0.31816, "stage0_s": 0.0, "stage0_m": 0.00294, "stage0_l": 0.07864, "stage0_h": 0.34309, "stage1_loss_instance_mil": 0.10909, "stage1_bag_acc": 25.6068, "stage1_neg_loss": 0.02295, "stage1_mean_ious": 0.3098, "stage1_s": 0.0, "stage1_m": 0.00298, "stage1_l": 0.07397, "stage1_h": 0.33426, "loss": 0.81902, "grad_norm": 0.1487, "time": 0.59734}
