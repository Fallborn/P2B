{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.09673, "stage0_loss_instance_mil": 0.70532, "stage0_bag_acc": 28.40682, "stage0_mean_ious": 0.40421, "stage0_s": 0.0, "stage0_m": 0.03212, "stage0_l": 0.26757, "stage0_h": 0.43027, "stage1_loss_instance_mil": 0.17974, "stage1_bag_acc": 12.04745, "stage1_neg_loss": 0.00111, "stage1_mean_ious": 0.37222, "stage1_s": 0.0, "stage1_m": 0.02833, "stage1_l": 0.26021, "stage1_h": 0.39419, "loss": 0.88617, "grad_norm": 3.3744, "time": 1.67259}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.04224, "stage0_loss_instance_mil": 0.57402, "stage0_bag_acc": 57.05341, "stage0_mean_ious": 0.39904, "stage0_s": 0.0, "stage0_m": 0.04721, "stage0_l": 0.31481, "stage0_h": 0.41266, "stage1_loss_instance_mil": 0.27647, "stage1_bag_acc": 21.92059, "stage1_neg_loss": 0.00333, "stage1_mean_ious": 0.37385, "stage1_s": 0.0, "stage1_m": 0.04281, "stage1_l": 0.29767, "stage1_h": 0.3862, "loss": 0.85383, "grad_norm": 4.13531, "time": 1.62468}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.04368, "stage0_loss_instance_mil": 0.27107, "stage0_bag_acc": 86.52601, "stage0_mean_ious": 0.38191, "stage0_s": 0.0, "stage0_m": 0.03832, "stage0_l": 0.21563, "stage0_h": 0.39232, "stage1_loss_instance_mil": 0.35751, "stage1_bag_acc": 74.70868, "stage1_neg_loss": 0.06242, "stage1_mean_ious": 0.375, "stage1_s": 0.0, "stage1_m": 0.03068, "stage1_l": 0.22644, "stage1_h": 0.38563, "loss": 0.691, "grad_norm": 10.63164, "time": 1.70251}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.0925, "stage0_loss_instance_mil": 0.09597, "stage0_bag_acc": 94.51883, "stage0_mean_ious": 0.31259, "stage0_s": 0.0, "stage0_m": 0.05975, "stage0_l": 0.17446, "stage0_h": 0.32281, "stage1_loss_instance_mil": 0.36563, "stage1_bag_acc": 95.42093, "stage1_neg_loss": 0.08354, "stage1_mean_ious": 0.30451, "stage1_s": 0.0, "stage1_m": 0.06118, "stage1_l": 0.16993, "stage1_h": 0.31581, "loss": 0.54514, "grad_norm": 12.05712, "time": 1.7177}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.04492, "stage0_loss_instance_mil": 0.06273, "stage0_bag_acc": 96.46678, "stage0_mean_ious": 0.30662, "stage0_s": 0.0, "stage0_m": 0.01156, "stage0_l": 0.15399, "stage0_h": 0.32012, "stage1_loss_instance_mil": 0.32856, "stage1_bag_acc": 97.61833, "stage1_neg_loss": 0.10293, "stage1_mean_ious": 0.29924, "stage1_s": 0.0, "stage1_m": 0.01367, "stage1_l": 0.15764, "stage1_h": 0.31126, "loss": 0.49423, "grad_norm": 16.73483, "time": 1.68292}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.04469, "stage0_loss_instance_mil": 0.03898, "stage0_bag_acc": 97.96584, "stage0_mean_ious": 0.29428, "stage0_s": 0.0, "stage0_m": 0.05663, "stage0_l": 0.13366, "stage0_h": 0.31716, "stage1_loss_instance_mil": 0.28722, "stage1_bag_acc": 98.60958, "stage1_neg_loss": 0.08699, "stage1_mean_ious": 0.28076, "stage1_s": 0.0, "stage1_m": 0.04936, "stage1_l": 0.12613, "stage1_h": 0.3027, "loss": 0.4132, "grad_norm": 13.16907, "time": 1.65988}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 0.10021, "stage0_loss_instance_mil": 0.03131, "stage0_bag_acc": 98.23587, "stage0_mean_ious": 0.33477, "stage0_s": 0.0, "stage0_m": 0.02278, "stage0_l": 0.11628, "stage0_h": 0.35713, "stage1_loss_instance_mil": 0.2554, "stage1_bag_acc": 98.92911, "stage1_neg_loss": 0.08267, "stage1_mean_ious": 0.31124, "stage1_s": 0.0, "stage1_m": 0.02604, "stage1_l": 0.11316, "stage1_h": 0.33008, "loss": 0.36938, "grad_norm": 13.90258, "time": 1.72868}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.0451, "stage0_loss_instance_mil": 0.03062, "stage0_bag_acc": 98.85554, "stage0_mean_ious": 0.34065, "stage0_s": 0.0, "stage0_m": 0.03826, "stage0_l": 0.11432, "stage0_h": 0.36915, "stage1_loss_instance_mil": 0.27352, "stage1_bag_acc": 98.73888, "stage1_neg_loss": 0.09085, "stage1_mean_ious": 0.3083, "stage1_s": 0.0, "stage1_m": 0.04304, "stage1_l": 0.10808, "stage1_h": 0.33304, "loss": 0.395, "grad_norm": 15.91575, "time": 1.66137}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04627, "stage0_loss_instance_mil": 0.03162, "stage0_bag_acc": 98.58135, "stage0_mean_ious": 0.31591, "stage0_s": 0.0, "stage0_m": 0.02784, "stage0_l": 0.10661, "stage0_h": 0.3395, "stage1_loss_instance_mil": 0.24827, "stage1_bag_acc": 98.69306, "stage1_neg_loss": 0.079, "stage1_mean_ious": 0.29133, "stage1_s": 0.0, "stage1_m": 0.02063, "stage1_l": 0.10162, "stage1_h": 0.31177, "loss": 0.35889, "grad_norm": 14.45656, "time": 1.70709}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.10175, "stage0_loss_instance_mil": 0.04558, "stage0_bag_acc": 97.55682, "stage0_mean_ious": 0.36403, "stage0_s": 0.0, "stage0_m": 0.02892, "stage0_l": 0.11934, "stage0_h": 0.39155, "stage1_loss_instance_mil": 0.22855, "stage1_bag_acc": 97.96977, "stage1_neg_loss": 0.06916, "stage1_mean_ious": 0.33237, "stage1_s": 0.0, "stage1_m": 0.02456, "stage1_l": 0.11586, "stage1_h": 0.35678, "loss": 0.34329, "grad_norm": 11.59052, "time": 1.71179}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.04735, "stage0_loss_instance_mil": 0.02212, "stage0_bag_acc": 98.70749, "stage0_mean_ious": 0.4182, "stage0_s": 0.00172, "stage0_m": 0.01993, "stage0_l": 0.14338, "stage0_h": 0.45099, "stage1_loss_instance_mil": 0.20102, "stage1_bag_acc": 99.10604, "stage1_neg_loss": 0.07843, "stage1_mean_ious": 0.38084, "stage1_s": 0.0014, "stage1_m": 0.01618, "stage1_l": 0.14751, "stage1_h": 0.40947, "loss": 0.30158, "grad_norm": 13.38372, "time": 1.69406}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04611, "stage0_loss_instance_mil": 0.02403, "stage0_bag_acc": 98.7745, "stage0_mean_ious": 0.46105, "stage0_s": 0.0, "stage0_m": 0.04181, "stage0_l": 0.1985, "stage0_h": 0.503, "stage1_loss_instance_mil": 0.163, "stage1_bag_acc": 99.23169, "stage1_neg_loss": 0.05855, "stage1_mean_ious": 0.42465, "stage1_s": 0.0, "stage1_m": 0.04249, "stage1_l": 0.19446, "stage1_h": 0.46058, "loss": 0.24557, "grad_norm": 10.48377, "time": 1.66414}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.09969, "stage0_loss_instance_mil": 0.02027, "stage0_bag_acc": 99.10611, "stage0_mean_ious": 0.46842, "stage0_s": 0.0, "stage0_m": 0.03721, "stage0_l": 0.15691, "stage0_h": 0.49847, "stage1_loss_instance_mil": 0.15327, "stage1_bag_acc": 99.24878, "stage1_neg_loss": 0.06165, "stage1_mean_ious": 0.42834, "stage1_s": 0.0, "stage1_m": 0.03405, "stage1_l": 0.15622, "stage1_h": 0.45323, "loss": 0.2352, "grad_norm": 9.3299, "time": 1.73862}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.04677, "stage0_loss_instance_mil": 0.02642, "stage0_bag_acc": 98.07227, "stage0_mean_ious": 0.45379, "stage0_s": 0.0, "stage0_m": 0.05372, "stage0_l": 0.17167, "stage0_h": 0.49123, "stage1_loss_instance_mil": 0.165, "stage1_bag_acc": 98.40468, "stage1_neg_loss": 0.06125, "stage1_mean_ious": 0.42586, "stage1_s": 0.0, "stage1_m": 0.06771, "stage1_l": 0.18378, "stage1_h": 0.45464, "loss": 0.25267, "grad_norm": 10.89154, "time": 1.68879}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04327, "stage0_loss_instance_mil": 0.01641, "stage0_bag_acc": 99.1273, "stage0_mean_ious": 0.45827, "stage0_s": 0.0, "stage0_m": 0.0546, "stage0_l": 0.15279, "stage0_h": 0.50127, "stage1_loss_instance_mil": 0.12229, "stage1_bag_acc": 99.36176, "stage1_neg_loss": 0.05576, "stage1_mean_ious": 0.43283, "stage1_s": 0.0, "stage1_m": 0.05963, "stage1_l": 0.17133, "stage1_h": 0.46791, "loss": 0.19447, "grad_norm": 7.62545, "time": 1.63241}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.10017, "stage0_loss_instance_mil": 0.00946, "stage0_bag_acc": 99.57836, "stage0_mean_ious": 0.52058, "stage0_s": 0.0, "stage0_m": 0.03633, "stage0_l": 0.25457, "stage0_h": 0.56324, "stage1_loss_instance_mil": 0.11789, "stage1_bag_acc": 99.54167, "stage1_neg_loss": 0.05777, "stage1_mean_ious": 0.49134, "stage1_s": 0.0, "stage1_m": 0.03825, "stage1_l": 0.25612, "stage1_h": 0.52772, "loss": 0.18513, "grad_norm": 9.31501, "time": 1.73111}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.04364, "stage0_loss_instance_mil": 0.00916, "stage0_bag_acc": 99.54594, "stage0_mean_ious": 0.49348, "stage0_s": 0.0, "stage0_m": 0.04356, "stage0_l": 0.18856, "stage0_h": 0.53478, "stage1_loss_instance_mil": 0.10908, "stage1_bag_acc": 99.68485, "stage1_neg_loss": 0.04581, "stage1_mean_ious": 0.47803, "stage1_s": 0.0, "stage1_m": 0.05083, "stage1_l": 0.21279, "stage1_h": 0.51319, "loss": 0.16405, "grad_norm": 7.28776, "time": 1.63364}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04585, "stage0_loss_instance_mil": 0.01247, "stage0_bag_acc": 99.33408, "stage0_mean_ious": 0.52352, "stage0_s": 0.0, "stage0_m": 0.04646, "stage0_l": 0.22061, "stage0_h": 0.56407, "stage1_loss_instance_mil": 0.10025, "stage1_bag_acc": 99.59481, "stage1_neg_loss": 0.04865, "stage1_mean_ious": 0.49977, "stage1_s": 0.0, "stage1_m": 0.05545, "stage1_l": 0.23134, "stage1_h": 0.53539, "loss": 0.16137, "grad_norm": 7.38517, "time": 1.70057}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.189, "bbox_mAP_50": 0.48, "bbox_mAP_75": 0.346, "bbox_mAP_s": 0.196, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.044, "bbox_mAP_copypaste": "0.189 0.480 0.346 0.196 0.113 0.044"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.09752, "stage0_loss_instance_mil": 0.009, "stage0_bag_acc": 99.51292, "stage0_mean_ious": 0.48437, "stage0_s": 0.0, "stage0_m": 0.04305, "stage0_l": 0.2021, "stage0_h": 0.52273, "stage1_loss_instance_mil": 0.08815, "stage1_bag_acc": 99.51292, "stage1_neg_loss": 0.04387, "stage1_mean_ious": 0.46671, "stage1_s": 0.0, "stage1_m": 0.05043, "stage1_l": 0.20715, "stage1_h": 0.50143, "loss": 0.14103, "grad_norm": 6.00976, "time": 1.70027}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.04502, "stage0_loss_instance_mil": 0.02488, "stage0_bag_acc": 98.29522, "stage0_mean_ious": 0.52326, "stage0_s": 0.0, "stage0_m": 0.04252, "stage0_l": 0.19058, "stage0_h": 0.5658, "stage1_loss_instance_mil": 0.08055, "stage1_bag_acc": 98.86502, "stage1_neg_loss": 0.03673, "stage1_mean_ious": 0.50988, "stage1_s": 0.0, "stage1_m": 0.04034, "stage1_l": 0.19448, "stage1_h": 0.55071, "loss": 0.14217, "grad_norm": 6.40713, "time": 1.68182}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04479, "stage0_loss_instance_mil": 0.01078, "stage0_bag_acc": 99.32145, "stage0_mean_ious": 0.5417, "stage0_s": 0.00177, "stage0_m": 0.04659, "stage0_l": 0.20688, "stage0_h": 0.59513, "stage1_loss_instance_mil": 0.08614, "stage1_bag_acc": 99.44013, "stage1_neg_loss": 0.04125, "stage1_mean_ious": 0.52319, "stage1_s": 0.00142, "stage1_m": 0.04755, "stage1_l": 0.21992, "stage1_h": 0.57058, "loss": 0.13817, "grad_norm": 7.02591, "time": 1.69429}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.09748, "stage0_loss_instance_mil": 0.00844, "stage0_bag_acc": 99.70193, "stage0_mean_ious": 0.54529, "stage0_s": 0.0, "stage0_m": 0.07431, "stage0_l": 0.23058, "stage0_h": 0.58957, "stage1_loss_instance_mil": 0.07891, "stage1_bag_acc": 99.54444, "stage1_neg_loss": 0.04093, "stage1_mean_ious": 0.52342, "stage1_s": 0.0, "stage1_m": 0.08559, "stage1_l": 0.23778, "stage1_h": 0.56139, "loss": 0.12828, "grad_norm": 6.5571, "time": 1.69763}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.04285, "stage0_loss_instance_mil": 0.01041, "stage0_bag_acc": 99.47164, "stage0_mean_ious": 0.55767, "stage0_s": 0.0, "stage0_m": 0.0474, "stage0_l": 0.23583, "stage0_h": 0.60431, "stage1_loss_instance_mil": 0.06268, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.02896, "stage1_mean_ious": 0.54781, "stage1_s": 0.0, "stage1_m": 0.05617, "stage1_l": 0.25141, "stage1_h": 0.59025, "loss": 0.10205, "grad_norm": 4.23318, "time": 1.6514}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.04417, "stage0_loss_instance_mil": 0.00779, "stage0_bag_acc": 99.52592, "stage0_mean_ious": 0.52776, "stage0_s": 0.0, "stage0_m": 0.05698, "stage0_l": 0.21424, "stage0_h": 0.57922, "stage1_loss_instance_mil": 0.0737, "stage1_bag_acc": 99.62115, "stage1_neg_loss": 0.0348, "stage1_mean_ious": 0.51122, "stage1_s": 0.0, "stage1_m": 0.05884, "stage1_l": 0.22307, "stage1_h": 0.55681, "loss": 0.1163, "grad_norm": 4.88018, "time": 1.66374}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.0969, "stage0_loss_instance_mil": 0.00474, "stage0_bag_acc": 99.64474, "stage0_mean_ious": 0.54618, "stage0_s": 0.0015, "stage0_m": 0.0542, "stage0_l": 0.21099, "stage0_h": 0.59101, "stage1_loss_instance_mil": 0.05375, "stage1_bag_acc": 99.76974, "stage1_neg_loss": 0.02964, "stage1_mean_ious": 0.53514, "stage1_s": 0.00096, "stage1_m": 0.05714, "stage1_l": 0.22519, "stage1_h": 0.57514, "loss": 0.08814, "grad_norm": 3.64362, "time": 1.71197}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.04422, "stage0_loss_instance_mil": 0.01006, "stage0_bag_acc": 99.54167, "stage0_mean_ious": 0.54887, "stage0_s": 0.0, "stage0_m": 0.07797, "stage0_l": 0.21308, "stage0_h": 0.59526, "stage1_loss_instance_mil": 0.05006, "stage1_bag_acc": 99.79167, "stage1_neg_loss": 0.02753, "stage1_mean_ious": 0.53637, "stage1_s": 0.0, "stage1_m": 0.07922, "stage1_l": 0.2255, "stage1_h": 0.57945, "loss": 0.08765, "grad_norm": 3.6321, "time": 1.70373}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.0447, "stage0_loss_instance_mil": 0.00252, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.53847, "stage0_s": 0.0, "stage0_m": 0.06138, "stage0_l": 0.21389, "stage0_h": 0.58336, "stage1_loss_instance_mil": 0.04831, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.02588, "stage1_mean_ious": 0.52609, "stage1_s": 0.0, "stage1_m": 0.06674, "stage1_l": 0.22577, "stage1_h": 0.56608, "loss": 0.0767, "grad_norm": 3.52895, "time": 1.68529}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.09881, "stage0_loss_instance_mil": 0.00466, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.54778, "stage0_s": 0.0, "stage0_m": 0.03827, "stage0_l": 0.25146, "stage0_h": 0.59008, "stage1_loss_instance_mil": 0.04418, "stage1_bag_acc": 99.81786, "stage1_neg_loss": 0.02245, "stage1_mean_ious": 0.53462, "stage1_s": 0.0, "stage1_m": 0.04415, "stage1_l": 0.26069, "stage1_h": 0.57255, "loss": 0.07128, "grad_norm": 3.28718, "time": 1.73757}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.40769, "stage0_loss_instance_mil": 0.00383, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.55878, "stage0_s": 0.0, "stage0_m": 0.04358, "stage0_l": 0.22793, "stage0_h": 0.59889, "stage1_loss_instance_mil": 0.04728, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.02925, "stage1_mean_ious": 0.54154, "stage1_s": 0.0, "stage1_m": 0.05158, "stage1_l": 0.24364, "stage1_h": 0.57592, "loss": 0.08036, "grad_norm": 3.67629, "time": 4.21913}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.56641, "stage0_loss_instance_mil": 0.00429, "stage0_bag_acc": 99.92308, "stage0_mean_ious": 0.55035, "stage0_s": 0.0, "stage0_m": 0.05951, "stage0_l": 0.20746, "stage0_h": 0.59422, "stage1_loss_instance_mil": 0.04584, "stage1_bag_acc": 99.92308, "stage1_neg_loss": 0.02718, "stage1_mean_ious": 0.54191, "stage1_s": 0.0, "stage1_m": 0.06931, "stage1_l": 0.2173, "stage1_h": 0.58169, "loss": 0.0773, "grad_norm": 3.60737, "time": 6.37703}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.70878, "stage0_loss_instance_mil": 0.00406, "stage0_bag_acc": 99.77124, "stage0_mean_ious": 0.56151, "stage0_s": 0.0, "stage0_m": 0.04486, "stage0_l": 0.23893, "stage0_h": 0.59791, "stage1_loss_instance_mil": 0.04293, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.02561, "stage1_mean_ious": 0.54997, "stage1_s": 0.0, "stage1_m": 0.04797, "stage1_l": 0.23973, "stage1_h": 0.58371, "loss": 0.07259, "grad_norm": 3.40555, "time": 6.19635}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.53714, "stage0_loss_instance_mil": 0.00657, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.56307, "stage0_s": 0.0, "stage0_m": 0.06687, "stage0_l": 0.24226, "stage0_h": 0.61093, "stage1_loss_instance_mil": 0.04928, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.01998, "stage1_mean_ious": 0.54276, "stage1_s": 0.0, "stage1_m": 0.07141, "stage1_l": 0.26101, "stage1_h": 0.58363, "loss": 0.07583, "grad_norm": 3.05071, "time": 4.64758}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.1677, "stage0_loss_instance_mil": 0.00224, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.55256, "stage0_s": 0.0, "stage0_m": 0.05463, "stage0_l": 0.23507, "stage0_h": 0.59185, "stage1_loss_instance_mil": 0.03982, "stage1_bag_acc": 99.77143, "stage1_neg_loss": 0.02771, "stage1_mean_ious": 0.53321, "stage1_s": 0.0, "stage1_m": 0.0504, "stage1_l": 0.23406, "stage1_h": 0.56953, "loss": 0.06977, "grad_norm": 3.50315, "time": 2.50119}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 1.45868, "stage0_loss_instance_mil": 0.00567, "stage0_bag_acc": 99.77124, "stage0_mean_ious": 0.56542, "stage0_s": 0.0, "stage0_m": 0.05856, "stage0_l": 0.22173, "stage0_h": 0.60659, "stage1_loss_instance_mil": 0.04253, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.02069, "stage1_mean_ious": 0.54419, "stage1_s": 0.0, "stage1_m": 0.06152, "stage1_l": 0.22129, "stage1_h": 0.58135, "loss": 0.06888, "grad_norm": 3.00061, "time": 11.25129}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.58575, "stage0_loss_instance_mil": 0.0018, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.54298, "stage0_s": 0.0, "stage0_m": 0.0643, "stage0_l": 0.22099, "stage0_h": 0.59239, "stage1_loss_instance_mil": 0.04406, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02071, "stage1_mean_ious": 0.52102, "stage1_s": 0.0, "stage1_m": 0.07312, "stage1_l": 0.23842, "stage1_h": 0.56475, "loss": 0.06656, "grad_norm": 3.16438, "time": 6.40317}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.22416, "stage0_loss_instance_mil": 0.00262, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.5579, "stage0_s": 0.0, "stage0_m": 0.03381, "stage0_l": 0.24971, "stage0_h": 0.6018, "stage1_loss_instance_mil": 0.03811, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.0241, "stage1_mean_ious": 0.54247, "stage1_s": 0.0, "stage1_m": 0.03575, "stage1_l": 0.26787, "stage1_h": 0.58023, "loss": 0.06483, "grad_norm": 3.24089, "time": 3.2471}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.251, "bbox_mAP_50": 0.555, "bbox_mAP_75": 0.428, "bbox_mAP_s": 0.278, "bbox_mAP_m": 0.199, "bbox_mAP_l": 0.123, "bbox_mAP_copypaste": "0.251 0.555 0.428 0.278 0.199 0.123"}
