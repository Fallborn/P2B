{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09794, "stage0_loss_instance_mil": 0.69902, "stage0_bag_acc": 22.77469, "stage0_mean_ious": 0.32583, "stage0_s": 0.0, "stage0_m": 0.0289, "stage0_l": 0.22273, "stage0_h": 0.33813, "stage1_loss_instance_mil": 0.17245, "stage1_bag_acc": 15.46028, "stage1_neg_loss": 0.00321, "stage1_mean_ious": 0.32459, "stage1_s": 0.0, "stage1_m": 0.02704, "stage1_l": 0.2225, "stage1_h": 0.33605, "loss": 0.87468, "grad_norm": 3.43263, "time": 1.76281}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04418, "stage0_loss_instance_mil": 0.57447, "stage0_bag_acc": 48.64531, "stage0_mean_ious": 0.4043, "stage0_s": 0.0, "stage0_m": 0.02689, "stage0_l": 0.25477, "stage0_h": 0.42064, "stage1_loss_instance_mil": 0.24087, "stage1_bag_acc": 36.65963, "stage1_neg_loss": 0.00657, "stage1_mean_ious": 0.39216, "stage1_s": 0.0, "stage1_m": 0.03228, "stage1_l": 0.24814, "stage1_h": 0.40774, "loss": 0.82191, "grad_norm": 3.86708, "time": 1.70263}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04243, "stage0_loss_instance_mil": 0.26276, "stage0_bag_acc": 88.45264, "stage0_mean_ious": 0.49496, "stage0_s": 0.00117, "stage0_m": 0.04889, "stage0_l": 0.28679, "stage0_h": 0.5168, "stage1_loss_instance_mil": 0.3222, "stage1_bag_acc": 82.7273, "stage1_neg_loss": 0.06223, "stage1_mean_ious": 0.46493, "stage1_s": 0.00124, "stage1_m": 0.04572, "stage1_l": 0.27451, "stage1_h": 0.48484, "loss": 0.64719, "grad_norm": 9.31856, "time": 1.68596}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.09685, "stage0_loss_instance_mil": 0.08092, "stage0_bag_acc": 95.9588, "stage0_mean_ious": 0.48531, "stage0_s": 0.0, "stage0_m": 0.07158, "stage0_l": 0.18713, "stage0_h": 0.51731, "stage1_loss_instance_mil": 0.30612, "stage1_bag_acc": 97.46955, "stage1_neg_loss": 0.08554, "stage1_mean_ious": 0.45639, "stage1_s": 0.0, "stage1_m": 0.07992, "stage1_l": 0.18998, "stage1_h": 0.48267, "loss": 0.47258, "grad_norm": 11.88949, "time": 1.74729}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04433, "stage0_loss_instance_mil": 0.05865, "stage0_bag_acc": 96.71351, "stage0_mean_ious": 0.46618, "stage0_s": 0.00168, "stage0_m": 0.09423, "stage0_l": 0.23424, "stage0_h": 0.50984, "stage1_loss_instance_mil": 0.29507, "stage1_bag_acc": 96.95348, "stage1_neg_loss": 0.07983, "stage1_mean_ious": 0.44503, "stage1_s": 0.00138, "stage1_m": 0.10028, "stage1_l": 0.2466, "stage1_h": 0.48201, "loss": 0.43355, "grad_norm": 13.00777, "time": 1.67397}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.0444, "stage0_loss_instance_mil": 0.0634, "stage0_bag_acc": 96.33979, "stage0_mean_ious": 0.49232, "stage0_s": 0.0, "stage0_m": 0.05127, "stage0_l": 0.22433, "stage0_h": 0.52553, "stage1_loss_instance_mil": 0.29, "stage1_bag_acc": 98.0829, "stage1_neg_loss": 0.09128, "stage1_mean_ious": 0.46163, "stage1_s": 0.0, "stage1_m": 0.05579, "stage1_l": 0.23694, "stage1_h": 0.49016, "loss": 0.44468, "grad_norm": 17.38602, "time": 1.68527}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09774, "stage0_loss_instance_mil": 0.0367, "stage0_bag_acc": 98.10917, "stage0_mean_ious": 0.47222, "stage0_s": 0.0, "stage0_m": 0.05824, "stage0_l": 0.18384, "stage0_h": 0.51105, "stage1_loss_instance_mil": 0.25269, "stage1_bag_acc": 99.14056, "stage1_neg_loss": 0.07248, "stage1_mean_ious": 0.44625, "stage1_s": 0.0, "stage1_m": 0.05809, "stage1_l": 0.19755, "stage1_h": 0.47685, "loss": 0.36187, "grad_norm": 13.35339, "time": 1.7467}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0442, "stage0_loss_instance_mil": 0.03354, "stage0_bag_acc": 97.84519, "stage0_mean_ious": 0.46617, "stage0_s": 0.0, "stage0_m": 0.03822, "stage0_l": 0.20128, "stage0_h": 0.50218, "stage1_loss_instance_mil": 0.21809, "stage1_bag_acc": 98.1422, "stage1_neg_loss": 0.07455, "stage1_mean_ious": 0.44048, "stage1_s": 0.0, "stage1_m": 0.03765, "stage1_l": 0.22552, "stage1_h": 0.46738, "loss": 0.32618, "grad_norm": 12.16529, "time": 1.69411}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04454, "stage0_loss_instance_mil": 0.02823, "stage0_bag_acc": 98.35874, "stage0_mean_ious": 0.49965, "stage0_s": 0.0, "stage0_m": 0.04156, "stage0_l": 0.2038, "stage0_h": 0.53246, "stage1_loss_instance_mil": 0.21609, "stage1_bag_acc": 98.84034, "stage1_neg_loss": 0.06691, "stage1_mean_ious": 0.47163, "stage1_s": 0.0, "stage1_m": 0.04155, "stage1_l": 0.22789, "stage1_h": 0.49668, "loss": 0.31123, "grad_norm": 13.60314, "time": 1.69342}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09941, "stage0_loss_instance_mil": 0.04274, "stage0_bag_acc": 97.52402, "stage0_mean_ious": 0.51037, "stage0_s": 0.0, "stage0_m": 0.01905, "stage0_l": 0.17726, "stage0_h": 0.53302, "stage1_loss_instance_mil": 0.18565, "stage1_bag_acc": 98.01799, "stage1_neg_loss": 0.06432, "stage1_mean_ious": 0.48183, "stage1_s": 0.0, "stage1_m": 0.02182, "stage1_l": 0.188, "stage1_h": 0.49992, "loss": 0.2927, "grad_norm": 12.10772, "time": 1.76846}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04293, "stage0_loss_instance_mil": 0.01424, "stage0_bag_acc": 99.46384, "stage0_mean_ious": 0.53263, "stage0_s": 0.0, "stage0_m": 0.0594, "stage0_l": 0.2014, "stage0_h": 0.57353, "stage1_loss_instance_mil": 0.15076, "stage1_bag_acc": 99.35095, "stage1_neg_loss": 0.05771, "stage1_mean_ious": 0.51525, "stage1_s": 0.0, "stage1_m": 0.06953, "stage1_l": 0.21608, "stage1_h": 0.54927, "loss": 0.22271, "grad_norm": 10.39024, "time": 1.70762}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0414, "stage0_loss_instance_mil": 0.01636, "stage0_bag_acc": 98.79639, "stage0_mean_ious": 0.52037, "stage0_s": 0.0, "stage0_m": 0.07995, "stage0_l": 0.21358, "stage0_h": 0.56148, "stage1_loss_instance_mil": 0.14488, "stage1_bag_acc": 99.45378, "stage1_neg_loss": 0.05275, "stage1_mean_ious": 0.50957, "stage1_s": 0.0, "stage1_m": 0.08965, "stage1_l": 0.23302, "stage1_h": 0.54403, "loss": 0.214, "grad_norm": 9.83788, "time": 1.66726}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09221, "stage0_loss_instance_mil": 0.01003, "stage0_bag_acc": 99.47913, "stage0_mean_ious": 0.53161, "stage0_s": 0.0, "stage0_m": 0.07747, "stage0_l": 0.27048, "stage0_h": 0.57675, "stage1_loss_instance_mil": 0.11416, "stage1_bag_acc": 99.66609, "stage1_neg_loss": 0.04972, "stage1_mean_ious": 0.51918, "stage1_s": 0.0, "stage1_m": 0.0898, "stage1_l": 0.29321, "stage1_h": 0.55688, "loss": 0.17391, "grad_norm": 9.53946, "time": 1.7126}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04716, "stage0_loss_instance_mil": 0.01724, "stage0_bag_acc": 98.90079, "stage0_mean_ious": 0.59452, "stage0_s": 0.0, "stage0_m": 0.04941, "stage0_l": 0.24852, "stage0_h": 0.62986, "stage1_loss_instance_mil": 0.11173, "stage1_bag_acc": 99.45436, "stage1_neg_loss": 0.04608, "stage1_mean_ious": 0.58592, "stage1_s": 0.0, "stage1_m": 0.05277, "stage1_l": 0.26582, "stage1_h": 0.61749, "loss": 0.17505, "grad_norm": 9.9539, "time": 1.7177}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04755, "stage0_loss_instance_mil": 0.02398, "stage0_bag_acc": 98.91136, "stage0_mean_ious": 0.57433, "stage0_s": 0.0, "stage0_m": 0.05784, "stage0_l": 0.2444, "stage0_h": 0.61396, "stage1_loss_instance_mil": 0.1082, "stage1_bag_acc": 98.48935, "stage1_neg_loss": 0.03803, "stage1_mean_ious": 0.56149, "stage1_s": 0.0, "stage1_m": 0.06571, "stage1_l": 0.25803, "stage1_h": 0.59691, "loss": 0.17021, "grad_norm": 8.5264, "time": 1.71954}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09965, "stage0_loss_instance_mil": 0.00552, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.61201, "stage0_s": 0.0, "stage0_m": 0.04368, "stage0_l": 0.31166, "stage0_h": 0.6444, "stage1_loss_instance_mil": 0.07438, "stage1_bag_acc": 99.76974, "stage1_neg_loss": 0.03155, "stage1_mean_ious": 0.59453, "stage1_s": 0.0, "stage1_m": 0.05007, "stage1_l": 0.33792, "stage1_h": 0.621, "loss": 0.11145, "grad_norm": 5.94995, "time": 1.77249}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04593, "stage0_loss_instance_mil": 0.00735, "stage0_bag_acc": 99.65079, "stage0_mean_ious": 0.57494, "stage0_s": 0.0, "stage0_m": 0.03872, "stage0_l": 0.32304, "stage0_h": 0.61231, "stage1_loss_instance_mil": 0.07172, "stage1_bag_acc": 99.72807, "stage1_neg_loss": 0.03065, "stage1_mean_ious": 0.56052, "stage1_s": 0.0, "stage1_m": 0.04436, "stage1_l": 0.33009, "stage1_h": 0.59217, "loss": 0.10973, "grad_norm": 5.64517, "time": 1.69916}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0456, "stage0_loss_instance_mil": 0.01091, "stage0_bag_acc": 99.362, "stage0_mean_ious": 0.60207, "stage0_s": 0.0, "stage0_m": 0.04956, "stage0_l": 0.30783, "stage0_h": 0.63437, "stage1_loss_instance_mil": 0.06965, "stage1_bag_acc": 99.61569, "stage1_neg_loss": 0.03228, "stage1_mean_ious": 0.58972, "stage1_s": 0.0, "stage1_m": 0.0538, "stage1_l": 0.32976, "stage1_h": 0.61628, "loss": 0.11284, "grad_norm": 5.79383, "time": 1.69469}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.31, "bbox_mAP_50": 0.639, "bbox_mAP_75": 0.527, "bbox_mAP_s": 0.36, "bbox_mAP_m": 0.273, "bbox_mAP_l": 0.165, "bbox_mAP_copypaste": "0.310 0.639 0.527 0.360 0.273 0.165"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09725, "stage0_loss_instance_mil": 0.01139, "stage0_bag_acc": 99.52884, "stage0_mean_ious": 0.59938, "stage0_s": 0.0, "stage0_m": 0.05359, "stage0_l": 0.29979, "stage0_h": 0.64195, "stage1_loss_instance_mil": 0.05848, "stage1_bag_acc": 99.69856, "stage1_neg_loss": 0.02815, "stage1_mean_ious": 0.58923, "stage1_s": 0.0, "stage1_m": 0.05804, "stage1_l": 0.32138, "stage1_h": 0.62584, "loss": 0.09803, "grad_norm": 4.81806, "time": 1.71019}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04571, "stage0_loss_instance_mil": 0.03051, "stage0_bag_acc": 98.25974, "stage0_mean_ious": 0.60489, "stage0_s": 0.0, "stage0_m": 0.04753, "stage0_l": 0.32663, "stage0_h": 0.63076, "stage1_loss_instance_mil": 0.08017, "stage1_bag_acc": 98.98953, "stage1_neg_loss": 0.03304, "stage1_mean_ious": 0.59256, "stage1_s": 0.0, "stage1_m": 0.05554, "stage1_l": 0.34116, "stage1_h": 0.61308, "loss": 0.14372, "grad_norm": 6.33925, "time": 1.6966}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04375, "stage0_loss_instance_mil": 0.01706, "stage0_bag_acc": 99.33986, "stage0_mean_ious": 0.59379, "stage0_s": 0.0, "stage0_m": 0.03812, "stage0_l": 0.28806, "stage0_h": 0.63287, "stage1_loss_instance_mil": 0.0718, "stage1_bag_acc": 99.22875, "stage1_neg_loss": 0.03733, "stage1_mean_ious": 0.58597, "stage1_s": 0.0, "stage1_m": 0.04205, "stage1_l": 0.31094, "stage1_h": 0.62156, "loss": 0.1262, "grad_norm": 5.35209, "time": 1.6437}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09617, "stage0_loss_instance_mil": 0.01096, "stage0_bag_acc": 99.4333, "stage0_mean_ious": 0.58146, "stage0_s": 0.0, "stage0_m": 0.04804, "stage0_l": 0.24348, "stage0_h": 0.62023, "stage1_loss_instance_mil": 0.07406, "stage1_bag_acc": 99.74902, "stage1_neg_loss": 0.03307, "stage1_mean_ious": 0.56788, "stage1_s": 0.0, "stage1_m": 0.05756, "stage1_l": 0.26167, "stage1_h": 0.5998, "loss": 0.11809, "grad_norm": 5.54285, "time": 1.73415}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04419, "stage0_loss_instance_mil": 0.00978, "stage0_bag_acc": 99.39701, "stage0_mean_ious": 0.60976, "stage0_s": 0.0, "stage0_m": 0.02634, "stage0_l": 0.28736, "stage0_h": 0.64229, "stage1_loss_instance_mil": 0.05844, "stage1_bag_acc": 99.54077, "stage1_neg_loss": 0.02849, "stage1_mean_ious": 0.59773, "stage1_s": 0.0, "stage1_m": 0.03, "stage1_l": 0.32044, "stage1_h": 0.62417, "loss": 0.09671, "grad_norm": 4.43119, "time": 1.6993}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04345, "stage0_loss_instance_mil": 0.01167, "stage0_bag_acc": 99.06371, "stage0_mean_ious": 0.59247, "stage0_s": 0.0, "stage0_m": 0.07706, "stage0_l": 0.33753, "stage0_h": 0.63629, "stage1_loss_instance_mil": 0.06127, "stage1_bag_acc": 99.33953, "stage1_neg_loss": 0.02695, "stage1_mean_ious": 0.58664, "stage1_s": 0.0, "stage1_m": 0.0871, "stage1_l": 0.37584, "stage1_h": 0.62234, "loss": 0.0999, "grad_norm": 4.64991, "time": 1.71513}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09572, "stage0_loss_instance_mil": 0.00444, "stage0_bag_acc": 99.78235, "stage0_mean_ious": 0.59631, "stage0_s": 0.0, "stage0_m": 0.02947, "stage0_l": 0.31327, "stage0_h": 0.62657, "stage1_loss_instance_mil": 0.04535, "stage1_bag_acc": 99.68618, "stage1_neg_loss": 0.01969, "stage1_mean_ious": 0.58082, "stage1_s": 0.0, "stage1_m": 0.03924, "stage1_l": 0.32409, "stage1_h": 0.60521, "loss": 0.06948, "grad_norm": 3.45405, "time": 1.72924}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04426, "stage0_loss_instance_mil": 0.01003, "stage0_bag_acc": 99.53884, "stage0_mean_ious": 0.60218, "stage0_s": 0.0, "stage0_m": 0.07669, "stage0_l": 0.32801, "stage0_h": 0.63243, "stage1_loss_instance_mil": 0.03773, "stage1_bag_acc": 99.53884, "stage1_neg_loss": 0.02934, "stage1_mean_ious": 0.59894, "stage1_s": 0.0, "stage1_m": 0.08093, "stage1_l": 0.34343, "stage1_h": 0.62636, "loss": 0.0771, "grad_norm": 4.00181, "time": 1.67514}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04358, "stage0_loss_instance_mil": 0.00348, "stage0_bag_acc": 99.77778, "stage0_mean_ious": 0.60498, "stage0_s": 0.0, "stage0_m": 0.08696, "stage0_l": 0.30021, "stage0_h": 0.63992, "stage1_loss_instance_mil": 0.03804, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.01989, "stage1_mean_ious": 0.59909, "stage1_s": 0.0, "stage1_m": 0.09983, "stage1_l": 0.31056, "stage1_h": 0.62968, "loss": 0.06141, "grad_norm": 3.14589, "time": 1.70029}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09804, "stage0_loss_instance_mil": 0.00356, "stage0_bag_acc": 99.67183, "stage0_mean_ious": 0.60696, "stage0_s": 0.0, "stage0_m": 0.02481, "stage0_l": 0.31167, "stage0_h": 0.64054, "stage1_loss_instance_mil": 0.0338, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.01962, "stage1_mean_ious": 0.59733, "stage1_s": 0.0, "stage1_m": 0.02957, "stage1_l": 0.32526, "stage1_h": 0.62621, "loss": 0.05698, "grad_norm": 2.78335, "time": 1.73682}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04524, "stage0_loss_instance_mil": 0.00945, "stage0_bag_acc": 99.45577, "stage0_mean_ious": 0.58118, "stage0_s": 0.0, "stage0_m": 0.07293, "stage0_l": 0.33306, "stage0_h": 0.61499, "stage1_loss_instance_mil": 0.03506, "stage1_bag_acc": 99.77976, "stage1_neg_loss": 0.02583, "stage1_mean_ious": 0.57469, "stage1_s": 0.0, "stage1_m": 0.07678, "stage1_l": 0.36291, "stage1_h": 0.60298, "loss": 0.07034, "grad_norm": 3.69023, "time": 1.71275}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.0441, "stage0_loss_instance_mil": 0.00325, "stage0_bag_acc": 99.71902, "stage0_mean_ious": 0.60738, "stage0_s": 0.0, "stage0_m": 0.06466, "stage0_l": 0.35048, "stage0_h": 0.64274, "stage1_loss_instance_mil": 0.03735, "stage1_bag_acc": 99.92, "stage1_neg_loss": 0.01923, "stage1_mean_ious": 0.60195, "stage1_s": 0.0, "stage1_m": 0.07405, "stage1_l": 0.36978, "stage1_h": 0.63251, "loss": 0.05982, "grad_norm": 3.18556, "time": 1.6873}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.09617, "stage0_loss_instance_mil": 0.00315, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.59255, "stage0_s": 0.00117, "stage0_m": 0.07255, "stage0_l": 0.28618, "stage0_h": 0.62352, "stage1_loss_instance_mil": 0.03038, "stage1_bag_acc": 99.82609, "stage1_neg_loss": 0.01816, "stage1_mean_ious": 0.58615, "stage1_s": 0.00122, "stage1_m": 0.07235, "stage1_l": 0.30654, "stage1_h": 0.61124, "loss": 0.05169, "grad_norm": 2.71618, "time": 1.72475}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.04486, "stage0_loss_instance_mil": 0.00825, "stage0_bag_acc": 99.7, "stage0_mean_ious": 0.60573, "stage0_s": 0.0, "stage0_m": 0.08607, "stage0_l": 0.34757, "stage0_h": 0.63501, "stage1_loss_instance_mil": 0.03204, "stage1_bag_acc": 99.675, "stage1_neg_loss": 0.02203, "stage1_mean_ious": 0.59167, "stage1_s": 0.0, "stage1_m": 0.08748, "stage1_l": 0.36856, "stage1_h": 0.61546, "loss": 0.06232, "grad_norm": 3.01741, "time": 1.69868}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.0449, "stage0_loss_instance_mil": 0.00209, "stage0_bag_acc": 99.86667, "stage0_mean_ious": 0.60855, "stage0_s": 0.0, "stage0_m": 0.0917, "stage0_l": 0.36129, "stage0_h": 0.64207, "stage1_loss_instance_mil": 0.03534, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02519, "stage1_mean_ious": 0.60206, "stage1_s": 0.0, "stage1_m": 0.11055, "stage1_l": 0.37335, "stage1_h": 0.6298, "loss": 0.06262, "grad_norm": 3.47734, "time": 1.71293}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.10071, "stage0_loss_instance_mil": 0.00229, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.59143, "stage0_s": 0.00117, "stage0_m": 0.07945, "stage0_l": 0.31826, "stage0_h": 0.6196, "stage1_loss_instance_mil": 0.03333, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.01683, "stage1_mean_ious": 0.58877, "stage1_s": 0.00123, "stage1_m": 0.08945, "stage1_l": 0.32655, "stage1_h": 0.61223, "loss": 0.05245, "grad_norm": 2.90674, "time": 1.75186}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.0447, "stage0_loss_instance_mil": 0.00437, "stage0_bag_acc": 99.69798, "stage0_mean_ious": 0.6096, "stage0_s": 0.0, "stage0_m": 0.03751, "stage0_l": 0.30212, "stage0_h": 0.64709, "stage1_loss_instance_mil": 0.02823, "stage1_bag_acc": 99.90909, "stage1_neg_loss": 0.02139, "stage1_mean_ious": 0.59812, "stage1_s": 0.0, "stage1_m": 0.03906, "stage1_l": 0.32951, "stage1_h": 0.63049, "loss": 0.054, "grad_norm": 2.98019, "time": 1.71288}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.04277, "stage0_loss_instance_mil": 0.00593, "stage0_bag_acc": 99.86667, "stage0_mean_ious": 0.6161, "stage0_s": 0.0, "stage0_m": 0.06969, "stage0_l": 0.33984, "stage0_h": 0.65278, "stage1_loss_instance_mil": 0.03389, "stage1_bag_acc": 99.76667, "stage1_neg_loss": 0.02134, "stage1_mean_ious": 0.60301, "stage1_s": 0.0, "stage1_m": 0.07261, "stage1_l": 0.36312, "stage1_h": 0.63131, "loss": 0.06116, "grad_norm": 3.20998, "time": 1.6493}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.318, "bbox_mAP_50": 0.691, "bbox_mAP_75": 0.54, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.254, "bbox_mAP_l": 0.157, "bbox_mAP_copypaste": "0.318 0.691 0.540 0.353 0.254 0.157"}
