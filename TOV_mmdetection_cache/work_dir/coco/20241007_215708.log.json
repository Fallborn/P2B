{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+963dd25", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=12,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 16742, "data_time": 0.0762, "stage0_loss_instance_mil": 0.65723, "stage0_bag_acc": 32.33886, "stage0_mean_ious": 0.33738, "stage0_s": 0.0, "stage0_m": 0.03549, "stage0_l": 0.19912, "stage0_h": 0.35707, "stage1_loss_instance_mil": 0.18447, "stage1_bag_acc": 24.65686, "stage1_neg_loss": 0.00906, "stage1_mean_ious": 0.32167, "stage1_s": 0.0, "stage1_m": 0.03694, "stage1_l": 0.20349, "stage1_h": 0.3385, "loss": 0.85075, "grad_norm": 3.65803, "time": 1.50324}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 16742, "data_time": 0.03495, "stage0_loss_instance_mil": 0.36194, "stage0_bag_acc": 67.81544, "stage0_mean_ious": 0.43139, "stage0_s": 0.0, "stage0_m": 0.02678, "stage0_l": 0.20504, "stage0_h": 0.45813, "stage1_loss_instance_mil": 0.30324, "stage1_bag_acc": 60.02113, "stage1_neg_loss": 0.05439, "stage1_mean_ious": 0.42287, "stage1_s": 0.0, "stage1_m": 0.02979, "stage1_l": 0.21985, "stage1_h": 0.44499, "loss": 0.71958, "grad_norm": 6.57908, "time": 1.47869}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 16742, "data_time": 0.02967, "stage0_loss_instance_mil": 0.26909, "stage0_bag_acc": 83.41986, "stage0_mean_ious": 0.34161, "stage0_s": 0.0, "stage0_m": 0.07795, "stage0_l": 0.25055, "stage0_h": 0.34723, "stage1_loss_instance_mil": 0.43664, "stage1_bag_acc": 62.43747, "stage1_neg_loss": 0.06195, "stage1_mean_ious": 0.3499, "stage1_s": 0.0, "stage1_m": 0.08189, "stage1_l": 0.26439, "stage1_h": 0.35447, "loss": 0.76768, "grad_norm": 6.52187, "time": 1.46921}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00917, "memory": 16742, "data_time": 0.08251, "stage0_loss_instance_mil": 0.25278, "stage0_bag_acc": 81.79136, "stage0_mean_ious": 0.40937, "stage0_s": 0.0, "stage0_m": 0.04173, "stage0_l": 0.20631, "stage0_h": 0.43735, "stage1_loss_instance_mil": 0.34877, "stage1_bag_acc": 69.93, "stage1_neg_loss": 0.05137, "stage1_mean_ious": 0.42286, "stage1_s": 0.0, "stage1_m": 0.04489, "stage1_l": 0.22902, "stage1_h": 0.44958, "loss": 0.65292, "grad_norm": 4.4882, "time": 1.43623}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01117, "memory": 16742, "data_time": 0.02738, "stage0_loss_instance_mil": 0.25469, "stage0_bag_acc": 78.01785, "stage0_mean_ious": 0.37011, "stage0_s": 0.0, "stage0_m": 0.02573, "stage0_l": 0.22599, "stage0_h": 0.38852, "stage1_loss_instance_mil": 0.29841, "stage1_bag_acc": 69.136, "stage1_neg_loss": 0.05591, "stage1_mean_ious": 0.37929, "stage1_s": 0.0, "stage1_m": 0.0277, "stage1_l": 0.22879, "stage1_h": 0.39766, "loss": 0.60901, "grad_norm": 4.38031, "time": 1.42229}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01317, "memory": 16742, "data_time": 0.03271, "stage0_loss_instance_mil": 0.23066, "stage0_bag_acc": 83.15558, "stage0_mean_ious": 0.36811, "stage0_s": 0.0, "stage0_m": 0.06472, "stage0_l": 0.22945, "stage0_h": 0.38266, "stage1_loss_instance_mil": 0.29233, "stage1_bag_acc": 73.16613, "stage1_neg_loss": 0.05846, "stage1_mean_ious": 0.38064, "stage1_s": 0.0, "stage1_m": 0.06526, "stage1_l": 0.25129, "stage1_h": 0.39364, "loss": 0.58145, "grad_norm": 3.75567, "time": 1.48036}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01636, "memory": 16742, "data_time": 0.07807, "stage0_loss_instance_mil": 0.26342, "stage0_bag_acc": 81.43098, "stage0_mean_ious": 0.36703, "stage0_s": 0.0, "stage0_m": 0.02183, "stage0_l": 0.21875, "stage0_h": 0.37607, "stage1_loss_instance_mil": 0.28169, "stage1_bag_acc": 72.90426, "stage1_neg_loss": 0.04366, "stage1_mean_ious": 0.36772, "stage1_s": 0.0, "stage1_m": 0.01726, "stage1_l": 0.23404, "stage1_h": 0.37572, "loss": 0.58877, "grad_norm": 3.49669, "time": 1.52368}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01836, "memory": 16742, "data_time": 0.03703, "stage0_loss_instance_mil": 0.2682, "stage0_bag_acc": 78.84763, "stage0_mean_ious": 0.36663, "stage0_s": 0.0, "stage0_m": 0.04488, "stage0_l": 0.17979, "stage0_h": 0.383, "stage1_loss_instance_mil": 0.23164, "stage1_bag_acc": 78.91883, "stage1_neg_loss": 0.0573, "stage1_mean_ious": 0.36911, "stage1_s": 0.0, "stage1_m": 0.04652, "stage1_l": 0.18093, "stage1_h": 0.38382, "loss": 0.55714, "grad_norm": 4.1666, "time": 1.479}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03081, "stage0_loss_instance_mil": 0.36908, "stage0_bag_acc": 70.26112, "stage0_mean_ious": 0.33423, "stage0_s": 0.0, "stage0_m": 0.06266, "stage0_l": 0.23093, "stage0_h": 0.3449, "stage1_loss_instance_mil": 0.31425, "stage1_bag_acc": 62.00799, "stage1_neg_loss": 0.04366, "stage1_mean_ious": 0.33995, "stage1_s": 0.0, "stage1_m": 0.05405, "stage1_l": 0.24639, "stage1_h": 0.35014, "loss": 0.72699, "grad_norm": 3.10857, "time": 1.45902}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08826, "stage0_loss_instance_mil": 0.26704, "stage0_bag_acc": 80.9269, "stage0_mean_ious": 0.3937, "stage0_s": 0.0, "stage0_m": 0.04224, "stage0_l": 0.21349, "stage0_h": 0.41966, "stage1_loss_instance_mil": 0.29888, "stage1_bag_acc": 66.62836, "stage1_neg_loss": 0.04508, "stage1_mean_ious": 0.40672, "stage1_s": 0.0, "stage1_m": 0.04319, "stage1_l": 0.22555, "stage1_h": 0.43285, "loss": 0.61099, "grad_norm": 2.82789, "time": 1.52535}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02571, "stage0_loss_instance_mil": 0.16921, "stage0_bag_acc": 88.26046, "stage0_mean_ious": 0.37352, "stage0_s": 0.0, "stage0_m": 0.0198, "stage0_l": 0.26755, "stage0_h": 0.38101, "stage1_loss_instance_mil": 0.31547, "stage1_bag_acc": 79.53974, "stage1_neg_loss": 0.05119, "stage1_mean_ious": 0.40389, "stage1_s": 0.0, "stage1_m": 0.02271, "stage1_l": 0.3014, "stage1_h": 0.40957, "loss": 0.53587, "grad_norm": 2.67517, "time": 1.4468}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.0345, "stage0_loss_instance_mil": 0.22548, "stage0_bag_acc": 83.55161, "stage0_mean_ious": 0.33255, "stage0_s": 0.0, "stage0_m": 0.04384, "stage0_l": 0.24559, "stage0_h": 0.33805, "stage1_loss_instance_mil": 0.2992, "stage1_bag_acc": 75.6355, "stage1_neg_loss": 0.04649, "stage1_mean_ious": 0.35157, "stage1_s": 0.0, "stage1_m": 0.04548, "stage1_l": 0.27457, "stage1_h": 0.35556, "loss": 0.57117, "grad_norm": 2.66156, "time": 1.46097}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07575, "stage0_loss_instance_mil": 0.14371, "stage0_bag_acc": 90.85237, "stage0_mean_ious": 0.35439, "stage0_s": 0.0, "stage0_m": 0.06, "stage0_l": 0.2768, "stage0_h": 0.36227, "stage1_loss_instance_mil": 0.31573, "stage1_bag_acc": 78.21376, "stage1_neg_loss": 0.03849, "stage1_mean_ious": 0.37926, "stage1_s": 0.0, "stage1_m": 0.06909, "stage1_l": 0.31251, "stage1_h": 0.38314, "loss": 0.49794, "grad_norm": 2.10185, "time": 1.48736}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.03918, "stage0_loss_instance_mil": 0.13534, "stage0_bag_acc": 91.41201, "stage0_mean_ious": 0.36665, "stage0_s": 0.0, "stage0_m": 0.06598, "stage0_l": 0.26703, "stage0_h": 0.37801, "stage1_loss_instance_mil": 0.21098, "stage1_bag_acc": 92.46373, "stage1_neg_loss": 0.05489, "stage1_mean_ious": 0.38818, "stage1_s": 0.0, "stage1_m": 0.07152, "stage1_l": 0.29621, "stage1_h": 0.39732, "loss": 0.4012, "grad_norm": 2.54156, "time": 1.5172}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02855, "stage0_loss_instance_mil": 0.15575, "stage0_bag_acc": 88.38449, "stage0_mean_ious": 0.39872, "stage0_s": 0.0, "stage0_m": 0.09213, "stage0_l": 0.2786, "stage0_h": 0.40739, "stage1_loss_instance_mil": 0.2304, "stage1_bag_acc": 84.42546, "stage1_neg_loss": 0.04602, "stage1_mean_ious": 0.42632, "stage1_s": 0.0, "stage1_m": 0.09561, "stage1_l": 0.33378, "stage1_h": 0.43092, "loss": 0.43216, "grad_norm": 2.77118, "time": 1.43933}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.08315, "stage0_loss_instance_mil": 0.08189, "stage0_bag_acc": 94.86771, "stage0_mean_ious": 0.35885, "stage0_s": 0.0, "stage0_m": 0.04326, "stage0_l": 0.29786, "stage0_h": 0.36078, "stage1_loss_instance_mil": 0.21296, "stage1_bag_acc": 94.51044, "stage1_neg_loss": 0.05626, "stage1_mean_ious": 0.37717, "stage1_s": 0.0, "stage1_m": 0.04991, "stage1_l": 0.35507, "stage1_h": 0.37224, "loss": 0.35111, "grad_norm": 1.92451, "time": 1.53712}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.02722, "stage0_loss_instance_mil": 0.0539, "stage0_bag_acc": 96.67428, "stage0_mean_ious": 0.3594, "stage0_s": 0.00135, "stage0_m": 0.05096, "stage0_l": 0.28549, "stage0_h": 0.36366, "stage1_loss_instance_mil": 0.22328, "stage1_bag_acc": 91.36992, "stage1_neg_loss": 0.04744, "stage1_mean_ious": 0.37626, "stage1_s": 0.00189, "stage1_m": 0.06045, "stage1_l": 0.32715, "stage1_h": 0.37397, "loss": 0.32461, "grad_norm": 1.79548, "time": 1.46778}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.03751, "stage0_loss_instance_mil": 0.07753, "stage0_bag_acc": 95.16874, "stage0_mean_ious": 0.38491, "stage0_s": 0.0, "stage0_m": 0.06954, "stage0_l": 0.26864, "stage0_h": 0.39593, "stage1_loss_instance_mil": 0.28089, "stage1_bag_acc": 91.71817, "stage1_neg_loss": 0.04876, "stage1_mean_ious": 0.39523, "stage1_s": 0.0, "stage1_m": 0.07274, "stage1_l": 0.31963, "stage1_h": 0.39922, "loss": 0.40718, "grad_norm": 2.03254, "time": 1.49512}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07988, "stage0_loss_instance_mil": 0.07182, "stage0_bag_acc": 96.52134, "stage0_mean_ious": 0.43389, "stage0_s": 0.0, "stage0_m": 0.09582, "stage0_l": 0.30712, "stage0_h": 0.44478, "stage1_loss_instance_mil": 0.25695, "stage1_bag_acc": 87.07573, "stage1_neg_loss": 0.04399, "stage1_mean_ious": 0.4385, "stage1_s": 0.0, "stage1_m": 0.10725, "stage1_l": 0.33654, "stage1_h": 0.44641, "loss": 0.37276, "grad_norm": 1.71353, "time": 1.53227}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 16742, "data_time": 0.03314, "stage0_loss_instance_mil": 0.05698, "stage0_bag_acc": 97.12315, "stage0_mean_ious": 0.45851, "stage0_s": 0.0, "stage0_m": 0.04569, "stage0_l": 0.28271, "stage0_h": 0.47496, "stage1_loss_instance_mil": 0.19916, "stage1_bag_acc": 93.74055, "stage1_neg_loss": 0.04789, "stage1_mean_ious": 0.48584, "stage1_s": 0.0, "stage1_m": 0.05464, "stage1_l": 0.31976, "stage1_h": 0.49946, "loss": 0.30402, "grad_norm": 1.9526, "time": 1.44826}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 16742, "data_time": 0.02994, "stage0_loss_instance_mil": 0.05802, "stage0_bag_acc": 96.41069, "stage0_mean_ious": 0.45824, "stage0_s": 0.0, "stage0_m": 0.05128, "stage0_l": 0.2603, "stage0_h": 0.47964, "stage1_loss_instance_mil": 0.1481, "stage1_bag_acc": 95.84492, "stage1_neg_loss": 0.04581, "stage1_mean_ious": 0.48498, "stage1_s": 0.0, "stage1_m": 0.05631, "stage1_l": 0.28136, "stage1_h": 0.50655, "loss": 0.25193, "grad_norm": 1.88669, "time": 1.48495}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 16742, "data_time": 0.07968, "stage0_loss_instance_mil": 0.04342, "stage0_bag_acc": 97.04888, "stage0_mean_ious": 0.47266, "stage0_s": 0.0, "stage0_m": 0.06217, "stage0_l": 0.32255, "stage0_h": 0.50071, "stage1_loss_instance_mil": 0.12457, "stage1_bag_acc": 97.0305, "stage1_neg_loss": 0.04384, "stage1_mean_ious": 0.49643, "stage1_s": 0.0, "stage1_m": 0.07546, "stage1_l": 0.35065, "stage1_h": 0.52206, "loss": 0.21183, "grad_norm": 1.6504, "time": 1.51317}
