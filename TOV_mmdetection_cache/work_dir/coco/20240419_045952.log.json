{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09685, "stage0_loss_instance_mil": 0.73388, "stage0_bag_acc": 12.68715, "stage0_mean_ious": 0.32262, "stage0_s": 0.0, "stage0_m": 0.06034, "stage0_l": 0.29974, "stage0_h": 0.31999, "stage1_loss_instance_mil": 0.15543, "stage1_bag_acc": 20.26364, "stage1_neg_loss": 0.00123, "stage1_mean_ious": 0.30429, "stage1_s": 0.0, "stage1_m": 0.0615, "stage1_l": 0.28137, "stage1_h": 0.30142, "loss": 0.89053, "grad_norm": 3.07137, "time": 1.74281}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04118, "stage0_loss_instance_mil": 0.60827, "stage0_bag_acc": 45.38813, "stage0_mean_ious": 0.34938, "stage0_s": 0.0, "stage0_m": 0.09039, "stage0_l": 0.2586, "stage0_h": 0.34716, "stage1_loss_instance_mil": 0.20464, "stage1_bag_acc": 29.34881, "stage1_neg_loss": 0.00575, "stage1_mean_ious": 0.33179, "stage1_s": 0.0, "stage1_m": 0.07545, "stage1_l": 0.24701, "stage1_h": 0.33035, "loss": 0.81867, "grad_norm": 3.38717, "time": 1.67034}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04158, "stage0_loss_instance_mil": 0.27696, "stage0_bag_acc": 89.58769, "stage0_mean_ious": 0.41539, "stage0_s": 0.0, "stage0_m": 0.0452, "stage0_l": 0.22547, "stage0_h": 0.43536, "stage1_loss_instance_mil": 0.29687, "stage1_bag_acc": 84.6285, "stage1_neg_loss": 0.06694, "stage1_mean_ious": 0.37968, "stage1_s": 0.0, "stage1_m": 0.03423, "stage1_l": 0.19029, "stage1_h": 0.40009, "loss": 0.64077, "grad_norm": 10.57385, "time": 1.6963}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.097, "stage0_loss_instance_mil": 0.07214, "stage0_bag_acc": 96.83785, "stage0_mean_ious": 0.40188, "stage0_s": 0.0, "stage0_m": 0.01778, "stage0_l": 0.18626, "stage0_h": 0.42126, "stage1_loss_instance_mil": 0.34687, "stage1_bag_acc": 97.42529, "stage1_neg_loss": 0.09985, "stage1_mean_ious": 0.38078, "stage1_s": 0.0, "stage1_m": 0.0131, "stage1_l": 0.16478, "stage1_h": 0.40212, "loss": 0.51886, "grad_norm": 16.45652, "time": 1.74864}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04168, "stage0_loss_instance_mil": 0.06236, "stage0_bag_acc": 96.1065, "stage0_mean_ious": 0.3522, "stage0_s": 0.00181, "stage0_m": 0.05427, "stage0_l": 0.18548, "stage0_h": 0.36809, "stage1_loss_instance_mil": 0.34565, "stage1_bag_acc": 96.55495, "stage1_neg_loss": 0.09958, "stage1_mean_ious": 0.33508, "stage1_s": 0.00155, "stage1_m": 0.04014, "stage1_l": 0.17398, "stage1_h": 0.3531, "loss": 0.50759, "grad_norm": 17.09402, "time": 1.69614}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04127, "stage0_loss_instance_mil": 0.04953, "stage0_bag_acc": 97.26466, "stage0_mean_ious": 0.3149, "stage0_s": 0.0, "stage0_m": 0.05193, "stage0_l": 0.13072, "stage0_h": 0.33143, "stage1_loss_instance_mil": 0.33319, "stage1_bag_acc": 97.59484, "stage1_neg_loss": 0.11469, "stage1_mean_ious": 0.29313, "stage1_s": 0.0, "stage1_m": 0.04892, "stage1_l": 0.12534, "stage1_h": 0.30908, "loss": 0.4974, "grad_norm": 21.79766, "time": 1.70022}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09619, "stage0_loss_instance_mil": 0.03086, "stage0_bag_acc": 98.42101, "stage0_mean_ious": 0.34539, "stage0_s": 0.0, "stage0_m": 0.02874, "stage0_l": 0.15036, "stage0_h": 0.36655, "stage1_loss_instance_mil": 0.29667, "stage1_bag_acc": 99.12474, "stage1_neg_loss": 0.09164, "stage1_mean_ious": 0.30224, "stage1_s": 0.0, "stage1_m": 0.02436, "stage1_l": 0.13895, "stage1_h": 0.32045, "loss": 0.41917, "grad_norm": 16.47065, "time": 1.7688}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04156, "stage0_loss_instance_mil": 0.04812, "stage0_bag_acc": 97.24651, "stage0_mean_ious": 0.35209, "stage0_s": 0.0, "stage0_m": 0.03741, "stage0_l": 0.15464, "stage0_h": 0.37565, "stage1_loss_instance_mil": 0.28201, "stage1_bag_acc": 98.23565, "stage1_neg_loss": 0.08859, "stage1_mean_ious": 0.30567, "stage1_s": 0.0, "stage1_m": 0.02291, "stage1_l": 0.12527, "stage1_h": 0.32793, "loss": 0.41872, "grad_norm": 15.75821, "time": 1.68295}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04181, "stage0_loss_instance_mil": 0.03282, "stage0_bag_acc": 97.44943, "stage0_mean_ious": 0.35408, "stage0_s": 0.00152, "stage0_m": 0.02681, "stage0_l": 0.14575, "stage0_h": 0.38466, "stage1_loss_instance_mil": 0.23584, "stage1_bag_acc": 98.65664, "stage1_neg_loss": 0.09244, "stage1_mean_ious": 0.31095, "stage1_s": 0.00149, "stage1_m": 0.02011, "stage1_l": 0.1214, "stage1_h": 0.33988, "loss": 0.3611, "grad_norm": 17.1076, "time": 1.69523}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09598, "stage0_loss_instance_mil": 0.02649, "stage0_bag_acc": 98.2763, "stage0_mean_ious": 0.34639, "stage0_s": 0.0, "stage0_m": 0.02088, "stage0_l": 0.12536, "stage0_h": 0.36972, "stage1_loss_instance_mil": 0.24687, "stage1_bag_acc": 99.50119, "stage1_neg_loss": 0.07842, "stage1_mean_ious": 0.30286, "stage1_s": 0.0, "stage1_m": 0.01342, "stage1_l": 0.11174, "stage1_h": 0.32301, "loss": 0.35178, "grad_norm": 13.99073, "time": 1.75494}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04211, "stage0_loss_instance_mil": 0.02496, "stage0_bag_acc": 98.4031, "stage0_mean_ious": 0.3172, "stage0_s": 0.0, "stage0_m": 0.0193, "stage0_l": 0.12473, "stage0_h": 0.34301, "stage1_loss_instance_mil": 0.21545, "stage1_bag_acc": 99.39617, "stage1_neg_loss": 0.08015, "stage1_mean_ious": 0.27706, "stage1_s": 0.0, "stage1_m": 0.01303, "stage1_l": 0.10922, "stage1_h": 0.30018, "loss": 0.32056, "grad_norm": 14.60753, "time": 1.70064}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04196, "stage0_loss_instance_mil": 0.02619, "stage0_bag_acc": 98.80542, "stage0_mean_ious": 0.36042, "stage0_s": 0.0, "stage0_m": 0.04145, "stage0_l": 0.13867, "stage0_h": 0.39241, "stage1_loss_instance_mil": 0.20135, "stage1_bag_acc": 99.06499, "stage1_neg_loss": 0.07558, "stage1_mean_ious": 0.31245, "stage1_s": 0.0, "stage1_m": 0.03505, "stage1_l": 0.1229, "stage1_h": 0.34049, "loss": 0.30313, "grad_norm": 12.87516, "time": 1.72424}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09643, "stage0_loss_instance_mil": 0.01201, "stage0_bag_acc": 99.59808, "stage0_mean_ious": 0.31225, "stage0_s": 0.00156, "stage0_m": 0.04202, "stage0_l": 0.08628, "stage0_h": 0.33723, "stage1_loss_instance_mil": 0.17934, "stage1_bag_acc": 99.36389, "stage1_neg_loss": 0.0726, "stage1_mean_ious": 0.26983, "stage1_s": 0.00159, "stage1_m": 0.02656, "stage1_l": 0.06947, "stage1_h": 0.29344, "loss": 0.26395, "grad_norm": 11.71403, "time": 1.78748}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04029, "stage0_loss_instance_mil": 0.01836, "stage0_bag_acc": 98.94445, "stage0_mean_ious": 0.31294, "stage0_s": 0.0, "stage0_m": 0.03946, "stage0_l": 0.09777, "stage0_h": 0.33725, "stage1_loss_instance_mil": 0.17258, "stage1_bag_acc": 99.72909, "stage1_neg_loss": 0.07059, "stage1_mean_ious": 0.27327, "stage1_s": 0.0, "stage1_m": 0.02694, "stage1_l": 0.08066, "stage1_h": 0.29624, "loss": 0.26153, "grad_norm": 11.13778, "time": 1.65108}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04254, "stage0_loss_instance_mil": 0.01988, "stage0_bag_acc": 99.17448, "stage0_mean_ious": 0.33953, "stage0_s": 0.0, "stage0_m": 0.02564, "stage0_l": 0.11151, "stage0_h": 0.36643, "stage1_loss_instance_mil": 0.18005, "stage1_bag_acc": 99.10965, "stage1_neg_loss": 0.06614, "stage1_mean_ious": 0.30028, "stage1_s": 0.0, "stage1_m": 0.01733, "stage1_l": 0.08974, "stage1_h": 0.32641, "loss": 0.26607, "grad_norm": 11.04967, "time": 1.70043}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09399, "stage0_loss_instance_mil": 0.0202, "stage0_bag_acc": 98.75074, "stage0_mean_ious": 0.30026, "stage0_s": 0.0, "stage0_m": 0.04685, "stage0_l": 0.11056, "stage0_h": 0.32827, "stage1_loss_instance_mil": 0.16727, "stage1_bag_acc": 98.93561, "stage1_neg_loss": 0.06104, "stage1_mean_ious": 0.26354, "stage1_s": 0.0, "stage1_m": 0.03229, "stage1_l": 0.08817, "stage1_h": 0.29001, "loss": 0.2485, "grad_norm": 9.78218, "time": 1.73685}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0401, "stage0_loss_instance_mil": 0.01437, "stage0_bag_acc": 99.08855, "stage0_mean_ious": 0.33947, "stage0_s": 0.0, "stage0_m": 0.03807, "stage0_l": 0.11857, "stage0_h": 0.36934, "stage1_loss_instance_mil": 0.189, "stage1_bag_acc": 99.58918, "stage1_neg_loss": 0.06945, "stage1_mean_ious": 0.30535, "stage1_s": 0.0, "stage1_m": 0.02578, "stage1_l": 0.09703, "stage1_h": 0.33445, "loss": 0.27282, "grad_norm": 13.0391, "time": 1.66202}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04257, "stage0_loss_instance_mil": 0.02273, "stage0_bag_acc": 98.93804, "stage0_mean_ious": 0.35375, "stage0_s": 0.0, "stage0_m": 0.03182, "stage0_l": 0.10268, "stage0_h": 0.3833, "stage1_loss_instance_mil": 0.14315, "stage1_bag_acc": 98.92489, "stage1_neg_loss": 0.05791, "stage1_mean_ious": 0.3152, "stage1_s": 0.0, "stage1_m": 0.02177, "stage1_l": 0.09595, "stage1_h": 0.34269, "loss": 0.22379, "grad_norm": 8.30285, "time": 1.6992}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.031, "bbox_mAP_50": 0.13, "bbox_mAP_75": 0.053, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.031 0.130 0.053 0.010 0.003 0.001"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0956, "stage0_loss_instance_mil": 0.01658, "stage0_bag_acc": 99.30616, "stage0_mean_ious": 0.32086, "stage0_s": 0.0, "stage0_m": 0.01837, "stage0_l": 0.09389, "stage0_h": 0.35166, "stage1_loss_instance_mil": 0.16072, "stage1_bag_acc": 99.03145, "stage1_neg_loss": 0.06871, "stage1_mean_ious": 0.28605, "stage1_s": 0.0, "stage1_m": 0.01064, "stage1_l": 0.07592, "stage1_h": 0.3142, "loss": 0.24602, "grad_norm": 11.59586, "time": 1.72222}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.03988, "stage0_loss_instance_mil": 0.01128, "stage0_bag_acc": 99.20354, "stage0_mean_ious": 0.31389, "stage0_s": 0.0, "stage0_m": 0.03608, "stage0_l": 0.0994, "stage0_h": 0.34449, "stage1_loss_instance_mil": 0.12426, "stage1_bag_acc": 99.38404, "stage1_neg_loss": 0.05534, "stage1_mean_ious": 0.28055, "stage1_s": 0.0, "stage1_m": 0.0293, "stage1_l": 0.0782, "stage1_h": 0.31044, "loss": 0.19088, "grad_norm": 7.69258, "time": 1.63736}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04161, "stage0_loss_instance_mil": 0.01871, "stage0_bag_acc": 98.97081, "stage0_mean_ious": 0.35121, "stage0_s": 0.0, "stage0_m": 0.02861, "stage0_l": 0.08331, "stage0_h": 0.37793, "stage1_loss_instance_mil": 0.14217, "stage1_bag_acc": 99.07015, "stage1_neg_loss": 0.0616, "stage1_mean_ious": 0.31655, "stage1_s": 0.0, "stage1_m": 0.01878, "stage1_l": 0.06765, "stage1_h": 0.34211, "loss": 0.22248, "grad_norm": 10.84835, "time": 1.69839}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09709, "stage0_loss_instance_mil": 0.01629, "stage0_bag_acc": 98.99924, "stage0_mean_ious": 0.34553, "stage0_s": 0.0, "stage0_m": 0.03127, "stage0_l": 0.0938, "stage0_h": 0.3696, "stage1_loss_instance_mil": 0.13348, "stage1_bag_acc": 99.21732, "stage1_neg_loss": 0.05848, "stage1_mean_ious": 0.31063, "stage1_s": 0.0, "stage1_m": 0.02045, "stage1_l": 0.08128, "stage1_h": 0.33407, "loss": 0.20826, "grad_norm": 8.79776, "time": 1.72854}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04136, "stage0_loss_instance_mil": 0.01135, "stage0_bag_acc": 99.4614, "stage0_mean_ious": 0.33204, "stage0_s": 0.0, "stage0_m": 0.02358, "stage0_l": 0.10491, "stage0_h": 0.36068, "stage1_loss_instance_mil": 0.13621, "stage1_bag_acc": 99.78889, "stage1_neg_loss": 0.05793, "stage1_mean_ious": 0.29513, "stage1_s": 0.0, "stage1_m": 0.01282, "stage1_l": 0.08518, "stage1_h": 0.32257, "loss": 0.20548, "grad_norm": 9.53927, "time": 1.66102}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04165, "stage0_loss_instance_mil": 0.01597, "stage0_bag_acc": 99.19948, "stage0_mean_ious": 0.31014, "stage0_s": 0.0, "stage0_m": 0.02666, "stage0_l": 0.0913, "stage0_h": 0.33441, "stage1_loss_instance_mil": 0.13181, "stage1_bag_acc": 99.30809, "stage1_neg_loss": 0.05429, "stage1_mean_ious": 0.28176, "stage1_s": 0.0, "stage1_m": 0.0197, "stage1_l": 0.07274, "stage1_h": 0.30585, "loss": 0.20206, "grad_norm": 8.76581, "time": 1.69229}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09488, "stage0_loss_instance_mil": 0.00699, "stage0_bag_acc": 99.5282, "stage0_mean_ious": 0.31618, "stage0_s": 0.0, "stage0_m": 0.01439, "stage0_l": 0.10595, "stage0_h": 0.34468, "stage1_loss_instance_mil": 0.10871, "stage1_bag_acc": 99.82593, "stage1_neg_loss": 0.05124, "stage1_mean_ious": 0.29856, "stage1_s": 0.0, "stage1_m": 0.00945, "stage1_l": 0.09397, "stage1_h": 0.32724, "loss": 0.16694, "grad_norm": 5.70533, "time": 1.74456}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04177, "stage0_loss_instance_mil": 0.00633, "stage0_bag_acc": 99.67251, "stage0_mean_ious": 0.3026, "stage0_s": 0.0, "stage0_m": 0.02614, "stage0_l": 0.09904, "stage0_h": 0.33565, "stage1_loss_instance_mil": 0.10077, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.04791, "stage1_mean_ious": 0.28446, "stage1_s": 0.0, "stage1_m": 0.01654, "stage1_l": 0.07669, "stage1_h": 0.31956, "loss": 0.15501, "grad_norm": 5.09125, "time": 1.66762}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.0405, "stage0_loss_instance_mil": 0.01307, "stage0_bag_acc": 99.44242, "stage0_mean_ious": 0.32265, "stage0_s": 0.0, "stage0_m": 0.02828, "stage0_l": 0.09718, "stage0_h": 0.35306, "stage1_loss_instance_mil": 0.10313, "stage1_bag_acc": 99.64242, "stage1_neg_loss": 0.05071, "stage1_mean_ious": 0.30211, "stage1_s": 0.0, "stage1_m": 0.01907, "stage1_l": 0.0803, "stage1_h": 0.3329, "loss": 0.16691, "grad_norm": 6.10389, "time": 1.63515}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09639, "stage0_loss_instance_mil": 0.00207, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.31833, "stage0_s": 0.0, "stage0_m": 0.02885, "stage0_l": 0.09701, "stage0_h": 0.34458, "stage1_loss_instance_mil": 0.10247, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04613, "stage1_mean_ious": 0.29661, "stage1_s": 0.0, "stage1_m": 0.02137, "stage1_l": 0.08301, "stage1_h": 0.3234, "loss": 0.15067, "grad_norm": 5.33973, "time": 1.68197}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04224, "stage0_loss_instance_mil": 0.00501, "stage0_bag_acc": 99.70426, "stage0_mean_ious": 0.30328, "stage0_s": 0.0, "stage0_m": 0.01973, "stage0_l": 0.08208, "stage0_h": 0.33017, "stage1_loss_instance_mil": 0.09769, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.04852, "stage1_mean_ious": 0.28106, "stage1_s": 0.0, "stage1_m": 0.01501, "stage1_l": 0.07222, "stage1_h": 0.30699, "loss": 0.15122, "grad_norm": 5.08968, "time": 1.68885}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04253, "stage0_loss_instance_mil": 0.00534, "stage0_bag_acc": 99.62978, "stage0_mean_ious": 0.2995, "stage0_s": 0.0, "stage0_m": 0.01734, "stage0_l": 0.08437, "stage0_h": 0.33327, "stage1_loss_instance_mil": 0.09346, "stage1_bag_acc": 99.73504, "stage1_neg_loss": 0.0468, "stage1_mean_ious": 0.27545, "stage1_s": 0.0, "stage1_m": 0.01479, "stage1_l": 0.07055, "stage1_h": 0.30773, "loss": 0.1456, "grad_norm": 5.35424, "time": 1.70193}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09536, "stage0_loss_instance_mil": 0.00487, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.32519, "stage0_s": 0.0, "stage0_m": 0.02302, "stage0_l": 0.07219, "stage0_h": 0.3458, "stage1_loss_instance_mil": 0.09713, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.04681, "stage1_mean_ious": 0.30293, "stage1_s": 0.0, "stage1_m": 0.01437, "stage1_l": 0.06128, "stage1_h": 0.3238, "loss": 0.14881, "grad_norm": 5.32038, "time": 1.753}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04254, "stage0_loss_instance_mil": 0.00284, "stage0_bag_acc": 99.775, "stage0_mean_ious": 0.31688, "stage0_s": 0.0, "stage0_m": 0.01403, "stage0_l": 0.07199, "stage0_h": 0.34575, "stage1_loss_instance_mil": 0.09328, "stage1_bag_acc": 99.71197, "stage1_neg_loss": 0.04561, "stage1_mean_ious": 0.29328, "stage1_s": 0.0, "stage1_m": 0.00868, "stage1_l": 0.06384, "stage1_h": 0.32103, "loss": 0.14173, "grad_norm": 4.67354, "time": 1.66917}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04286, "stage0_loss_instance_mil": 0.00522, "stage0_bag_acc": 99.68711, "stage0_mean_ious": 0.26572, "stage0_s": 0.0, "stage0_m": 0.04152, "stage0_l": 0.10718, "stage0_h": 0.29733, "stage1_loss_instance_mil": 0.1038, "stage1_bag_acc": 99.91667, "stage1_neg_loss": 0.04877, "stage1_mean_ious": 0.24692, "stage1_s": 0.0, "stage1_m": 0.03288, "stage1_l": 0.08924, "stage1_h": 0.2786, "loss": 0.1578, "grad_norm": 5.60478, "time": 1.64119}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09455, "stage0_loss_instance_mil": 0.0037, "stage0_bag_acc": 99.79798, "stage0_mean_ious": 0.30192, "stage0_s": 0.0, "stage0_m": 0.04187, "stage0_l": 0.09456, "stage0_h": 0.3337, "stage1_loss_instance_mil": 0.09726, "stage1_bag_acc": 99.79798, "stage1_neg_loss": 0.04573, "stage1_mean_ious": 0.27951, "stage1_s": 0.0, "stage1_m": 0.03188, "stage1_l": 0.07528, "stage1_h": 0.31178, "loss": 0.14669, "grad_norm": 5.21663, "time": 1.68841}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04021, "stage0_loss_instance_mil": 0.00517, "stage0_bag_acc": 99.70833, "stage0_mean_ious": 0.28838, "stage0_s": 0.0, "stage0_m": 0.0231, "stage0_l": 0.0933, "stage0_h": 0.31369, "stage1_loss_instance_mil": 0.09144, "stage1_bag_acc": 99.91667, "stage1_neg_loss": 0.04798, "stage1_mean_ious": 0.27103, "stage1_s": 0.0, "stage1_m": 0.01572, "stage1_l": 0.08347, "stage1_h": 0.29602, "loss": 0.14459, "grad_norm": 5.18402, "time": 1.63444}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04193, "stage0_loss_instance_mil": 0.00726, "stage0_bag_acc": 99.77381, "stage0_mean_ious": 0.27432, "stage0_s": 0.0, "stage0_m": 0.03024, "stage0_l": 0.08796, "stage0_h": 0.29352, "stage1_loss_instance_mil": 0.10312, "stage1_bag_acc": 99.85714, "stage1_neg_loss": 0.0502, "stage1_mean_ious": 0.25907, "stage1_s": 0.0, "stage1_m": 0.02075, "stage1_l": 0.0722, "stage1_h": 0.27967, "loss": 0.16058, "grad_norm": 5.9967, "time": 1.67179}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.031, "bbox_mAP_50": 0.128, "bbox_mAP_75": 0.049, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.031 0.128 0.049 0.011 0.004 0.001"}
