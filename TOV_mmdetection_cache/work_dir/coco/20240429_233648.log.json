{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=2,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [4]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17835, "data_time": 0.07358, "stage0_loss_instance_mil": 0.70935, "stage0_bag_acc": 16.58537, "stage0_mean_ious": 0.30992, "stage0_s": 0.0, "stage0_m": 0.039, "stage0_l": 0.20268, "stage0_h": 0.31846, "stage1_loss_instance_mil": 0.17839, "stage1_bag_acc": 12.70422, "stage1_neg_loss": 0.00154, "stage1_mean_ious": 0.28958, "stage1_s": 0.0, "stage1_m": 0.04079, "stage1_l": 0.21457, "stage1_h": 0.29358, "loss": 0.88928, "grad_norm": 3.17179, "time": 1.56143}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17835, "data_time": 0.02528, "stage0_loss_instance_mil": 0.55926, "stage0_bag_acc": 51.5903, "stage0_mean_ious": 0.36547, "stage0_s": 0.0, "stage0_m": 0.03915, "stage0_l": 0.21873, "stage0_h": 0.38709, "stage1_loss_instance_mil": 0.2555, "stage1_bag_acc": 30.75419, "stage1_neg_loss": 0.00613, "stage1_mean_ious": 0.34764, "stage1_s": 0.0, "stage1_m": 0.03847, "stage1_l": 0.20964, "stage1_h": 0.36753, "loss": 0.82089, "grad_norm": 4.09826, "time": 1.54579}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17835, "data_time": 0.0251, "stage0_loss_instance_mil": 0.21357, "stage0_bag_acc": 94.28951, "stage0_mean_ious": 0.41764, "stage0_s": 0.0, "stage0_m": 0.03586, "stage0_l": 0.2817, "stage0_h": 0.42349, "stage1_loss_instance_mil": 0.39158, "stage1_bag_acc": 84.07086, "stage1_neg_loss": 0.07569, "stage1_mean_ious": 0.3975, "stage1_s": 0.0, "stage1_m": 0.03261, "stage1_l": 0.28461, "stage1_h": 0.39987, "loss": 0.68085, "grad_norm": 12.11384, "time": 1.52672}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17835, "data_time": 0.08111, "stage0_loss_instance_mil": 0.07708, "stage0_bag_acc": 95.42049, "stage0_mean_ious": 0.42869, "stage0_s": 0.0, "stage0_m": 0.05431, "stage0_l": 0.20557, "stage0_h": 0.45247, "stage1_loss_instance_mil": 0.34726, "stage1_bag_acc": 96.58171, "stage1_neg_loss": 0.07787, "stage1_mean_ious": 0.39782, "stage1_s": 0.0, "stage1_m": 0.05117, "stage1_l": 0.2041, "stage1_h": 0.418, "loss": 0.50221, "grad_norm": 10.9481, "time": 1.59501}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17835, "data_time": 0.02854, "stage0_loss_instance_mil": 0.05361, "stage0_bag_acc": 96.98563, "stage0_mean_ious": 0.44307, "stage0_s": 0.0, "stage0_m": 0.05838, "stage0_l": 0.27737, "stage0_h": 0.46857, "stage1_loss_instance_mil": 0.29778, "stage1_bag_acc": 97.83324, "stage1_neg_loss": 0.07652, "stage1_mean_ious": 0.41572, "stage1_s": 0.0, "stage1_m": 0.05433, "stage1_l": 0.26227, "stage1_h": 0.43956, "loss": 0.42791, "grad_norm": 11.06364, "time": 1.53788}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17835, "data_time": 0.02766, "stage0_loss_instance_mil": 0.04991, "stage0_bag_acc": 96.84036, "stage0_mean_ious": 0.46296, "stage0_s": 0.0, "stage0_m": 0.09997, "stage0_l": 0.25104, "stage0_h": 0.49737, "stage1_loss_instance_mil": 0.28286, "stage1_bag_acc": 97.53427, "stage1_neg_loss": 0.08068, "stage1_mean_ious": 0.44637, "stage1_s": 0.0, "stage1_m": 0.09139, "stage1_l": 0.25508, "stage1_h": 0.47689, "loss": 0.41344, "grad_norm": 12.22262, "time": 1.52523}
{"mode": "val", "epoch": 2, "iter": 180, "lr": 4e-05, "eval_iter_num": 90, "bbox_mAP": 0.331, "bbox_mAP_50": 0.331, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.331 0.331 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17835, "data_time": 0.07498, "stage0_loss_instance_mil": 0.04997, "stage0_bag_acc": 97.26569, "stage0_mean_ious": 0.52384, "stage0_s": 0.0, "stage0_m": 0.02484, "stage0_l": 0.26094, "stage0_h": 0.54642, "stage1_loss_instance_mil": 0.23805, "stage1_bag_acc": 97.82543, "stage1_neg_loss": 0.0806, "stage1_mean_ious": 0.50092, "stage1_s": 0.0, "stage1_m": 0.02742, "stage1_l": 0.27088, "stage1_h": 0.51904, "loss": 0.36862, "grad_norm": 15.71564, "time": 1.55674}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02553, "stage0_loss_instance_mil": 0.05175, "stage0_bag_acc": 97.113, "stage0_mean_ious": 0.53943, "stage0_s": 0.0, "stage0_m": 0.06701, "stage0_l": 0.29802, "stage0_h": 0.57492, "stage1_loss_instance_mil": 0.20082, "stage1_bag_acc": 98.07664, "stage1_neg_loss": 0.06345, "stage1_mean_ious": 0.52164, "stage1_s": 0.0, "stage1_m": 0.06913, "stage1_l": 0.32094, "stage1_h": 0.5503, "loss": 0.31603, "grad_norm": 12.66527, "time": 1.53566}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.0257, "stage0_loss_instance_mil": 0.03966, "stage0_bag_acc": 97.77646, "stage0_mean_ious": 0.56585, "stage0_s": 0.0, "stage0_m": 0.0367, "stage0_l": 0.28945, "stage0_h": 0.59707, "stage1_loss_instance_mil": 0.18716, "stage1_bag_acc": 98.18395, "stage1_neg_loss": 0.07621, "stage1_mean_ious": 0.5445, "stage1_s": 0.0, "stage1_m": 0.03416, "stage1_l": 0.30564, "stage1_h": 0.56914, "loss": 0.30302, "grad_norm": 17.29979, "time": 1.51381}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17835, "data_time": 0.07587, "stage0_loss_instance_mil": 0.03369, "stage0_bag_acc": 98.25087, "stage0_mean_ious": 0.564, "stage0_s": 0.0, "stage0_m": 0.06229, "stage0_l": 0.34062, "stage0_h": 0.59367, "stage1_loss_instance_mil": 0.11361, "stage1_bag_acc": 98.69039, "stage1_neg_loss": 0.05484, "stage1_mean_ious": 0.56164, "stage1_s": 0.0, "stage1_m": 0.07015, "stage1_l": 0.37963, "stage1_h": 0.58457, "loss": 0.20214, "grad_norm": 11.37313, "time": 1.57451}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02569, "stage0_loss_instance_mil": 0.04161, "stage0_bag_acc": 97.70827, "stage0_mean_ious": 0.55635, "stage0_s": 0.0, "stage0_m": 0.06257, "stage0_l": 0.27258, "stage0_h": 0.59315, "stage1_loss_instance_mil": 0.11669, "stage1_bag_acc": 97.87165, "stage1_neg_loss": 0.04388, "stage1_mean_ious": 0.55034, "stage1_s": 0.0, "stage1_m": 0.06288, "stage1_l": 0.30409, "stage1_h": 0.58193, "loss": 0.20217, "grad_norm": 8.43089, "time": 1.54922}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.02584, "stage0_loss_instance_mil": 0.01535, "stage0_bag_acc": 99.50839, "stage0_mean_ious": 0.56336, "stage0_s": 0.0, "stage0_m": 0.066, "stage0_l": 0.33473, "stage0_h": 0.59048, "stage1_loss_instance_mil": 0.08806, "stage1_bag_acc": 99.10485, "stage1_neg_loss": 0.03887, "stage1_mean_ious": 0.56778, "stage1_s": 0.0, "stage1_m": 0.06345, "stage1_l": 0.39189, "stage1_h": 0.58766, "loss": 0.14229, "grad_norm": 6.33885, "time": 1.55529}
{"mode": "val", "epoch": 4, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.555, "bbox_mAP_50": 0.555, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.555 0.555 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17835, "data_time": 0.07588, "stage0_loss_instance_mil": 0.01481, "stage0_bag_acc": 99.34225, "stage0_mean_ious": 0.57061, "stage0_s": 0.0, "stage0_m": 0.0728, "stage0_l": 0.31653, "stage0_h": 0.59772, "stage1_loss_instance_mil": 0.08321, "stage1_bag_acc": 99.48398, "stage1_neg_loss": 0.03966, "stage1_mean_ious": 0.56621, "stage1_s": 0.0, "stage1_m": 0.07362, "stage1_l": 0.33783, "stage1_h": 0.58875, "loss": 0.13768, "grad_norm": 6.20266, "time": 1.60486}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02483, "stage0_loss_instance_mil": 0.01443, "stage0_bag_acc": 98.93763, "stage0_mean_ious": 0.57891, "stage0_s": 0.00117, "stage0_m": 0.05608, "stage0_l": 0.3598, "stage0_h": 0.60571, "stage1_loss_instance_mil": 0.08007, "stage1_bag_acc": 99.55869, "stage1_neg_loss": 0.03818, "stage1_mean_ious": 0.5814, "stage1_s": 0.00104, "stage1_m": 0.06269, "stage1_l": 0.40018, "stage1_h": 0.60036, "loss": 0.13268, "grad_norm": 6.41015, "time": 1.50124}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.02424, "stage0_loss_instance_mil": 0.02937, "stage0_bag_acc": 98.27986, "stage0_mean_ious": 0.57836, "stage0_s": 0.0, "stage0_m": 0.05801, "stage0_l": 0.32676, "stage0_h": 0.60676, "stage1_loss_instance_mil": 0.0918, "stage1_bag_acc": 98.12127, "stage1_neg_loss": 0.04218, "stage1_mean_ious": 0.58321, "stage1_s": 0.0, "stage1_m": 0.07359, "stage1_l": 0.36479, "stage1_h": 0.60435, "loss": 0.16336, "grad_norm": 7.80567, "time": 1.46944}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17835, "data_time": 0.07705, "stage0_loss_instance_mil": 0.01088, "stage0_bag_acc": 99.44979, "stage0_mean_ious": 0.573, "stage0_s": 0.0, "stage0_m": 0.04129, "stage0_l": 0.30313, "stage0_h": 0.60778, "stage1_loss_instance_mil": 0.05436, "stage1_bag_acc": 99.68421, "stage1_neg_loss": 0.03008, "stage1_mean_ious": 0.57146, "stage1_s": 0.0, "stage1_m": 0.04757, "stage1_l": 0.33092, "stage1_h": 0.5982, "loss": 0.09532, "grad_norm": 5.02319, "time": 1.53291}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02917, "stage0_loss_instance_mil": 0.01021, "stage0_bag_acc": 99.48072, "stage0_mean_ious": 0.59113, "stage0_s": 0.0, "stage0_m": 0.05535, "stage0_l": 0.31083, "stage0_h": 0.62365, "stage1_loss_instance_mil": 0.06226, "stage1_bag_acc": 99.1852, "stage1_neg_loss": 0.03095, "stage1_mean_ious": 0.58374, "stage1_s": 0.0, "stage1_m": 0.05557, "stage1_l": 0.3437, "stage1_h": 0.61107, "loss": 0.10342, "grad_norm": 5.29977, "time": 1.51696}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.02952, "stage0_loss_instance_mil": 0.00705, "stage0_bag_acc": 99.73843, "stage0_mean_ious": 0.6107, "stage0_s": 0.00117, "stage0_m": 0.08653, "stage0_l": 0.35574, "stage0_h": 0.6433, "stage1_loss_instance_mil": 0.05116, "stage1_bag_acc": 99.83897, "stage1_neg_loss": 0.02394, "stage1_mean_ious": 0.60827, "stage1_s": 0.00101, "stage1_m": 0.0973, "stage1_l": 0.41104, "stage1_h": 0.63152, "loss": 0.08215, "grad_norm": 4.26963, "time": 1.5395}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.691, "bbox_mAP_50": 0.691, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.691 0.691 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17835, "data_time": 0.0766, "stage0_loss_instance_mil": 0.00643, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.59217, "stage0_s": 0.00121, "stage0_m": 0.01882, "stage0_l": 0.31909, "stage0_h": 0.62279, "stage1_loss_instance_mil": 0.0633, "stage1_bag_acc": 99.63283, "stage1_neg_loss": 0.02805, "stage1_mean_ious": 0.593, "stage1_s": 0.00093, "stage1_m": 0.0198, "stage1_l": 0.35226, "stage1_h": 0.61866, "loss": 0.09779, "grad_norm": 4.9685, "time": 1.58916}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02488, "stage0_loss_instance_mil": 0.00708, "stage0_bag_acc": 99.42823, "stage0_mean_ious": 0.58638, "stage0_s": 0.0, "stage0_m": 0.07303, "stage0_l": 0.36919, "stage0_h": 0.61283, "stage1_loss_instance_mil": 0.0515, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.0266, "stage1_mean_ious": 0.59569, "stage1_s": 0.0, "stage1_m": 0.07807, "stage1_l": 0.42941, "stage1_h": 0.6155, "loss": 0.08519, "grad_norm": 4.51666, "time": 1.51083}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.02542, "stage0_loss_instance_mil": 0.00433, "stage0_bag_acc": 99.9, "stage0_mean_ious": 0.59053, "stage0_s": 0.0, "stage0_m": 0.05071, "stage0_l": 0.33847, "stage0_h": 0.62398, "stage1_loss_instance_mil": 0.04294, "stage1_bag_acc": 99.91304, "stage1_neg_loss": 0.02404, "stage1_mean_ious": 0.59804, "stage1_s": 0.0, "stage1_m": 0.05087, "stage1_l": 0.39042, "stage1_h": 0.62266, "loss": 0.0713, "grad_norm": 3.85203, "time": 1.53733}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17835, "data_time": 0.07491, "stage0_loss_instance_mil": 0.01865, "stage0_bag_acc": 99.18503, "stage0_mean_ious": 0.58964, "stage0_s": 0.0, "stage0_m": 0.09119, "stage0_l": 0.29637, "stage0_h": 0.62464, "stage1_loss_instance_mil": 0.04606, "stage1_bag_acc": 99.38966, "stage1_neg_loss": 0.02272, "stage1_mean_ious": 0.59082, "stage1_s": 0.0, "stage1_m": 0.1016, "stage1_l": 0.33334, "stage1_h": 0.6163, "loss": 0.08743, "grad_norm": 4.30146, "time": 1.53674}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17835, "data_time": 0.02508, "stage0_loss_instance_mil": 0.00461, "stage0_bag_acc": 99.67836, "stage0_mean_ious": 0.60427, "stage0_s": 0.0, "stage0_m": 0.06365, "stage0_l": 0.3501, "stage0_h": 0.62893, "stage1_loss_instance_mil": 0.04527, "stage1_bag_acc": 99.60429, "stage1_neg_loss": 0.02812, "stage1_mean_ious": 0.60984, "stage1_s": 0.0, "stage1_m": 0.07239, "stage1_l": 0.37861, "stage1_h": 0.63076, "loss": 0.078, "grad_norm": 4.20272, "time": 1.52156}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17835, "data_time": 0.02493, "stage0_loss_instance_mil": 0.00512, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.61747, "stage0_s": 0.0, "stage0_m": 0.09224, "stage0_l": 0.36335, "stage0_h": 0.64783, "stage1_loss_instance_mil": 0.03906, "stage1_bag_acc": 99.64077, "stage1_neg_loss": 0.01986, "stage1_mean_ious": 0.61345, "stage1_s": 0.0, "stage1_m": 0.09977, "stage1_l": 0.38953, "stage1_h": 0.63737, "loss": 0.06405, "grad_norm": 3.46524, "time": 1.51707}
{"mode": "val", "epoch": 8, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.723, "bbox_mAP_50": 0.723, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.723 0.723 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17835, "data_time": 0.07643, "stage0_loss_instance_mil": 0.00901, "stage0_bag_acc": 99.35511, "stage0_mean_ious": 0.62741, "stage0_s": 0.0, "stage0_m": 0.08031, "stage0_l": 0.38479, "stage0_h": 0.65641, "stage1_loss_instance_mil": 0.03366, "stage1_bag_acc": 99.67987, "stage1_neg_loss": 0.02364, "stage1_mean_ious": 0.62491, "stage1_s": 0.0, "stage1_m": 0.08545, "stage1_l": 0.44335, "stage1_h": 0.6444, "loss": 0.06631, "grad_norm": 3.94273, "time": 1.57467}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17835, "data_time": 0.02555, "stage0_loss_instance_mil": 0.01119, "stage0_bag_acc": 99.35878, "stage0_mean_ious": 0.6139, "stage0_s": 0.00117, "stage0_m": 0.03294, "stage0_l": 0.37632, "stage0_h": 0.64227, "stage1_loss_instance_mil": 0.03147, "stage1_bag_acc": 99.06737, "stage1_neg_loss": 0.01994, "stage1_mean_ious": 0.61219, "stage1_s": 0.00106, "stage1_m": 0.03331, "stage1_l": 0.41468, "stage1_h": 0.63296, "loss": 0.0626, "grad_norm": 3.53306, "time": 1.53287}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17835, "data_time": 0.02595, "stage0_loss_instance_mil": 0.00607, "stage0_bag_acc": 99.54365, "stage0_mean_ious": 0.61265, "stage0_s": 0.0, "stage0_m": 0.06692, "stage0_l": 0.34939, "stage0_h": 0.63737, "stage1_loss_instance_mil": 0.03249, "stage1_bag_acc": 99.77976, "stage1_neg_loss": 0.02006, "stage1_mean_ious": 0.61724, "stage1_s": 0.0, "stage1_m": 0.07348, "stage1_l": 0.38581, "stage1_h": 0.63542, "loss": 0.05863, "grad_norm": 2.8915, "time": 1.55227}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17835, "data_time": 0.07782, "stage0_loss_instance_mil": 0.01261, "stage0_bag_acc": 99.5172, "stage0_mean_ious": 0.60111, "stage0_s": 0.0, "stage0_m": 0.09762, "stage0_l": 0.31067, "stage0_h": 0.62958, "stage1_loss_instance_mil": 0.03035, "stage1_bag_acc": 99.60811, "stage1_neg_loss": 0.02205, "stage1_mean_ious": 0.60245, "stage1_s": 0.0, "stage1_m": 0.0894, "stage1_l": 0.34789, "stage1_h": 0.62601, "loss": 0.06501, "grad_norm": 3.44337, "time": 1.61754}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17835, "data_time": 0.025, "stage0_loss_instance_mil": 0.00424, "stage0_bag_acc": 99.65254, "stage0_mean_ious": 0.62279, "stage0_s": 0.0, "stage0_m": 0.05513, "stage0_l": 0.34477, "stage0_h": 0.64394, "stage1_loss_instance_mil": 0.03626, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.02184, "stage1_mean_ious": 0.61497, "stage1_s": 0.0, "stage1_m": 0.0573, "stage1_l": 0.37149, "stage1_h": 0.6305, "loss": 0.06233, "grad_norm": 3.23985, "time": 1.51933}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17835, "data_time": 0.02577, "stage0_loss_instance_mil": 0.00269, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.61699, "stage0_s": 0.0, "stage0_m": 0.07396, "stage0_l": 0.34209, "stage0_h": 0.64876, "stage1_loss_instance_mil": 0.02562, "stage1_bag_acc": 99.92308, "stage1_neg_loss": 0.01608, "stage1_mean_ious": 0.62387, "stage1_s": 0.0, "stage1_m": 0.07992, "stage1_l": 0.3978, "stage1_h": 0.64843, "loss": 0.04439, "grad_norm": 2.54418, "time": 1.57817}
{"mode": "val", "epoch": 10, "iter": 180, "lr": 1e-05, "eval_iter_num": 90, "bbox_mAP": 0.739, "bbox_mAP_50": 0.739, "bbox_mAP_75": -1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.739 -1.000 -1.000 -1.000 -1.000"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17835, "data_time": 0.07519, "stage0_loss_instance_mil": 0.00191, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.61637, "stage0_s": 0.0, "stage0_m": 0.04097, "stage0_l": 0.3076, "stage0_h": 0.641, "stage1_loss_instance_mil": 0.02621, "stage1_bag_acc": 99.81385, "stage1_neg_loss": 0.01377, "stage1_mean_ious": 0.61384, "stage1_s": 0.0, "stage1_m": 0.05055, "stage1_l": 0.3393, "stage1_h": 0.63289, "loss": 0.0419, "grad_norm": 2.20798, "time": 1.58936}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17835, "data_time": 0.02468, "stage0_loss_instance_mil": 0.00322, "stage0_bag_acc": 99.73053, "stage0_mean_ious": 0.60176, "stage0_s": 0.0, "stage0_m": 0.08804, "stage0_l": 0.3634, "stage0_h": 0.6323, "stage1_loss_instance_mil": 0.0242, "stage1_bag_acc": 99.93103, "stage1_neg_loss": 0.01471, "stage1_mean_ious": 0.60699, "stage1_s": 0.0, "stage1_m": 0.09267, "stage1_l": 0.40299, "stage1_h": 0.63037, "loss": 0.04213, "grad_norm": 2.43959, "time": 1.54228}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17835, "data_time": 0.02532, "stage0_loss_instance_mil": 0.00859, "stage0_bag_acc": 99.68447, "stage0_mean_ious": 0.61673, "stage0_s": 0.0, "stage0_m": 0.06567, "stage0_l": 0.35312, "stage0_h": 0.64719, "stage1_loss_instance_mil": 0.02325, "stage1_bag_acc": 99.62586, "stage1_neg_loss": 0.01789, "stage1_mean_ious": 0.61554, "stage1_s": 0.0, "stage1_m": 0.073, "stage1_l": 0.38867, "stage1_h": 0.64114, "loss": 0.04973, "grad_norm": 2.8783, "time": 1.57176}
