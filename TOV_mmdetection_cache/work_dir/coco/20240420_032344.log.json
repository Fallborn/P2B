{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.4383, "stage0_loss_instance_mil": 0.72738, "stage0_bag_acc": 12.87904, "stage0_mean_ious": 0.28369, "stage0_s": 0.0, "stage0_m": 0.03178, "stage0_l": 0.17576, "stage0_h": 0.29444, "stage1_loss_instance_mil": 0.1568, "stage1_bag_acc": 13.26945, "stage1_neg_loss": 0.00121, "stage1_mean_ious": 0.26231, "stage1_s": 0.0, "stage1_m": 0.03322, "stage1_l": 0.1833, "stage1_h": 0.26839, "loss": 0.88538, "grad_norm": 3.39623, "time": 3.77844}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.79889, "stage0_loss_instance_mil": 0.60895, "stage0_bag_acc": 54.01095, "stage0_mean_ious": 0.34433, "stage0_s": 0.0, "stage0_m": 0.05037, "stage0_l": 0.25577, "stage0_h": 0.35058, "stage1_loss_instance_mil": 0.2146, "stage1_bag_acc": 32.18502, "stage1_neg_loss": 0.00436, "stage1_mean_ious": 0.31128, "stage1_s": 0.0, "stage1_m": 0.0429, "stage1_l": 0.22153, "stage1_h": 0.31817, "loss": 0.82791, "grad_norm": 3.92727, "time": 5.12523}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.95732, "stage0_loss_instance_mil": 0.28061, "stage0_bag_acc": 86.52184, "stage0_mean_ious": 0.42814, "stage0_s": 0.0, "stage0_m": 0.06026, "stage0_l": 0.21269, "stage0_h": 0.45093, "stage1_loss_instance_mil": 0.29702, "stage1_bag_acc": 75.00976, "stage1_neg_loss": 0.06408, "stage1_mean_ious": 0.40006, "stage1_s": 0.0, "stage1_m": 0.05463, "stage1_l": 0.19421, "stage1_h": 0.42295, "loss": 0.64171, "grad_norm": 9.8805, "time": 4.99974}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.47076, "stage0_loss_instance_mil": 0.09796, "stage0_bag_acc": 95.00983, "stage0_mean_ious": 0.46348, "stage0_s": 0.0, "stage0_m": 0.04216, "stage0_l": 0.19326, "stage0_h": 0.49689, "stage1_loss_instance_mil": 0.29678, "stage1_bag_acc": 96.77609, "stage1_neg_loss": 0.07814, "stage1_mean_ious": 0.40851, "stage1_s": 0.0, "stage1_m": 0.03055, "stage1_l": 0.17426, "stage1_h": 0.43868, "loss": 0.47288, "grad_norm": 12.42787, "time": 4.97452}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.41591, "stage0_loss_instance_mil": 0.04278, "stage0_bag_acc": 98.11084, "stage0_mean_ious": 0.48125, "stage0_s": 0.0, "stage0_m": 0.04467, "stage0_l": 0.21832, "stage0_h": 0.51115, "stage1_loss_instance_mil": 0.2747, "stage1_bag_acc": 99.02617, "stage1_neg_loss": 0.08288, "stage1_mean_ious": 0.43225, "stage1_s": 0.0, "stage1_m": 0.03564, "stage1_l": 0.20442, "stage1_h": 0.45995, "loss": 0.40035, "grad_norm": 13.42993, "time": 4.74049}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.30369, "stage0_loss_instance_mil": 0.07848, "stage0_bag_acc": 95.26468, "stage0_mean_ious": 0.46168, "stage0_s": 0.0, "stage0_m": 0.03186, "stage0_l": 0.17731, "stage0_h": 0.49634, "stage1_loss_instance_mil": 0.27642, "stage1_bag_acc": 96.49983, "stage1_neg_loss": 0.07676, "stage1_mean_ious": 0.41606, "stage1_s": 0.0, "stage1_m": 0.02867, "stage1_l": 0.16053, "stage1_h": 0.44651, "loss": 0.43166, "grad_norm": 16.61209, "time": 3.94819}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 0.62921, "stage0_loss_instance_mil": 0.03598, "stage0_bag_acc": 98.59648, "stage0_mean_ious": 0.48914, "stage0_s": 0.00159, "stage0_m": 0.03102, "stage0_l": 0.19498, "stage0_h": 0.52576, "stage1_loss_instance_mil": 0.24134, "stage1_bag_acc": 98.25974, "stage1_neg_loss": 0.0855, "stage1_mean_ious": 0.44079, "stage1_s": 0.00173, "stage1_m": 0.01867, "stage1_l": 0.1893, "stage1_h": 0.47324, "loss": 0.36282, "grad_norm": 18.22539, "time": 4.56525}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.29097, "stage0_loss_instance_mil": 0.04141, "stage0_bag_acc": 97.55508, "stage0_mean_ious": 0.47868, "stage0_s": 0.0, "stage0_m": 0.03223, "stage0_l": 0.15587, "stage0_h": 0.51914, "stage1_loss_instance_mil": 0.22896, "stage1_bag_acc": 98.62756, "stage1_neg_loss": 0.07642, "stage1_mean_ious": 0.43199, "stage1_s": 0.0, "stage1_m": 0.0325, "stage1_l": 0.13517, "stage1_h": 0.46876, "loss": 0.34678, "grad_norm": 16.45125, "time": 4.32167}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.25747, "stage0_loss_instance_mil": 0.04753, "stage0_bag_acc": 97.08101, "stage0_mean_ious": 0.38015, "stage0_s": 0.0, "stage0_m": 0.03591, "stage0_l": 0.12202, "stage0_h": 0.4204, "stage1_loss_instance_mil": 0.25442, "stage1_bag_acc": 97.75484, "stage1_neg_loss": 0.07547, "stage1_mean_ious": 0.34443, "stage1_s": 0.0, "stage1_m": 0.02592, "stage1_l": 0.10695, "stage1_h": 0.38212, "loss": 0.37743, "grad_norm": 15.17839, "time": 3.57022}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.61852, "stage0_loss_instance_mil": 0.02492, "stage0_bag_acc": 98.48, "stage0_mean_ious": 0.40031, "stage0_s": 0.0, "stage0_m": 0.03083, "stage0_l": 0.11337, "stage0_h": 0.43686, "stage1_loss_instance_mil": 0.23584, "stage1_bag_acc": 98.79987, "stage1_neg_loss": 0.07647, "stage1_mean_ious": 0.35844, "stage1_s": 0.0, "stage1_m": 0.02337, "stage1_l": 0.10104, "stage1_h": 0.39095, "loss": 0.33723, "grad_norm": 15.49348, "time": 4.95633}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.39709, "stage0_loss_instance_mil": 0.02679, "stage0_bag_acc": 98.24629, "stage0_mean_ious": 0.37381, "stage0_s": 0.00163, "stage0_m": 0.03629, "stage0_l": 0.11803, "stage0_h": 0.41548, "stage1_loss_instance_mil": 0.21611, "stage1_bag_acc": 98.51667, "stage1_neg_loss": 0.06822, "stage1_mean_ious": 0.34008, "stage1_s": 0.00236, "stage1_m": 0.02356, "stage1_l": 0.11443, "stage1_h": 0.3779, "loss": 0.31112, "grad_norm": 12.57347, "time": 4.891}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.2793, "stage0_loss_instance_mil": 0.04338, "stage0_bag_acc": 97.5189, "stage0_mean_ious": 0.29228, "stage0_s": 0.0, "stage0_m": 0.03802, "stage0_l": 0.11092, "stage0_h": 0.31729, "stage1_loss_instance_mil": 0.25221, "stage1_bag_acc": 98.18388, "stage1_neg_loss": 0.06292, "stage1_mean_ious": 0.26907, "stage1_s": 0.0, "stage1_m": 0.02949, "stage1_l": 0.09677, "stage1_h": 0.29406, "loss": 0.35852, "grad_norm": 11.88307, "time": 3.66215}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.55338, "stage0_loss_instance_mil": 0.01442, "stage0_bag_acc": 99.0649, "stage0_mean_ious": 0.29642, "stage0_s": 0.0, "stage0_m": 0.03952, "stage0_l": 0.14884, "stage0_h": 0.31753, "stage1_loss_instance_mil": 0.23094, "stage1_bag_acc": 99.44474, "stage1_neg_loss": 0.06767, "stage1_mean_ious": 0.274, "stage1_s": 0.0, "stage1_m": 0.02479, "stage1_l": 0.13989, "stage1_h": 0.29403, "loss": 0.31303, "grad_norm": 10.30991, "time": 5.73546}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.38887, "stage0_loss_instance_mil": 0.02519, "stage0_bag_acc": 98.36303, "stage0_mean_ious": 0.25384, "stage0_s": 0.00136, "stage0_m": 0.02557, "stage0_l": 0.10327, "stage0_h": 0.27176, "stage1_loss_instance_mil": 0.22169, "stage1_bag_acc": 98.74971, "stage1_neg_loss": 0.06692, "stage1_mean_ious": 0.23458, "stage1_s": 0.0013, "stage1_m": 0.02102, "stage1_l": 0.0965, "stage1_h": 0.25087, "loss": 0.3138, "grad_norm": 10.26804, "time": 5.07002}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.20057, "stage0_loss_instance_mil": 0.0295, "stage0_bag_acc": 98.37483, "stage0_mean_ious": 0.27284, "stage0_s": 0.0, "stage0_m": 0.01976, "stage0_l": 0.14234, "stage0_h": 0.29268, "stage1_loss_instance_mil": 0.20637, "stage1_bag_acc": 98.62391, "stage1_neg_loss": 0.06493, "stage1_mean_ious": 0.24618, "stage1_s": 0.0, "stage1_m": 0.01149, "stage1_l": 0.12453, "stage1_h": 0.26492, "loss": 0.30081, "grad_norm": 10.68429, "time": 2.63868}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.49485, "stage0_loss_instance_mil": 0.0109, "stage0_bag_acc": 99.47006, "stage0_mean_ious": 0.28009, "stage0_s": 0.0, "stage0_m": 0.03024, "stage0_l": 0.15339, "stage0_h": 0.29586, "stage1_loss_instance_mil": 0.18258, "stage1_bag_acc": 99.55141, "stage1_neg_loss": 0.06236, "stage1_mean_ious": 0.25144, "stage1_s": 0.0, "stage1_m": 0.02291, "stage1_l": 0.13843, "stage1_h": 0.26644, "loss": 0.25584, "grad_norm": 9.19302, "time": 4.64305}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.45766, "stage0_loss_instance_mil": 0.01152, "stage0_bag_acc": 99.39048, "stage0_mean_ious": 0.24712, "stage0_s": 0.0, "stage0_m": 0.02282, "stage0_l": 0.10598, "stage0_h": 0.26901, "stage1_loss_instance_mil": 0.18679, "stage1_bag_acc": 99.3369, "stage1_neg_loss": 0.06504, "stage1_mean_ious": 0.22701, "stage1_s": 0.0, "stage1_m": 0.01426, "stage1_l": 0.09881, "stage1_h": 0.24854, "loss": 0.26335, "grad_norm": 9.26248, "time": 5.10959}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.10994, "stage0_loss_instance_mil": 0.01465, "stage0_bag_acc": 99.51415, "stage0_mean_ious": 0.22845, "stage0_s": 0.0, "stage0_m": 0.0368, "stage0_l": 0.12062, "stage0_h": 0.24825, "stage1_loss_instance_mil": 0.17471, "stage1_bag_acc": 99.46027, "stage1_neg_loss": 0.06042, "stage1_mean_ious": 0.20954, "stage1_s": 0.0, "stage1_m": 0.02435, "stage1_l": 0.11262, "stage1_h": 0.22795, "loss": 0.24977, "grad_norm": 9.02882, "time": 2.24394}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.012, "bbox_mAP_50": 0.061, "bbox_mAP_75": 0.015, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.012 0.061 0.015 0.004 0.003 0.002"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.42751, "stage0_loss_instance_mil": 0.06157, "stage0_bag_acc": 96.0214, "stage0_mean_ious": 0.24105, "stage0_s": 0.0, "stage0_m": 0.03615, "stage0_l": 0.11836, "stage0_h": 0.2576, "stage1_loss_instance_mil": 0.16262, "stage1_bag_acc": 96.68332, "stage1_neg_loss": 0.05462, "stage1_mean_ious": 0.21704, "stage1_s": 0.0, "stage1_m": 0.02508, "stage1_l": 0.10863, "stage1_h": 0.23125, "loss": 0.27881, "grad_norm": 10.95582, "time": 5.01738}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.45295, "stage0_loss_instance_mil": 0.01595, "stage0_bag_acc": 99.02414, "stage0_mean_ious": 0.2475, "stage0_s": 0.0, "stage0_m": 0.02368, "stage0_l": 0.0903, "stage0_h": 0.2649, "stage1_loss_instance_mil": 0.17291, "stage1_bag_acc": 99.66865, "stage1_neg_loss": 0.06581, "stage1_mean_ious": 0.22967, "stage1_s": 0.0, "stage1_m": 0.01849, "stage1_l": 0.08961, "stage1_h": 0.24512, "loss": 0.25468, "grad_norm": 9.77043, "time": 4.67514}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.28326, "stage0_loss_instance_mil": 0.01857, "stage0_bag_acc": 99.15936, "stage0_mean_ious": 0.23189, "stage0_s": 0.0, "stage0_m": 0.03408, "stage0_l": 0.14009, "stage0_h": 0.24717, "stage1_loss_instance_mil": 0.17619, "stage1_bag_acc": 99.12852, "stage1_neg_loss": 0.06248, "stage1_mean_ious": 0.21433, "stage1_s": 0.0, "stage1_m": 0.02801, "stage1_l": 0.12487, "stage1_h": 0.23091, "loss": 0.25725, "grad_norm": 9.00763, "time": 3.6075}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.51327, "stage0_loss_instance_mil": 0.01217, "stage0_bag_acc": 99.42769, "stage0_mean_ious": 0.21387, "stage0_s": 0.0, "stage0_m": 0.04108, "stage0_l": 0.12472, "stage0_h": 0.23164, "stage1_loss_instance_mil": 0.1519, "stage1_bag_acc": 99.67128, "stage1_neg_loss": 0.06313, "stage1_mean_ious": 0.19824, "stage1_s": 0.0, "stage1_m": 0.03295, "stage1_l": 0.1114, "stage1_h": 0.21654, "loss": 0.2272, "grad_norm": 8.08999, "time": 5.08562}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.67672, "stage0_loss_instance_mil": 0.00859, "stage0_bag_acc": 99.53233, "stage0_mean_ious": 0.17519, "stage0_s": 0.0, "stage0_m": 0.01723, "stage0_l": 0.0876, "stage0_h": 0.18112, "stage1_loss_instance_mil": 0.17085, "stage1_bag_acc": 99.79474, "stage1_neg_loss": 0.06445, "stage1_mean_ious": 0.167, "stage1_s": 0.0, "stage1_m": 0.01384, "stage1_l": 0.08218, "stage1_h": 0.17382, "loss": 0.24389, "grad_norm": 8.90671, "time": 5.29154}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.2289, "stage0_loss_instance_mil": 0.01195, "stage0_bag_acc": 99.05642, "stage0_mean_ious": 0.19323, "stage0_s": 0.0, "stage0_m": 0.0212, "stage0_l": 0.10924, "stage0_h": 0.20401, "stage1_loss_instance_mil": 0.15927, "stage1_bag_acc": 99.77709, "stage1_neg_loss": 0.05968, "stage1_mean_ious": 0.17965, "stage1_s": 0.0, "stage1_m": 0.01265, "stage1_l": 0.1016, "stage1_h": 0.19097, "loss": 0.2309, "grad_norm": 8.03403, "time": 3.21003}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.68351, "stage0_loss_instance_mil": 0.00979, "stage0_bag_acc": 99.38126, "stage0_mean_ious": 0.16153, "stage0_s": 0.0, "stage0_m": 0.03485, "stage0_l": 0.09207, "stage0_h": 0.16725, "stage1_loss_instance_mil": 0.14619, "stage1_bag_acc": 99.72391, "stage1_neg_loss": 0.05966, "stage1_mean_ious": 0.15445, "stage1_s": 0.0, "stage1_m": 0.02985, "stage1_l": 0.07912, "stage1_h": 0.16116, "loss": 0.21564, "grad_norm": 6.49339, "time": 5.22895}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.42625, "stage0_loss_instance_mil": 0.00795, "stage0_bag_acc": 99.46013, "stage0_mean_ious": 0.18006, "stage0_s": 0.0, "stage0_m": 0.02446, "stage0_l": 0.10994, "stage0_h": 0.18811, "stage1_loss_instance_mil": 0.13629, "stage1_bag_acc": 99.66013, "stage1_neg_loss": 0.05628, "stage1_mean_ious": 0.16774, "stage1_s": 0.0, "stage1_m": 0.01713, "stage1_l": 0.09563, "stage1_h": 0.17669, "loss": 0.20052, "grad_norm": 5.43398, "time": 4.65982}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.23016, "stage0_loss_instance_mil": 0.00655, "stage0_bag_acc": 99.52196, "stage0_mean_ious": 0.18652, "stage0_s": 0.0, "stage0_m": 0.02401, "stage0_l": 0.11206, "stage0_h": 0.19222, "stage1_loss_instance_mil": 0.12554, "stage1_bag_acc": 99.69621, "stage1_neg_loss": 0.05826, "stage1_mean_ious": 0.17387, "stage1_s": 0.0, "stage1_m": 0.01732, "stage1_l": 0.10582, "stage1_h": 0.18012, "loss": 0.19035, "grad_norm": 5.96411, "time": 3.29564}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.49032, "stage0_loss_instance_mil": 0.009, "stage0_bag_acc": 99.56598, "stage0_mean_ious": 0.17489, "stage0_s": 0.0, "stage0_m": 0.03051, "stage0_l": 0.11541, "stage0_h": 0.18281, "stage1_loss_instance_mil": 0.12729, "stage1_bag_acc": 99.58363, "stage1_neg_loss": 0.05353, "stage1_mean_ious": 0.16335, "stage1_s": 0.0, "stage1_m": 0.02563, "stage1_l": 0.09976, "stage1_h": 0.17302, "loss": 0.18982, "grad_norm": 4.98779, "time": 5.64467}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.39865, "stage0_loss_instance_mil": 0.00669, "stage0_bag_acc": 99.35989, "stage0_mean_ious": 0.19209, "stage0_s": 0.0, "stage0_m": 0.03316, "stage0_l": 0.11341, "stage0_h": 0.20105, "stage1_loss_instance_mil": 0.11731, "stage1_bag_acc": 99.65278, "stage1_neg_loss": 0.05561, "stage1_mean_ious": 0.17739, "stage1_s": 0.0, "stage1_m": 0.02285, "stage1_l": 0.10675, "stage1_h": 0.18555, "loss": 0.17961, "grad_norm": 5.4511, "time": 4.50351}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.20503, "stage0_loss_instance_mil": 0.00536, "stage0_bag_acc": 99.65278, "stage0_mean_ious": 0.18516, "stage0_s": 0.0, "stage0_m": 0.01653, "stage0_l": 0.09967, "stage0_h": 0.19596, "stage1_loss_instance_mil": 0.12628, "stage1_bag_acc": 99.76389, "stage1_neg_loss": 0.05102, "stage1_mean_ious": 0.16973, "stage1_s": 0.0, "stage1_m": 0.0116, "stage1_l": 0.09033, "stage1_h": 0.18079, "loss": 0.18267, "grad_norm": 5.62779, "time": 3.23336}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.49352, "stage0_loss_instance_mil": 0.0061, "stage0_bag_acc": 99.875, "stage0_mean_ious": 0.17669, "stage0_s": 0.0, "stage0_m": 0.00957, "stage0_l": 0.11103, "stage0_h": 0.18143, "stage1_loss_instance_mil": 0.12238, "stage1_bag_acc": 99.875, "stage1_neg_loss": 0.05358, "stage1_mean_ious": 0.16524, "stage1_s": 0.0, "stage1_m": 0.00677, "stage1_l": 0.10136, "stage1_h": 0.17032, "loss": 0.18205, "grad_norm": 5.04828, "time": 5.13754}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.67528, "stage0_loss_instance_mil": 0.00206, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.17312, "stage0_s": 0.0, "stage0_m": 0.01476, "stage0_l": 0.10102, "stage0_h": 0.18527, "stage1_loss_instance_mil": 0.11777, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.0496, "stage1_mean_ious": 0.15808, "stage1_s": 0.0, "stage1_m": 0.01239, "stage1_l": 0.08718, "stage1_h": 0.16886, "loss": 0.16943, "grad_norm": 5.17977, "time": 5.32828}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.16908, "stage0_loss_instance_mil": 0.00755, "stage0_bag_acc": 99.80889, "stage0_mean_ious": 0.16967, "stage0_s": 0.0, "stage0_m": 0.01917, "stage0_l": 0.11141, "stage0_h": 0.17238, "stage1_loss_instance_mil": 0.12632, "stage1_bag_acc": 99.88889, "stage1_neg_loss": 0.05444, "stage1_mean_ious": 0.1549, "stage1_s": 0.0, "stage1_m": 0.01276, "stage1_l": 0.0892, "stage1_h": 0.16007, "loss": 0.18831, "grad_norm": 6.08799, "time": 2.90287}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.58672, "stage0_loss_instance_mil": 0.00745, "stage0_bag_acc": 99.58618, "stage0_mean_ious": 0.17603, "stage0_s": 0.0, "stage0_m": 0.02116, "stage0_l": 0.11008, "stage0_h": 0.18284, "stage1_loss_instance_mil": 0.11475, "stage1_bag_acc": 99.67709, "stage1_neg_loss": 0.05801, "stage1_mean_ious": 0.1647, "stage1_s": 0.0, "stage1_m": 0.01354, "stage1_l": 0.10406, "stage1_h": 0.17158, "loss": 0.1802, "grad_norm": 5.43741, "time": 4.09724}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.44724, "stage0_loss_instance_mil": 0.0024, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.18843, "stage0_s": 0.0, "stage0_m": 0.04047, "stage0_l": 0.09878, "stage0_h": 0.19839, "stage1_loss_instance_mil": 0.11639, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.05223, "stage1_mean_ious": 0.17072, "stage1_s": 0.0, "stage1_m": 0.03265, "stage1_l": 0.08738, "stage1_h": 0.18109, "loss": 0.17102, "grad_norm": 5.19519, "time": 5.07094}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.17068, "stage0_loss_instance_mil": 0.00456, "stage0_bag_acc": 99.88889, "stage0_mean_ious": 0.18099, "stage0_s": 0.0, "stage0_m": 0.03092, "stage0_l": 0.08711, "stage0_h": 0.18731, "stage1_loss_instance_mil": 0.126, "stage1_bag_acc": 99.74902, "stage1_neg_loss": 0.05442, "stage1_mean_ious": 0.16534, "stage1_s": 0.0, "stage1_m": 0.02307, "stage1_l": 0.0764, "stage1_h": 0.17197, "loss": 0.18498, "grad_norm": 5.76693, "time": 2.67326}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.003, "bbox_mAP_50": 0.021, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.003 0.021 0.001 0.000 0.000 0.000"}
