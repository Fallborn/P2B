{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.38221, "stage0_loss_instance_mil": 0.69871, "stage0_bag_acc": 21.94458, "stage0_mean_ious": 0.30154, "stage0_s": 0.0, "stage0_m": 0.01813, "stage0_l": 0.18968, "stage0_h": 0.30857, "stage1_loss_instance_mil": 0.18051, "stage1_bag_acc": 11.44805, "stage1_neg_loss": 0.00062, "stage1_mean_ious": 0.29792, "stage1_s": 0.0, "stage1_m": 0.01905, "stage1_l": 0.19336, "stage1_h": 0.30414, "loss": 0.87984, "grad_norm": 3.367, "time": 4.3323}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.39199, "stage0_loss_instance_mil": 0.57586, "stage0_bag_acc": 50.33876, "stage0_mean_ious": 0.3254, "stage0_s": 0.0, "stage0_m": 0.02745, "stage0_l": 0.18884, "stage0_h": 0.33918, "stage1_loss_instance_mil": 0.25976, "stage1_bag_acc": 21.97868, "stage1_neg_loss": 0.00218, "stage1_mean_ious": 0.32437, "stage1_s": 0.0, "stage1_m": 0.02466, "stage1_l": 0.19872, "stage1_h": 0.33665, "loss": 0.8378, "grad_norm": 4.19261, "time": 4.95375}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.2984, "stage0_loss_instance_mil": 0.24319, "stage0_bag_acc": 89.9811, "stage0_mean_ious": 0.36315, "stage0_s": 0.0, "stage0_m": 0.01279, "stage0_l": 0.16509, "stage0_h": 0.389, "stage1_loss_instance_mil": 0.35501, "stage1_bag_acc": 78.43142, "stage1_neg_loss": 0.06422, "stage1_mean_ious": 0.36732, "stage1_s": 0.0, "stage1_m": 0.01483, "stage1_l": 0.18028, "stage1_h": 0.39147, "loss": 0.66242, "grad_norm": 9.88563, "time": 4.1962}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17810, "data_time": 0.42273, "stage0_loss_instance_mil": 0.08603, "stage0_bag_acc": 95.85043, "stage0_mean_ious": 0.43524, "stage0_s": 0.0, "stage0_m": 0.05107, "stage0_l": 0.18151, "stage0_h": 0.47057, "stage1_loss_instance_mil": 0.35853, "stage1_bag_acc": 96.35493, "stage1_neg_loss": 0.08797, "stage1_mean_ious": 0.42525, "stage1_s": 0.0, "stage1_m": 0.05834, "stage1_l": 0.18986, "stage1_h": 0.45641, "loss": 0.53254, "grad_norm": 14.52485, "time": 4.42406}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17810, "data_time": 0.36169, "stage0_loss_instance_mil": 0.06863, "stage0_bag_acc": 96.65836, "stage0_mean_ious": 0.4238, "stage0_s": 0.00116, "stage0_m": 0.03785, "stage0_l": 0.19742, "stage0_h": 0.45487, "stage1_loss_instance_mil": 0.33961, "stage1_bag_acc": 97.46291, "stage1_neg_loss": 0.09395, "stage1_mean_ious": 0.41406, "stage1_s": 0.00104, "stage1_m": 0.0288, "stage1_l": 0.19272, "stage1_h": 0.44549, "loss": 0.50219, "grad_norm": 16.13173, "time": 4.42812}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17810, "data_time": 0.37838, "stage0_loss_instance_mil": 0.04655, "stage0_bag_acc": 97.62082, "stage0_mean_ious": 0.45252, "stage0_s": 0.0, "stage0_m": 0.03007, "stage0_l": 0.17505, "stage0_h": 0.48582, "stage1_loss_instance_mil": 0.27821, "stage1_bag_acc": 98.92973, "stage1_neg_loss": 0.08343, "stage1_mean_ious": 0.42812, "stage1_s": 0.0, "stage1_m": 0.02946, "stage1_l": 0.16349, "stage1_h": 0.4602, "loss": 0.40818, "grad_norm": 12.35624, "time": 4.32203}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17810, "data_time": 0.38175, "stage0_loss_instance_mil": 0.04298, "stage0_bag_acc": 97.27325, "stage0_mean_ious": 0.46177, "stage0_s": 0.0, "stage0_m": 0.03699, "stage0_l": 0.15882, "stage0_h": 0.49685, "stage1_loss_instance_mil": 0.21941, "stage1_bag_acc": 98.35161, "stage1_neg_loss": 0.07835, "stage1_mean_ious": 0.43366, "stage1_s": 0.0, "stage1_m": 0.03541, "stage1_l": 0.14665, "stage1_h": 0.46615, "loss": 0.34074, "grad_norm": 12.60588, "time": 4.16207}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.3162, "stage0_loss_instance_mil": 0.02527, "stage0_bag_acc": 98.79923, "stage0_mean_ious": 0.48078, "stage0_s": 0.0, "stage0_m": 0.04273, "stage0_l": 0.17757, "stage0_h": 0.52729, "stage1_loss_instance_mil": 0.21032, "stage1_bag_acc": 99.13064, "stage1_neg_loss": 0.06583, "stage1_mean_ious": 0.44356, "stage1_s": 0.0, "stage1_m": 0.03491, "stage1_l": 0.16903, "stage1_h": 0.48659, "loss": 0.30143, "grad_norm": 11.21411, "time": 4.32454}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.4057, "stage0_loss_instance_mil": 0.03478, "stage0_bag_acc": 98.08924, "stage0_mean_ious": 0.51141, "stage0_s": 0.00116, "stage0_m": 0.02361, "stage0_l": 0.2083, "stage0_h": 0.54655, "stage1_loss_instance_mil": 0.16081, "stage1_bag_acc": 98.58547, "stage1_neg_loss": 0.05859, "stage1_mean_ious": 0.49362, "stage1_s": 0.00093, "stage1_m": 0.02228, "stage1_l": 0.20873, "stage1_h": 0.52486, "loss": 0.25417, "grad_norm": 11.29019, "time": 4.55979}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.43291, "stage0_loss_instance_mil": 0.03165, "stage0_bag_acc": 97.89908, "stage0_mean_ious": 0.53085, "stage0_s": 0.0, "stage0_m": 0.06672, "stage0_l": 0.22537, "stage0_h": 0.57368, "stage1_loss_instance_mil": 0.12179, "stage1_bag_acc": 97.94858, "stage1_neg_loss": 0.05751, "stage1_mean_ious": 0.52133, "stage1_s": 0.0, "stage1_m": 0.0603, "stage1_l": 0.23696, "stage1_h": 0.56206, "loss": 0.21095, "grad_norm": 11.13628, "time": 4.55343}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.42406, "stage0_loss_instance_mil": 0.02956, "stage0_bag_acc": 98.01752, "stage0_mean_ious": 0.51948, "stage0_s": 0.0, "stage0_m": 0.0377, "stage0_l": 0.19473, "stage0_h": 0.56306, "stage1_loss_instance_mil": 0.10958, "stage1_bag_acc": 97.58259, "stage1_neg_loss": 0.05148, "stage1_mean_ious": 0.5149, "stage1_s": 0.0, "stage1_m": 0.042, "stage1_l": 0.20805, "stage1_h": 0.55489, "loss": 0.19062, "grad_norm": 9.06954, "time": 4.70324}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.32096, "stage0_loss_instance_mil": 0.02716, "stage0_bag_acc": 98.55492, "stage0_mean_ious": 0.52741, "stage0_s": 0.0, "stage0_m": 0.03559, "stage0_l": 0.2375, "stage0_h": 0.56243, "stage1_loss_instance_mil": 0.07908, "stage1_bag_acc": 98.66781, "stage1_neg_loss": 0.0377, "stage1_mean_ious": 0.53087, "stage1_s": 0.0, "stage1_m": 0.03811, "stage1_l": 0.25595, "stage1_h": 0.56324, "loss": 0.14394, "grad_norm": 6.21374, "time": 4.07878}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.62665, "stage0_loss_instance_mil": 0.01352, "stage0_bag_acc": 99.48531, "stage0_mean_ious": 0.56267, "stage0_s": 0.0, "stage0_m": 0.06553, "stage0_l": 0.2453, "stage0_h": 0.59733, "stage1_loss_instance_mil": 0.06935, "stage1_bag_acc": 99.47096, "stage1_neg_loss": 0.03388, "stage1_mean_ious": 0.56085, "stage1_s": 0.0, "stage1_m": 0.07572, "stage1_l": 0.27555, "stage1_h": 0.59065, "loss": 0.11675, "grad_norm": 5.61959, "time": 5.67462}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.48748, "stage0_loss_instance_mil": 0.03197, "stage0_bag_acc": 98.21493, "stage0_mean_ious": 0.55744, "stage0_s": 0.0, "stage0_m": 0.03557, "stage0_l": 0.27507, "stage0_h": 0.59185, "stage1_loss_instance_mil": 0.07141, "stage1_bag_acc": 98.50946, "stage1_neg_loss": 0.03624, "stage1_mean_ious": 0.56176, "stage1_s": 0.0, "stage1_m": 0.03343, "stage1_l": 0.3032, "stage1_h": 0.59148, "loss": 0.13962, "grad_norm": 7.48383, "time": 5.45338}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.19931, "stage0_loss_instance_mil": 0.01787, "stage0_bag_acc": 98.78171, "stage0_mean_ious": 0.57689, "stage0_s": 0.0, "stage0_m": 0.04975, "stage0_l": 0.34561, "stage0_h": 0.61215, "stage1_loss_instance_mil": 0.05728, "stage1_bag_acc": 99.14608, "stage1_neg_loss": 0.03298, "stage1_mean_ious": 0.5757, "stage1_s": 0.0, "stage1_m": 0.06488, "stage1_l": 0.37136, "stage1_h": 0.60545, "loss": 0.10813, "grad_norm": 4.82655, "time": 2.83782}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.78013, "stage0_loss_instance_mil": 0.00918, "stage0_bag_acc": 99.28661, "stage0_mean_ious": 0.57328, "stage0_s": 0.0, "stage0_m": 0.05429, "stage0_l": 0.28594, "stage0_h": 0.60865, "stage1_loss_instance_mil": 0.04686, "stage1_bag_acc": 99.58185, "stage1_neg_loss": 0.02657, "stage1_mean_ious": 0.56873, "stage1_s": 0.0, "stage1_m": 0.06864, "stage1_l": 0.32352, "stage1_h": 0.59487, "loss": 0.0826, "grad_norm": 4.31037, "time": 5.79128}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.47312, "stage0_loss_instance_mil": 0.01236, "stage0_bag_acc": 99.41673, "stage0_mean_ious": 0.563, "stage0_s": 0.0, "stage0_m": 0.05373, "stage0_l": 0.2649, "stage0_h": 0.60148, "stage1_loss_instance_mil": 0.06627, "stage1_bag_acc": 99.16663, "stage1_neg_loss": 0.02976, "stage1_mean_ious": 0.55816, "stage1_s": 0.0, "stage1_m": 0.06515, "stage1_l": 0.2761, "stage1_h": 0.59177, "loss": 0.10839, "grad_norm": 5.8346, "time": 4.92713}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.21362, "stage0_loss_instance_mil": 0.01393, "stage0_bag_acc": 99.20852, "stage0_mean_ious": 0.56758, "stage0_s": 0.0, "stage0_m": 0.06314, "stage0_l": 0.32246, "stage0_h": 0.60365, "stage1_loss_instance_mil": 0.04476, "stage1_bag_acc": 99.66474, "stage1_neg_loss": 0.02307, "stage1_mean_ious": 0.56123, "stage1_s": 0.0, "stage1_m": 0.06658, "stage1_l": 0.34127, "stage1_h": 0.59329, "loss": 0.08177, "grad_norm": 3.71582, "time": 2.94675}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.279, "bbox_mAP_50": 0.609, "bbox_mAP_75": 0.466, "bbox_mAP_s": 0.31, "bbox_mAP_m": 0.229, "bbox_mAP_l": 0.143, "bbox_mAP_copypaste": "0.279 0.609 0.466 0.310 0.229 0.143"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.96869, "stage0_loss_instance_mil": 0.00714, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.58389, "stage0_s": 0.0, "stage0_m": 0.05718, "stage0_l": 0.31217, "stage0_h": 0.62018, "stage1_loss_instance_mil": 0.03342, "stage1_bag_acc": 99.71206, "stage1_neg_loss": 0.02255, "stage1_mean_ious": 0.58318, "stage1_s": 0.0, "stage1_m": 0.06992, "stage1_l": 0.35739, "stage1_h": 0.61083, "loss": 0.06311, "grad_norm": 3.35464, "time": 5.85865}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.99669, "stage0_loss_instance_mil": 0.00421, "stage0_bag_acc": 99.83333, "stage0_mean_ious": 0.5676, "stage0_s": 0.0, "stage0_m": 0.04007, "stage0_l": 0.31404, "stage0_h": 0.60766, "stage1_loss_instance_mil": 0.04737, "stage1_bag_acc": 99.89474, "stage1_neg_loss": 0.02484, "stage1_mean_ious": 0.56366, "stage1_s": 0.0, "stage1_m": 0.04802, "stage1_l": 0.34764, "stage1_h": 0.59708, "loss": 0.07642, "grad_norm": 4.20145, "time": 4.78319}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.09349, "stage0_loss_instance_mil": 0.01776, "stage0_bag_acc": 98.79338, "stage0_mean_ious": 0.57291, "stage0_s": 0.00117, "stage0_m": 0.06924, "stage0_l": 0.29454, "stage0_h": 0.60167, "stage1_loss_instance_mil": 0.04204, "stage1_bag_acc": 99.22682, "stage1_neg_loss": 0.02253, "stage1_mean_ious": 0.56159, "stage1_s": 0.00107, "stage1_m": 0.08368, "stage1_l": 0.31524, "stage1_h": 0.5851, "loss": 0.08233, "grad_norm": 4.64896, "time": 1.96314}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17810, "data_time": 0.80737, "stage0_loss_instance_mil": 0.01776, "stage0_bag_acc": 98.83187, "stage0_mean_ious": 0.57773, "stage0_s": 0.0, "stage0_m": 0.06286, "stage0_l": 0.31691, "stage0_h": 0.61387, "stage1_loss_instance_mil": 0.04867, "stage1_bag_acc": 99.42159, "stage1_neg_loss": 0.02917, "stage1_mean_ious": 0.57216, "stage1_s": 0.0, "stage1_m": 0.06522, "stage1_l": 0.35423, "stage1_h": 0.59952, "loss": 0.0956, "grad_norm": 4.73732, "time": 5.45431}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17810, "data_time": 0.46293, "stage0_loss_instance_mil": 0.01276, "stage0_bag_acc": 99.36144, "stage0_mean_ious": 0.58655, "stage0_s": 0.0, "stage0_m": 0.03822, "stage0_l": 0.27147, "stage0_h": 0.6091, "stage1_loss_instance_mil": 0.04668, "stage1_bag_acc": 99.52577, "stage1_neg_loss": 0.02605, "stage1_mean_ious": 0.57662, "stage1_s": 0.0, "stage1_m": 0.04135, "stage1_l": 0.28409, "stage1_h": 0.59623, "loss": 0.08549, "grad_norm": 4.18238, "time": 4.04247}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17810, "data_time": 0.18127, "stage0_loss_instance_mil": 0.02004, "stage0_bag_acc": 98.56667, "stage0_mean_ious": 0.60951, "stage0_s": 0.0, "stage0_m": 0.04738, "stage0_l": 0.28295, "stage0_h": 0.63839, "stage1_loss_instance_mil": 0.05437, "stage1_bag_acc": 98.63706, "stage1_neg_loss": 0.02726, "stage1_mean_ious": 0.59704, "stage1_s": 0.0, "stage1_m": 0.05845, "stage1_l": 0.29962, "stage1_h": 0.62162, "loss": 0.10167, "grad_norm": 5.10605, "time": 2.84948}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.94251, "stage0_loss_instance_mil": 0.00785, "stage0_bag_acc": 99.67619, "stage0_mean_ious": 0.62846, "stage0_s": 0.0, "stage0_m": 0.05308, "stage0_l": 0.28973, "stage0_h": 0.65897, "stage1_loss_instance_mil": 0.03705, "stage1_bag_acc": 99.81385, "stage1_neg_loss": 0.02552, "stage1_mean_ious": 0.62664, "stage1_s": 0.0, "stage1_m": 0.07022, "stage1_l": 0.32881, "stage1_h": 0.65047, "loss": 0.07041, "grad_norm": 3.61517, "time": 5.88685}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.14129, "stage0_loss_instance_mil": 0.00388, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.60897, "stage0_s": 0.0, "stage0_m": 0.09162, "stage0_l": 0.36344, "stage0_h": 0.65773, "stage1_loss_instance_mil": 0.03835, "stage1_bag_acc": 99.90476, "stage1_neg_loss": 0.01772, "stage1_mean_ious": 0.60382, "stage1_s": 0.0, "stage1_m": 0.1145, "stage1_l": 0.40809, "stage1_h": 0.6422, "loss": 0.05995, "grad_norm": 2.98999, "time": 2.42547}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.46229, "stage0_loss_instance_mil": 0.00567, "stage0_bag_acc": 99.78947, "stage0_mean_ious": 0.60532, "stage0_s": 0.00116, "stage0_m": 0.02917, "stage0_l": 0.32077, "stage0_h": 0.64047, "stage1_loss_instance_mil": 0.03338, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.01893, "stage1_mean_ious": 0.60299, "stage1_s": 0.00092, "stage1_m": 0.02691, "stage1_l": 0.3809, "stage1_h": 0.6294, "loss": 0.05798, "grad_norm": 2.86192, "time": 5.0305}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.45725, "stage0_loss_instance_mil": 0.00416, "stage0_bag_acc": 99.72383, "stage0_mean_ious": 0.60788, "stage0_s": 0.0, "stage0_m": 0.06135, "stage0_l": 0.31499, "stage0_h": 0.64763, "stage1_loss_instance_mil": 0.03131, "stage1_bag_acc": 99.92, "stage1_neg_loss": 0.02003, "stage1_mean_ious": 0.59577, "stage1_s": 0.0, "stage1_m": 0.06587, "stage1_l": 0.3456, "stage1_h": 0.62777, "loss": 0.0555, "grad_norm": 3.05057, "time": 4.50173}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.15178, "stage0_loss_instance_mil": 0.00355, "stage0_bag_acc": 99.72381, "stage0_mean_ious": 0.60621, "stage0_s": 0.0, "stage0_m": 0.03204, "stage0_l": 0.30997, "stage0_h": 0.63729, "stage1_loss_instance_mil": 0.03399, "stage1_bag_acc": 99.77381, "stage1_neg_loss": 0.01663, "stage1_mean_ious": 0.60152, "stage1_s": 0.0, "stage1_m": 0.042, "stage1_l": 0.35284, "stage1_h": 0.62367, "loss": 0.05417, "grad_norm": 2.7212, "time": 2.44223}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.70881, "stage0_loss_instance_mil": 0.00417, "stage0_bag_acc": 99.62258, "stage0_mean_ious": 0.59587, "stage0_s": 0.0, "stage0_m": 0.03766, "stage0_l": 0.28867, "stage0_h": 0.63422, "stage1_loss_instance_mil": 0.0306, "stage1_bag_acc": 99.72258, "stage1_neg_loss": 0.01476, "stage1_mean_ious": 0.58812, "stage1_s": 0.0, "stage1_m": 0.04598, "stage1_l": 0.30615, "stage1_h": 0.61959, "loss": 0.04953, "grad_norm": 2.53658, "time": 5.69875}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17810, "data_time": 0.3477, "stage0_loss_instance_mil": 0.00253, "stage0_bag_acc": 99.89474, "stage0_mean_ious": 0.5983, "stage0_s": 0.0, "stage0_m": 0.09326, "stage0_l": 0.36232, "stage0_h": 0.63965, "stage1_loss_instance_mil": 0.03101, "stage1_bag_acc": 99.89474, "stage1_neg_loss": 0.02165, "stage1_mean_ious": 0.60307, "stage1_s": 0.0, "stage1_m": 0.11121, "stage1_l": 0.41673, "stage1_h": 0.63522, "loss": 0.05519, "grad_norm": 2.93051, "time": 3.13572}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17810, "data_time": 0.27233, "stage0_loss_instance_mil": 0.00789, "stage0_bag_acc": 99.6619, "stage0_mean_ious": 0.60107, "stage0_s": 0.00124, "stage0_m": 0.08133, "stage0_l": 0.31706, "stage0_h": 0.64779, "stage1_loss_instance_mil": 0.0285, "stage1_bag_acc": 99.7619, "stage1_neg_loss": 0.01886, "stage1_mean_ious": 0.59058, "stage1_s": 0.00095, "stage1_m": 0.09486, "stage1_l": 0.35213, "stage1_h": 0.62715, "loss": 0.05525, "grad_norm": 2.86991, "time": 3.84073}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17810, "data_time": 0.35338, "stage0_loss_instance_mil": 0.00337, "stage0_bag_acc": 99.90909, "stage0_mean_ious": 0.6151, "stage0_s": 0.0, "stage0_m": 0.04977, "stage0_l": 0.35963, "stage0_h": 0.6437, "stage1_loss_instance_mil": 0.02607, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.01475, "stage1_mean_ious": 0.6118, "stage1_s": 0.0, "stage1_m": 0.06778, "stage1_l": 0.39557, "stage1_h": 0.63266, "loss": 0.04418, "grad_norm": 2.49949, "time": 4.30963}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17810, "data_time": 0.32803, "stage0_loss_instance_mil": 0.00611, "stage0_bag_acc": 99.83974, "stage0_mean_ious": 0.60978, "stage0_s": 0.0, "stage0_m": 0.08793, "stage0_l": 0.29883, "stage0_h": 0.64695, "stage1_loss_instance_mil": 0.03074, "stage1_bag_acc": 99.92308, "stage1_neg_loss": 0.01882, "stage1_mean_ious": 0.60459, "stage1_s": 0.0, "stage1_m": 0.09969, "stage1_l": 0.33788, "stage1_h": 0.63373, "loss": 0.05566, "grad_norm": 2.84431, "time": 3.3114}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17810, "data_time": 0.3266, "stage0_loss_instance_mil": 0.0026, "stage0_bag_acc": 99.83069, "stage0_mean_ious": 0.61244, "stage0_s": 0.0, "stage0_m": 0.03827, "stage0_l": 0.35647, "stage0_h": 0.64542, "stage1_loss_instance_mil": 0.02945, "stage1_bag_acc": 99.92593, "stage1_neg_loss": 0.01624, "stage1_mean_ious": 0.60727, "stage1_s": 0.0, "stage1_m": 0.04405, "stage1_l": 0.39348, "stage1_h": 0.63394, "loss": 0.04829, "grad_norm": 2.63018, "time": 4.1648}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17810, "data_time": 0.4175, "stage0_loss_instance_mil": 0.00487, "stage0_bag_acc": 99.66389, "stage0_mean_ious": 0.60172, "stage0_s": 0.0, "stage0_m": 0.07024, "stage0_l": 0.33388, "stage0_h": 0.633, "stage1_loss_instance_mil": 0.03672, "stage1_bag_acc": 99.66389, "stage1_neg_loss": 0.01552, "stage1_mean_ious": 0.59209, "stage1_s": 0.0, "stage1_m": 0.0863, "stage1_l": 0.37377, "stage1_h": 0.61427, "loss": 0.05712, "grad_norm": 2.75775, "time": 5.27538}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.307, "bbox_mAP_50": 0.683, "bbox_mAP_75": 0.536, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.235, "bbox_mAP_l": 0.132, "bbox_mAP_copypaste": "0.307 0.683 0.536 0.332 0.235 0.132"}
