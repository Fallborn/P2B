{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+c820f32", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [3]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09526, "stage0_loss_instance_mil": 0.70997, "stage0_bag_acc": 21.3017, "stage0_mean_ious": 0.30902, "stage0_s": 0.0, "stage0_m": 0.02299, "stage0_l": 0.14899, "stage0_h": 0.33026, "stage1_loss_instance_mil": 0.17641, "stage1_bag_acc": 12.8014, "stage1_neg_loss": 0.00166, "stage1_mean_ious": 0.28576, "stage1_s": 0.0, "stage1_m": 0.0217, "stage1_l": 0.14854, "stage1_h": 0.30374, "loss": 0.88803, "grad_norm": 3.1236, "time": 1.74786}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0454, "stage0_loss_instance_mil": 0.58349, "stage0_bag_acc": 49.22165, "stage0_mean_ious": 0.32927, "stage0_s": 0.0, "stage0_m": 0.06425, "stage0_l": 0.23069, "stage0_h": 0.34182, "stage1_loss_instance_mil": 0.24874, "stage1_bag_acc": 17.33824, "stage1_neg_loss": 0.00449, "stage1_mean_ious": 0.31054, "stage1_s": 0.0, "stage1_m": 0.0784, "stage1_l": 0.22623, "stage1_h": 0.31888, "loss": 0.83671, "grad_norm": 4.14127, "time": 1.69009}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04824, "stage0_loss_instance_mil": 0.23854, "stage0_bag_acc": 89.36953, "stage0_mean_ious": 0.33295, "stage0_s": 0.0, "stage0_m": 0.05373, "stage0_l": 0.20081, "stage0_h": 0.34451, "stage1_loss_instance_mil": 0.36754, "stage1_bag_acc": 84.21289, "stage1_neg_loss": 0.07558, "stage1_mean_ious": 0.32815, "stage1_s": 0.0, "stage1_m": 0.04762, "stage1_l": 0.20922, "stage1_h": 0.33616, "loss": 0.68166, "grad_norm": 12.32507, "time": 1.70409}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 17809, "data_time": 0.10148, "stage0_loss_instance_mil": 0.07867, "stage0_bag_acc": 96.11355, "stage0_mean_ious": 0.36766, "stage0_s": 0.0, "stage0_m": 0.05253, "stage0_l": 0.16409, "stage0_h": 0.38204, "stage1_loss_instance_mil": 0.34535, "stage1_bag_acc": 97.19931, "stage1_neg_loss": 0.0908, "stage1_mean_ious": 0.33564, "stage1_s": 0.0, "stage1_m": 0.05584, "stage1_l": 0.15562, "stage1_h": 0.34758, "loss": 0.51483, "grad_norm": 13.43739, "time": 1.75074}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17809, "data_time": 0.04696, "stage0_loss_instance_mil": 0.05501, "stage0_bag_acc": 96.44519, "stage0_mean_ious": 0.34527, "stage0_s": 0.00162, "stage0_m": 0.05024, "stage0_l": 0.15433, "stage0_h": 0.36428, "stage1_loss_instance_mil": 0.31327, "stage1_bag_acc": 98.27638, "stage1_neg_loss": 0.08857, "stage1_mean_ious": 0.31818, "stage1_s": 0.0012, "stage1_m": 0.04722, "stage1_l": 0.15121, "stage1_h": 0.33413, "loss": 0.45686, "grad_norm": 14.32919, "time": 1.7255}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17809, "data_time": 0.04618, "stage0_loss_instance_mil": 0.05213, "stage0_bag_acc": 97.05154, "stage0_mean_ious": 0.36775, "stage0_s": 0.0, "stage0_m": 0.045, "stage0_l": 0.16024, "stage0_h": 0.3941, "stage1_loss_instance_mil": 0.28919, "stage1_bag_acc": 97.96138, "stage1_neg_loss": 0.08368, "stage1_mean_ious": 0.34468, "stage1_s": 0.0, "stage1_m": 0.0473, "stage1_l": 0.16831, "stage1_h": 0.36694, "loss": 0.425, "grad_norm": 12.78859, "time": 1.69626}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 4e-05, "memory": 17809, "data_time": 0.09733, "stage0_loss_instance_mil": 0.04552, "stage0_bag_acc": 97.84031, "stage0_mean_ious": 0.37137, "stage0_s": 0.0, "stage0_m": 0.0308, "stage0_l": 0.14592, "stage0_h": 0.40286, "stage1_loss_instance_mil": 0.27575, "stage1_bag_acc": 98.52457, "stage1_neg_loss": 0.09281, "stage1_mean_ious": 0.33308, "stage1_s": 0.0, "stage1_m": 0.02839, "stage1_l": 0.13761, "stage1_h": 0.35934, "loss": 0.41408, "grad_norm": 16.49607, "time": 1.73973}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04506, "stage0_loss_instance_mil": 0.03767, "stage0_bag_acc": 98.233, "stage0_mean_ious": 0.32711, "stage0_s": 0.0, "stage0_m": 0.04012, "stage0_l": 0.14115, "stage0_h": 0.35425, "stage1_loss_instance_mil": 0.24408, "stage1_bag_acc": 97.91079, "stage1_neg_loss": 0.08207, "stage1_mean_ious": 0.29949, "stage1_s": 0.0, "stage1_m": 0.03335, "stage1_l": 0.14425, "stage1_h": 0.3221, "loss": 0.36382, "grad_norm": 14.08201, "time": 1.67209}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.0442, "stage0_loss_instance_mil": 0.04411, "stage0_bag_acc": 96.93695, "stage0_mean_ious": 0.36806, "stage0_s": 0.0017, "stage0_m": 0.03837, "stage0_l": 0.13101, "stage0_h": 0.3903, "stage1_loss_instance_mil": 0.24572, "stage1_bag_acc": 97.80356, "stage1_neg_loss": 0.07989, "stage1_mean_ious": 0.3351, "stage1_s": 0.00161, "stage1_m": 0.04052, "stage1_l": 0.13183, "stage1_h": 0.35352, "loss": 0.36972, "grad_norm": 14.63949, "time": 1.6894}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09756, "stage0_loss_instance_mil": 0.02914, "stage0_bag_acc": 98.30009, "stage0_mean_ious": 0.42813, "stage0_s": 0.00138, "stage0_m": 0.02254, "stage0_l": 0.14082, "stage0_h": 0.4561, "stage1_loss_instance_mil": 0.19918, "stage1_bag_acc": 99.01836, "stage1_neg_loss": 0.06886, "stage1_mean_ious": 0.38398, "stage1_s": 0.00154, "stage1_m": 0.0229, "stage1_l": 0.15074, "stage1_h": 0.40511, "loss": 0.29717, "grad_norm": 12.35881, "time": 1.73806}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04323, "stage0_loss_instance_mil": 0.02968, "stage0_bag_acc": 98.06897, "stage0_mean_ious": 0.41459, "stage0_s": 0.0, "stage0_m": 0.04493, "stage0_l": 0.15592, "stage0_h": 0.45039, "stage1_loss_instance_mil": 0.19553, "stage1_bag_acc": 98.40509, "stage1_neg_loss": 0.08206, "stage1_mean_ious": 0.37592, "stage1_s": 0.0, "stage1_m": 0.05106, "stage1_l": 0.15997, "stage1_h": 0.40397, "loss": 0.30727, "grad_norm": 17.78496, "time": 1.67244}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04363, "stage0_loss_instance_mil": 0.0149, "stage0_bag_acc": 99.30207, "stage0_mean_ious": 0.39648, "stage0_s": 0.0, "stage0_m": 0.04098, "stage0_l": 0.16059, "stage0_h": 0.43349, "stage1_loss_instance_mil": 0.16758, "stage1_bag_acc": 99.06119, "stage1_neg_loss": 0.06201, "stage1_mean_ious": 0.36266, "stage1_s": 0.0, "stage1_m": 0.04342, "stage1_l": 0.16384, "stage1_h": 0.39189, "loss": 0.24449, "grad_norm": 11.25111, "time": 1.67971}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09591, "stage0_loss_instance_mil": 0.00967, "stage0_bag_acc": 99.77019, "stage0_mean_ious": 0.45934, "stage0_s": 0.0, "stage0_m": 0.0648, "stage0_l": 0.18858, "stage0_h": 0.4922, "stage1_loss_instance_mil": 0.15061, "stage1_bag_acc": 99.33782, "stage1_neg_loss": 0.06042, "stage1_mean_ious": 0.42721, "stage1_s": 0.0, "stage1_m": 0.07251, "stage1_l": 0.19506, "stage1_h": 0.45308, "loss": 0.22071, "grad_norm": 11.87232, "time": 1.69163}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04352, "stage0_loss_instance_mil": 0.01274, "stage0_bag_acc": 99.34975, "stage0_mean_ious": 0.44872, "stage0_s": 0.0, "stage0_m": 0.03173, "stage0_l": 0.16309, "stage0_h": 0.48356, "stage1_loss_instance_mil": 0.16536, "stage1_bag_acc": 98.91805, "stage1_neg_loss": 0.06796, "stage1_mean_ious": 0.40854, "stage1_s": 0.0, "stage1_m": 0.03193, "stage1_l": 0.1708, "stage1_h": 0.43636, "loss": 0.24607, "grad_norm": 14.19322, "time": 1.7072}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04251, "stage0_loss_instance_mil": 0.02049, "stage0_bag_acc": 98.91588, "stage0_mean_ious": 0.45331, "stage0_s": 0.0, "stage0_m": 0.05196, "stage0_l": 0.16298, "stage0_h": 0.49561, "stage1_loss_instance_mil": 0.14725, "stage1_bag_acc": 98.97943, "stage1_neg_loss": 0.06175, "stage1_mean_ious": 0.41044, "stage1_s": 0.0, "stage1_m": 0.05097, "stage1_l": 0.16276, "stage1_h": 0.44595, "loss": 0.22949, "grad_norm": 11.45959, "time": 1.68705}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09664, "stage0_loss_instance_mil": 0.01921, "stage0_bag_acc": 99.12941, "stage0_mean_ious": 0.48511, "stage0_s": 0.0, "stage0_m": 0.03848, "stage0_l": 0.17927, "stage0_h": 0.52281, "stage1_loss_instance_mil": 0.1363, "stage1_bag_acc": 98.68137, "stage1_neg_loss": 0.05568, "stage1_mean_ious": 0.44528, "stage1_s": 0.0, "stage1_m": 0.04074, "stage1_l": 0.18097, "stage1_h": 0.47579, "loss": 0.21119, "grad_norm": 10.76665, "time": 1.72583}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04225, "stage0_loss_instance_mil": 0.01593, "stage0_bag_acc": 99.10556, "stage0_mean_ious": 0.50029, "stage0_s": 0.0, "stage0_m": 0.0467, "stage0_l": 0.13487, "stage0_h": 0.54124, "stage1_loss_instance_mil": 0.11472, "stage1_bag_acc": 99.23667, "stage1_neg_loss": 0.05316, "stage1_mean_ious": 0.46132, "stage1_s": 0.0, "stage1_m": 0.0451, "stage1_l": 0.14332, "stage1_h": 0.49572, "loss": 0.18381, "grad_norm": 9.13141, "time": 1.67365}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04235, "stage0_loss_instance_mil": 0.02329, "stage0_bag_acc": 98.96424, "stage0_mean_ious": 0.48992, "stage0_s": 0.0, "stage0_m": 0.02525, "stage0_l": 0.20665, "stage0_h": 0.53301, "stage1_loss_instance_mil": 0.11247, "stage1_bag_acc": 99.30725, "stage1_neg_loss": 0.04837, "stage1_mean_ious": 0.45689, "stage1_s": 0.0, "stage1_m": 0.02713, "stage1_l": 0.19896, "stage1_h": 0.49599, "loss": 0.18414, "grad_norm": 9.47477, "time": 1.68995}
{"mode": "val", "epoch": 6, "iter": 180, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.16, "bbox_mAP_50": 0.36, "bbox_mAP_75": 0.25, "bbox_mAP_s": 0.167, "bbox_mAP_m": 0.137, "bbox_mAP_l": 0.109, "bbox_mAP_copypaste": "0.160 0.360 0.250 0.167 0.137 0.109"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.09918, "stage0_loss_instance_mil": 0.01251, "stage0_bag_acc": 99.17143, "stage0_mean_ious": 0.48322, "stage0_s": 0.0, "stage0_m": 0.05554, "stage0_l": 0.17437, "stage0_h": 0.52799, "stage1_loss_instance_mil": 0.10984, "stage1_bag_acc": 99.40143, "stage1_neg_loss": 0.04384, "stage1_mean_ious": 0.45092, "stage1_s": 0.0, "stage1_m": 0.05902, "stage1_l": 0.18234, "stage1_h": 0.48801, "loss": 0.16619, "grad_norm": 8.58514, "time": 1.74564}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.0419, "stage0_loss_instance_mil": 0.01882, "stage0_bag_acc": 98.94351, "stage0_mean_ious": 0.48282, "stage0_s": 0.0, "stage0_m": 0.05958, "stage0_l": 0.19681, "stage0_h": 0.5226, "stage1_loss_instance_mil": 0.09964, "stage1_bag_acc": 99.40707, "stage1_neg_loss": 0.04896, "stage1_mean_ious": 0.44762, "stage1_s": 0.0, "stage1_m": 0.06755, "stage1_l": 0.21106, "stage1_h": 0.47931, "loss": 0.16741, "grad_norm": 9.03616, "time": 1.69919}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04134, "stage0_loss_instance_mil": 0.0064, "stage0_bag_acc": 99.66389, "stage0_mean_ious": 0.46573, "stage0_s": 0.0, "stage0_m": 0.0387, "stage0_l": 0.18909, "stage0_h": 0.52306, "stage1_loss_instance_mil": 0.10239, "stage1_bag_acc": 99.70556, "stage1_neg_loss": 0.04733, "stage1_mean_ious": 0.43101, "stage1_s": 0.0, "stage1_m": 0.03891, "stage1_l": 0.18098, "stage1_h": 0.48199, "loss": 0.15612, "grad_norm": 8.28553, "time": 1.66607}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 17809, "data_time": 0.0949, "stage0_loss_instance_mil": 0.01037, "stage0_bag_acc": 99.32688, "stage0_mean_ious": 0.50121, "stage0_s": 0.0, "stage0_m": 0.03083, "stage0_l": 0.19864, "stage0_h": 0.54305, "stage1_loss_instance_mil": 0.09073, "stage1_bag_acc": 99.63214, "stage1_neg_loss": 0.04039, "stage1_mean_ious": 0.45908, "stage1_s": 0.0, "stage1_m": 0.03453, "stage1_l": 0.19959, "stage1_h": 0.49392, "loss": 0.14148, "grad_norm": 6.9141, "time": 1.71167}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 17809, "data_time": 0.04273, "stage0_loss_instance_mil": 0.01045, "stage0_bag_acc": 99.34772, "stage0_mean_ious": 0.48748, "stage0_s": 0.0, "stage0_m": 0.03202, "stage0_l": 0.17776, "stage0_h": 0.53603, "stage1_loss_instance_mil": 0.09016, "stage1_bag_acc": 99.61102, "stage1_neg_loss": 0.04846, "stage1_mean_ious": 0.44718, "stage1_s": 0.0, "stage1_m": 0.03537, "stage1_l": 0.18334, "stage1_h": 0.48727, "loss": 0.14906, "grad_norm": 9.96951, "time": 1.7077}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 17809, "data_time": 0.04142, "stage0_loss_instance_mil": 0.00998, "stage0_bag_acc": 99.68447, "stage0_mean_ious": 0.49925, "stage0_s": 0.0, "stage0_m": 0.04287, "stage0_l": 0.15727, "stage0_h": 0.54621, "stage1_loss_instance_mil": 0.08585, "stage1_bag_acc": 99.57526, "stage1_neg_loss": 0.0399, "stage1_mean_ious": 0.45799, "stage1_s": 0.0, "stage1_m": 0.04319, "stage1_l": 0.15605, "stage1_h": 0.49815, "loss": 0.13574, "grad_norm": 7.27279, "time": 1.64638}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09502, "stage0_loss_instance_mil": 0.00356, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.47277, "stage0_s": 0.0, "stage0_m": 0.04091, "stage0_l": 0.18194, "stage0_h": 0.51587, "stage1_loss_instance_mil": 0.06752, "stage1_bag_acc": 99.71781, "stage1_neg_loss": 0.0363, "stage1_mean_ious": 0.44071, "stage1_s": 0.0, "stage1_m": 0.04597, "stage1_l": 0.18248, "stage1_h": 0.47856, "loss": 0.10737, "grad_norm": 6.26089, "time": 1.72997}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.04137, "stage0_loss_instance_mil": 0.01124, "stage0_bag_acc": 99.39931, "stage0_mean_ious": 0.51577, "stage0_s": 0.0, "stage0_m": 0.04719, "stage0_l": 0.17971, "stage0_h": 0.55909, "stage1_loss_instance_mil": 0.06062, "stage1_bag_acc": 99.39931, "stage1_neg_loss": 0.03301, "stage1_mean_ious": 0.48772, "stage1_s": 0.0, "stage1_m": 0.05355, "stage1_l": 0.17826, "stage1_h": 0.52534, "loss": 0.10488, "grad_norm": 5.76598, "time": 1.64648}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04276, "stage0_loss_instance_mil": 0.00285, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.47671, "stage0_s": 0.0, "stage0_m": 0.04331, "stage0_l": 0.15665, "stage0_h": 0.52152, "stage1_loss_instance_mil": 0.076, "stage1_bag_acc": 99.68839, "stage1_neg_loss": 0.03825, "stage1_mean_ious": 0.44073, "stage1_s": 0.0, "stage1_m": 0.04421, "stage1_l": 0.15733, "stage1_h": 0.4787, "loss": 0.1171, "grad_norm": 6.29521, "time": 1.67556}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09224, "stage0_loss_instance_mil": 0.00628, "stage0_bag_acc": 99.80909, "stage0_mean_ious": 0.50585, "stage0_s": 0.0, "stage0_m": 0.05936, "stage0_l": 0.2007, "stage0_h": 0.55347, "stage1_loss_instance_mil": 0.06326, "stage1_bag_acc": 99.90909, "stage1_neg_loss": 0.02949, "stage1_mean_ious": 0.47197, "stage1_s": 0.0, "stage1_m": 0.05602, "stage1_l": 0.19437, "stage1_h": 0.51359, "loss": 0.09903, "grad_norm": 4.93766, "time": 1.70335}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0424, "stage0_loss_instance_mil": 0.00842, "stage0_bag_acc": 99.47167, "stage0_mean_ious": 0.48173, "stage0_s": 0.0, "stage0_m": 0.03, "stage0_l": 0.20748, "stage0_h": 0.53308, "stage1_loss_instance_mil": 0.05783, "stage1_bag_acc": 99.78804, "stage1_neg_loss": 0.03362, "stage1_mean_ious": 0.44884, "stage1_s": 0.0, "stage1_m": 0.03385, "stage1_l": 0.19533, "stage1_h": 0.49454, "loss": 0.09986, "grad_norm": 4.94505, "time": 1.65027}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04417, "stage0_loss_instance_mil": 0.00147, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.49421, "stage0_s": 0.00144, "stage0_m": 0.02725, "stage0_l": 0.19351, "stage0_h": 0.54107, "stage1_loss_instance_mil": 0.05628, "stage1_bag_acc": 99.88235, "stage1_neg_loss": 0.0268, "stage1_mean_ious": 0.46012, "stage1_s": 0.00225, "stage1_m": 0.02718, "stage1_l": 0.19617, "stage1_h": 0.50171, "loss": 0.08455, "grad_norm": 4.72487, "time": 1.68744}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 17809, "data_time": 0.09452, "stage0_loss_instance_mil": 0.00429, "stage0_bag_acc": 99.74603, "stage0_mean_ious": 0.51774, "stage0_s": 0.0, "stage0_m": 0.03424, "stage0_l": 0.18843, "stage0_h": 0.55584, "stage1_loss_instance_mil": 0.05874, "stage1_bag_acc": 99.76974, "stage1_neg_loss": 0.02807, "stage1_mean_ious": 0.47826, "stage1_s": 0.0, "stage1_m": 0.03832, "stage1_l": 0.17926, "stage1_h": 0.512, "loss": 0.0911, "grad_norm": 4.82426, "time": 1.71974}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 17809, "data_time": 0.0426, "stage0_loss_instance_mil": 0.00567, "stage0_bag_acc": 99.88235, "stage0_mean_ious": 0.50824, "stage0_s": 0.00136, "stage0_m": 0.04333, "stage0_l": 0.17754, "stage0_h": 0.55781, "stage1_loss_instance_mil": 0.05987, "stage1_bag_acc": 99.80828, "stage1_neg_loss": 0.02787, "stage1_mean_ious": 0.46914, "stage1_s": 0.00226, "stage1_m": 0.04746, "stage1_l": 0.18683, "stage1_h": 0.51064, "loss": 0.09341, "grad_norm": 4.74908, "time": 1.69034}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 17809, "data_time": 0.04213, "stage0_loss_instance_mil": 0.00256, "stage0_bag_acc": 99.90476, "stage0_mean_ious": 0.49219, "stage0_s": 0.0, "stage0_m": 0.04355, "stage0_l": 0.192, "stage0_h": 0.52874, "stage1_loss_instance_mil": 0.05388, "stage1_bag_acc": 99.80952, "stage1_neg_loss": 0.03136, "stage1_mean_ious": 0.45865, "stage1_s": 0.0, "stage1_m": 0.04264, "stage1_l": 0.18908, "stage1_h": 0.49008, "loss": 0.0878, "grad_norm": 4.61938, "time": 1.6803}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 17809, "data_time": 0.09665, "stage0_loss_instance_mil": 0.00206, "stage0_bag_acc": 100.0, "stage0_mean_ious": 0.51977, "stage0_s": 0.0, "stage0_m": 0.04053, "stage0_l": 0.2148, "stage0_h": 0.56518, "stage1_loss_instance_mil": 0.05306, "stage1_bag_acc": 100.0, "stage1_neg_loss": 0.03022, "stage1_mean_ious": 0.47982, "stage1_s": 0.0, "stage1_m": 0.04642, "stage1_l": 0.2112, "stage1_h": 0.51975, "loss": 0.08534, "grad_norm": 5.29322, "time": 1.76305}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 17809, "data_time": 0.04331, "stage0_loss_instance_mil": 0.00658, "stage0_bag_acc": 99.70833, "stage0_mean_ious": 0.47556, "stage0_s": 0.0, "stage0_m": 0.0364, "stage0_l": 0.18183, "stage0_h": 0.52206, "stage1_loss_instance_mil": 0.05084, "stage1_bag_acc": 99.76974, "stage1_neg_loss": 0.03093, "stage1_mean_ious": 0.44336, "stage1_s": 0.0, "stage1_m": 0.03679, "stage1_l": 0.18292, "stage1_h": 0.48301, "loss": 0.08835, "grad_norm": 4.28009, "time": 1.69377}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 17809, "data_time": 0.04395, "stage0_loss_instance_mil": 0.00275, "stage0_bag_acc": 99.92308, "stage0_mean_ious": 0.51876, "stage0_s": 0.0, "stage0_m": 0.02425, "stage0_l": 0.17619, "stage0_h": 0.56093, "stage1_loss_instance_mil": 0.05365, "stage1_bag_acc": 99.83612, "stage1_neg_loss": 0.03284, "stage1_mean_ious": 0.48202, "stage1_s": 0.0, "stage1_m": 0.02264, "stage1_l": 0.17138, "stage1_h": 0.52035, "loss": 0.08925, "grad_norm": 4.68567, "time": 1.68943}
{"mode": "val", "epoch": 12, "iter": 180, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.187, "bbox_mAP_50": 0.421, "bbox_mAP_75": 0.31, "bbox_mAP_s": 0.189, "bbox_mAP_m": 0.143, "bbox_mAP_l": 0.097, "bbox_mAP_copypaste": "0.187 0.421 0.310 0.189 0.143 0.097"}
