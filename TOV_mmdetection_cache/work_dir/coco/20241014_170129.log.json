{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-12.0\nNVCC: Build cuda_12.0.r12.0/compiler.31968024_0\nGCC: gcc (Ubuntu 11.4.0-2ubuntu1~18.04) 11.4.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.8.1\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.13.0+bdcbe92", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '../TOV_mmdetection_cache/work_dir/coco/pre_trained/P2B.pth'\nresume_from = None\nworkflow = [('train', 1)]\nnorm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\ndebug = False\nnum_stages = 2\nmodel = dict(\n    type='P2BNet',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=4,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True)),\n    roi_head=dict(\n        type='P2BHead',\n        num_stages=2,\n        top_k=7,\n        with_atten=False,\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCInstanceMILHead',\n            num_stages=2,\n            with_loss_pseudo=False,\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            num_ref_fcs=0,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_type='MIL',\n            loss_mil1=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='binary_cross_entropy'),\n            loss_mil2=dict(\n                type='MILLoss',\n                binary_ins=False,\n                loss_weight=0.25,\n                loss_type='gfocal_loss'))),\n    train_cfg=dict(\n        base_proposal=dict(\n            base_scales=[4, 8, 16, 32, 64, 128],\n            base_ratios=[\n                0.3333333333333333, 0.5, 0.6666666666666666, 1.0, 1.5, 2.0, 3.0\n            ],\n            shake_ratio=None,\n            cut_mode='symmetry',\n            gen_num_neg=0),\n        fine_proposal=dict(\n            gen_proposal_mode='fix_gen',\n            cut_mode=None,\n            shake_ratio=[0.1],\n            base_ratios=[1, 1.2, 1.3, 0.8, 0.7],\n            iou_thr=0.3,\n            gen_num_neg=3500),\n        rcnn=None),\n    test_cfg=dict(rpn=None, rcnn=None))\ndataset_type = 'CocoFmtDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                   (2000, 1000), (2000, 1200)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_true_bboxes'\n        ])\n]\ntest_scale = 1200\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2000, 1200),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_anns_id', 'gt_true_bboxes'\n                ])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    shuffle=None,\n    train=dict(\n        type='CocoFmtDataset',\n        ann_file='data/coco/annotations_qc_pt/instances_train2017_coarse.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(2000, 480), (2000, 576), (2000, 688), (2000, 864),\n                           (2000, 1000), (2000, 1200)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_true_bboxes'\n                ])\n        ]),\n    val=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False),\n    test=dict(\n        samples_per_gpu=16,\n        type='CocoFmtDataset',\n        ann_file=\n        '/home/lxz/P2BNet/TOV_mmdetection/data/coco/annotations/instances_train.json',\n        img_prefix='data/coco/images/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2000, 1200),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        keys=[\n                            'img', 'gt_bboxes', 'gt_labels',\n                            'gt_bboxes_ignore', 'gt_anns_id', 'gt_true_bboxes'\n                        ])\n                ])\n        ],\n        test_mode=False))\ncheck = dict(stop_while_nan=False)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = '../TOV_mmdetection_cache/work_dir/coco/'\nevaluation = dict(\n    interval=6,\n    metric='bbox',\n    save_result_file=\n    '../TOV_mmdetection_cache/work_dir/coco/_1200_latest_result.json',\n    do_first_eval=False,\n    do_final_eval=True)\ngpu_ids = [0]\n", "seed": null, "exp_name": "P2BNet_r50_fpn_1x_coco_ms.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 18759, "data_time": 0.07451, "stage0_loss_instance_mil": 0.70621, "stage0_bag_acc": 20.22539, "stage0_mean_ious": 0.06706, "stage0_s": 0.0, "stage0_m": 0.05162, "stage0_l": 0.09979, "stage0_h": 0.05465, "stage1_loss_instance_mil": 0.16571, "stage1_bag_acc": 15.1297, "stage1_neg_loss": 0.00229, "stage1_mean_ious": 0.06751, "stage1_s": 0.0, "stage1_m": 0.05361, "stage1_l": 0.10103, "stage1_h": 0.05483, "loss": 0.8742, "grad_norm": 3.54177, "time": 1.7611}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 18759, "data_time": 0.02603, "stage0_loss_instance_mil": 0.55449, "stage0_bag_acc": 51.25855, "stage0_mean_ious": 0.07845, "stage0_s": 0.0, "stage0_m": 0.03473, "stage0_l": 0.09252, "stage0_h": 0.07057, "stage1_loss_instance_mil": 0.24276, "stage1_bag_acc": 36.07924, "stage1_neg_loss": 0.01431, "stage1_mean_ious": 0.07814, "stage1_s": 0.0, "stage1_m": 0.0364, "stage1_l": 0.09159, "stage1_h": 0.07004, "loss": 0.81155, "grad_norm": 5.168, "time": 1.72434}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 18759, "data_time": 0.02684, "stage0_loss_instance_mil": 0.31785, "stage0_bag_acc": 79.74101, "stage0_mean_ious": 0.07698, "stage0_s": 0.0, "stage0_m": 0.01709, "stage0_l": 0.08713, "stage0_h": 0.07025, "stage1_loss_instance_mil": 0.27276, "stage1_bag_acc": 86.47076, "stage1_neg_loss": 0.05655, "stage1_mean_ious": 0.07755, "stage1_s": 0.0, "stage1_m": 0.01806, "stage1_l": 0.08672, "stage1_h": 0.07104, "loss": 0.64716, "grad_norm": 8.43938, "time": 1.74332}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 18759, "data_time": 0.07589, "stage0_loss_instance_mil": 0.15412, "stage0_bag_acc": 90.05547, "stage0_mean_ious": 0.08051, "stage0_s": 0.0, "stage0_m": 0.04937, "stage0_l": 0.09004, "stage0_h": 0.07594, "stage1_loss_instance_mil": 0.29046, "stage1_bag_acc": 93.7418, "stage1_neg_loss": 0.07948, "stage1_mean_ious": 0.07912, "stage1_s": 0.0, "stage1_m": 0.04782, "stage1_l": 0.08882, "stage1_h": 0.0741, "loss": 0.52406, "grad_norm": 9.54503, "time": 1.76571}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 2e-05, "memory": 18759, "data_time": 0.02638, "stage0_loss_instance_mil": 0.11263, "stage0_bag_acc": 91.91477, "stage0_mean_ious": 0.08494, "stage0_s": 0.0, "stage0_m": 0.01474, "stage0_l": 0.09438, "stage0_h": 0.0821, "stage1_loss_instance_mil": 0.31351, "stage1_bag_acc": 95.27236, "stage1_neg_loss": 0.07928, "stage1_mean_ious": 0.08369, "stage1_s": 0.0, "stage1_m": 0.01487, "stage1_l": 0.09078, "stage1_h": 0.08099, "loss": 0.50542, "grad_norm": 12.33312, "time": 1.7459}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 18759, "data_time": 0.02578, "stage0_loss_instance_mil": 0.10228, "stage0_bag_acc": 92.88616, "stage0_mean_ious": 0.07331, "stage0_s": 0.0, "stage0_m": 0.02058, "stage0_l": 0.07115, "stage0_h": 0.07088, "stage1_loss_instance_mil": 0.2768, "stage1_bag_acc": 94.27425, "stage1_neg_loss": 0.08011, "stage1_mean_ious": 0.07009, "stage1_s": 0.0, "stage1_m": 0.01684, "stage1_l": 0.06809, "stage1_h": 0.06814, "loss": 0.45919, "grad_norm": 10.44784, "time": 1.67929}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 3e-05, "memory": 18759, "data_time": 0.07634, "stage0_loss_instance_mil": 0.07516, "stage0_bag_acc": 94.57695, "stage0_mean_ious": 0.07803, "stage0_s": 0.0, "stage0_m": 0.0186, "stage0_l": 0.0795, "stage0_h": 0.07493, "stage1_loss_instance_mil": 0.24519, "stage1_bag_acc": 96.89326, "stage1_neg_loss": 0.07321, "stage1_mean_ious": 0.07546, "stage1_s": 0.0, "stage1_m": 0.01494, "stage1_l": 0.07869, "stage1_h": 0.0726, "loss": 0.39356, "grad_norm": 9.72555, "time": 1.77282}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 4e-05, "memory": 18759, "data_time": 0.02647, "stage0_loss_instance_mil": 0.09091, "stage0_bag_acc": 94.3586, "stage0_mean_ious": 0.07622, "stage0_s": 0.0, "stage0_m": 0.02659, "stage0_l": 0.08213, "stage0_h": 0.07315, "stage1_loss_instance_mil": 0.22997, "stage1_bag_acc": 96.49781, "stage1_neg_loss": 0.07144, "stage1_mean_ious": 0.07309, "stage1_s": 0.0, "stage1_m": 0.02313, "stage1_l": 0.07748, "stage1_h": 0.07098, "loss": 0.39232, "grad_norm": 10.04905, "time": 1.69433}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 4e-05, "memory": 18759, "data_time": 0.02849, "stage0_loss_instance_mil": 0.07189, "stage0_bag_acc": 95.30343, "stage0_mean_ious": 0.08859, "stage0_s": 0.0, "stage0_m": 0.01518, "stage0_l": 0.08479, "stage0_h": 0.08475, "stage1_loss_instance_mil": 0.23439, "stage1_bag_acc": 97.20248, "stage1_neg_loss": 0.07271, "stage1_mean_ious": 0.0831, "stage1_s": 0.0, "stage1_m": 0.01296, "stage1_l": 0.07794, "stage1_h": 0.08005, "loss": 0.37899, "grad_norm": 10.9071, "time": 1.75133}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 5e-05, "memory": 18759, "data_time": 0.07678, "stage0_loss_instance_mil": 0.05446, "stage0_bag_acc": 96.31345, "stage0_mean_ious": 0.08109, "stage0_s": 0.0, "stage0_m": 0.03668, "stage0_l": 0.09346, "stage0_h": 0.0756, "stage1_loss_instance_mil": 0.24295, "stage1_bag_acc": 97.53292, "stage1_neg_loss": 0.07553, "stage1_mean_ious": 0.07743, "stage1_s": 0.0, "stage1_m": 0.03041, "stage1_l": 0.08957, "stage1_h": 0.07214, "loss": 0.37294, "grad_norm": 13.10391, "time": 1.80271}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 5e-05, "memory": 18759, "data_time": 0.02794, "stage0_loss_instance_mil": 0.0566, "stage0_bag_acc": 96.43514, "stage0_mean_ious": 0.08421, "stage0_s": 0.0, "stage0_m": 0.01616, "stage0_l": 0.08185, "stage0_h": 0.08191, "stage1_loss_instance_mil": 0.19882, "stage1_bag_acc": 97.32224, "stage1_neg_loss": 0.06434, "stage1_mean_ious": 0.082, "stage1_s": 0.0, "stage1_m": 0.01613, "stage1_l": 0.08139, "stage1_h": 0.07935, "loss": 0.31977, "grad_norm": 9.2574, "time": 1.7197}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 5e-05, "memory": 18759, "data_time": 0.02693, "stage0_loss_instance_mil": 0.05218, "stage0_bag_acc": 97.09054, "stage0_mean_ious": 0.08729, "stage0_s": 0.0, "stage0_m": 0.02784, "stage0_l": 0.08664, "stage0_h": 0.08312, "stage1_loss_instance_mil": 0.1631, "stage1_bag_acc": 97.74785, "stage1_neg_loss": 0.05686, "stage1_mean_ious": 0.08322, "stage1_s": 0.0, "stage1_m": 0.02847, "stage1_l": 0.08683, "stage1_h": 0.07849, "loss": 0.27214, "grad_norm": 8.33447, "time": 1.72136}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 5e-05, "memory": 18759, "data_time": 0.07863, "stage0_loss_instance_mil": 0.04285, "stage0_bag_acc": 96.88644, "stage0_mean_ious": 0.08667, "stage0_s": 0.0, "stage0_m": 0.01778, "stage0_l": 0.10888, "stage0_h": 0.08146, "stage1_loss_instance_mil": 0.15377, "stage1_bag_acc": 98.21985, "stage1_neg_loss": 0.05616, "stage1_mean_ious": 0.08327, "stage1_s": 0.0, "stage1_m": 0.01717, "stage1_l": 0.09955, "stage1_h": 0.07859, "loss": 0.25278, "grad_norm": 8.60573, "time": 1.84443}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 5e-05, "memory": 18759, "data_time": 0.02778, "stage0_loss_instance_mil": 0.0471, "stage0_bag_acc": 96.68087, "stage0_mean_ious": 0.08204, "stage0_s": 0.0, "stage0_m": 0.02366, "stage0_l": 0.09214, "stage0_h": 0.07664, "stage1_loss_instance_mil": 0.15166, "stage1_bag_acc": 97.94802, "stage1_neg_loss": 0.05803, "stage1_mean_ious": 0.07956, "stage1_s": 0.0, "stage1_m": 0.02369, "stage1_l": 0.09027, "stage1_h": 0.07396, "loss": 0.25678, "grad_norm": 11.83845, "time": 1.73019}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 5e-05, "memory": 18759, "data_time": 0.02685, "stage0_loss_instance_mil": 0.05593, "stage0_bag_acc": 95.43273, "stage0_mean_ious": 0.08662, "stage0_s": 0.00497, "stage0_m": 0.02658, "stage0_l": 0.10782, "stage0_h": 0.07876, "stage1_loss_instance_mil": 0.15069, "stage1_bag_acc": 97.22374, "stage1_neg_loss": 0.05591, "stage1_mean_ious": 0.08669, "stage1_s": 0.00364, "stage1_m": 0.02491, "stage1_l": 0.10938, "stage1_h": 0.0787, "loss": 0.26252, "grad_norm": 8.01045, "time": 1.74067}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 5e-05, "memory": 18759, "data_time": 0.07483, "stage0_loss_instance_mil": 0.03264, "stage0_bag_acc": 98.06056, "stage0_mean_ious": 0.08368, "stage0_s": 0.0, "stage0_m": 0.0305, "stage0_l": 0.10329, "stage0_h": 0.07756, "stage1_loss_instance_mil": 0.12611, "stage1_bag_acc": 98.19954, "stage1_neg_loss": 0.05064, "stage1_mean_ious": 0.08342, "stage1_s": 0.0, "stage1_m": 0.03128, "stage1_l": 0.10137, "stage1_h": 0.07771, "loss": 0.20939, "grad_norm": 6.97108, "time": 1.76811}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 5e-05, "memory": 18759, "data_time": 0.02747, "stage0_loss_instance_mil": 0.02597, "stage0_bag_acc": 98.19624, "stage0_mean_ious": 0.08812, "stage0_s": 0.0, "stage0_m": 0.02977, "stage0_l": 0.10633, "stage0_h": 0.08081, "stage1_loss_instance_mil": 0.1253, "stage1_bag_acc": 98.37739, "stage1_neg_loss": 0.05074, "stage1_mean_ious": 0.08482, "stage1_s": 0.0, "stage1_m": 0.02802, "stage1_l": 0.10127, "stage1_h": 0.07813, "loss": 0.20201, "grad_norm": 6.60738, "time": 1.76486}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.0262, "stage0_loss_instance_mil": 0.02387, "stage0_bag_acc": 98.30407, "stage0_mean_ious": 0.08667, "stage0_s": 0.0, "stage0_m": 0.02431, "stage0_l": 0.12839, "stage0_h": 0.07841, "stage1_loss_instance_mil": 0.11733, "stage1_bag_acc": 98.81033, "stage1_neg_loss": 0.04988, "stage1_mean_ious": 0.08406, "stage1_s": 0.0, "stage1_m": 0.02191, "stage1_l": 0.12002, "stage1_h": 0.07675, "loss": 0.19108, "grad_norm": 7.14243, "time": 1.75119}
{"mode": "val", "epoch": 6, "iter": 150, "lr": 5e-05, "eval_iter_num": 90, "bbox_mAP": 0.012, "bbox_mAP_50": 0.036, "bbox_mAP_75": 0.019, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.012 0.036 0.019 0.010 0.007 0.002"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 5e-05, "memory": 18767, "data_time": 0.07618, "stage0_loss_instance_mil": 0.02598, "stage0_bag_acc": 98.0009, "stage0_mean_ious": 0.08032, "stage0_s": 0.0, "stage0_m": 0.02294, "stage0_l": 0.09913, "stage0_h": 0.07374, "stage1_loss_instance_mil": 0.10595, "stage1_bag_acc": 98.13526, "stage1_neg_loss": 0.04471, "stage1_mean_ious": 0.07878, "stage1_s": 0.0, "stage1_m": 0.0235, "stage1_l": 0.09737, "stage1_h": 0.07197, "loss": 0.17664, "grad_norm": 6.3914, "time": 1.80245}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 5e-05, "memory": 18767, "data_time": 0.02543, "stage0_loss_instance_mil": 0.02809, "stage0_bag_acc": 97.59984, "stage0_mean_ious": 0.08335, "stage0_s": 0.00477, "stage0_m": 0.03314, "stage0_l": 0.10239, "stage0_h": 0.07565, "stage1_loss_instance_mil": 0.10865, "stage1_bag_acc": 98.18768, "stage1_neg_loss": 0.04735, "stage1_mean_ious": 0.08122, "stage1_s": 0.00494, "stage1_m": 0.03456, "stage1_l": 0.10153, "stage1_h": 0.07345, "loss": 0.18409, "grad_norm": 7.50571, "time": 1.75703}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.02768, "stage0_loss_instance_mil": 0.02685, "stage0_bag_acc": 97.88639, "stage0_mean_ious": 0.08636, "stage0_s": 0.0, "stage0_m": 0.0311, "stage0_l": 0.10522, "stage0_h": 0.07995, "stage1_loss_instance_mil": 0.1182, "stage1_bag_acc": 98.81332, "stage1_neg_loss": 0.04638, "stage1_mean_ious": 0.0826, "stage1_s": 0.0, "stage1_m": 0.03398, "stage1_l": 0.09922, "stage1_h": 0.07655, "loss": 0.19143, "grad_norm": 6.57417, "time": 1.76473}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 18767, "data_time": 0.07687, "stage0_loss_instance_mil": 0.01866, "stage0_bag_acc": 98.4761, "stage0_mean_ious": 0.09398, "stage0_s": 0.0, "stage0_m": 0.02685, "stage0_l": 0.11718, "stage0_h": 0.08497, "stage1_loss_instance_mil": 0.11562, "stage1_bag_acc": 99.28582, "stage1_neg_loss": 0.04575, "stage1_mean_ious": 0.08794, "stage1_s": 0.0, "stage1_m": 0.02661, "stage1_l": 0.11095, "stage1_h": 0.07988, "loss": 0.18003, "grad_norm": 6.21903, "time": 1.80591}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 5e-05, "memory": 18767, "data_time": 0.02615, "stage0_loss_instance_mil": 0.01587, "stage0_bag_acc": 98.87042, "stage0_mean_ious": 0.08181, "stage0_s": 0.0, "stage0_m": 0.03456, "stage0_l": 0.10443, "stage0_h": 0.07471, "stage1_loss_instance_mil": 0.09587, "stage1_bag_acc": 99.0907, "stage1_neg_loss": 0.04706, "stage1_mean_ious": 0.0791, "stage1_s": 0.0, "stage1_m": 0.03478, "stage1_l": 0.09861, "stage1_h": 0.07222, "loss": 0.1588, "grad_norm": 6.46445, "time": 1.73875}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 5e-05, "memory": 18767, "data_time": 0.02583, "stage0_loss_instance_mil": 0.02332, "stage0_bag_acc": 98.70137, "stage0_mean_ious": 0.07734, "stage0_s": 0.0, "stage0_m": 0.03324, "stage0_l": 0.09805, "stage0_h": 0.0695, "stage1_loss_instance_mil": 0.09552, "stage1_bag_acc": 98.37384, "stage1_neg_loss": 0.04203, "stage1_mean_ious": 0.07481, "stage1_s": 0.0, "stage1_m": 0.03291, "stage1_l": 0.09085, "stage1_h": 0.06766, "loss": 0.16088, "grad_norm": 6.342, "time": 1.72888}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 18767, "data_time": 0.07604, "stage0_loss_instance_mil": 0.02337, "stage0_bag_acc": 98.78963, "stage0_mean_ious": 0.07478, "stage0_s": 0.0, "stage0_m": 0.02314, "stage0_l": 0.09789, "stage0_h": 0.06735, "stage1_loss_instance_mil": 0.09097, "stage1_bag_acc": 98.68963, "stage1_neg_loss": 0.0383, "stage1_mean_ious": 0.07386, "stage1_s": 0.0, "stage1_m": 0.02316, "stage1_l": 0.09621, "stage1_h": 0.06639, "loss": 0.15264, "grad_norm": 5.02014, "time": 1.77194}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 18767, "data_time": 0.02632, "stage0_loss_instance_mil": 0.00797, "stage0_bag_acc": 99.58283, "stage0_mean_ious": 0.07901, "stage0_s": 0.0, "stage0_m": 0.03058, "stage0_l": 0.09439, "stage0_h": 0.0712, "stage1_loss_instance_mil": 0.08015, "stage1_bag_acc": 99.86667, "stage1_neg_loss": 0.03676, "stage1_mean_ious": 0.0753, "stage1_s": 0.0, "stage1_m": 0.02881, "stage1_l": 0.09223, "stage1_h": 0.06771, "loss": 0.12488, "grad_norm": 4.06843, "time": 1.72574}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 18767, "data_time": 0.02569, "stage0_loss_instance_mil": 0.01362, "stage0_bag_acc": 98.73118, "stage0_mean_ious": 0.08038, "stage0_s": 0.0, "stage0_m": 0.03299, "stage0_l": 0.09961, "stage0_h": 0.07274, "stage1_loss_instance_mil": 0.08463, "stage1_bag_acc": 99.077, "stage1_neg_loss": 0.04336, "stage1_mean_ious": 0.07726, "stage1_s": 0.0, "stage1_m": 0.02892, "stage1_l": 0.09693, "stage1_h": 0.06987, "loss": 0.14161, "grad_norm": 5.02862, "time": 1.72602}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 18767, "data_time": 0.07747, "stage0_loss_instance_mil": 0.01203, "stage0_bag_acc": 99.28166, "stage0_mean_ious": 0.08208, "stage0_s": 0.0, "stage0_m": 0.02615, "stage0_l": 0.09933, "stage0_h": 0.07503, "stage1_loss_instance_mil": 0.07944, "stage1_bag_acc": 99.39804, "stage1_neg_loss": 0.03462, "stage1_mean_ious": 0.07868, "stage1_s": 0.0, "stage1_m": 0.02689, "stage1_l": 0.09482, "stage1_h": 0.07217, "loss": 0.12609, "grad_norm": 4.06148, "time": 1.79956}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 18767, "data_time": 0.02647, "stage0_loss_instance_mil": 0.01289, "stage0_bag_acc": 99.11126, "stage0_mean_ious": 0.07092, "stage0_s": 0.0, "stage0_m": 0.03147, "stage0_l": 0.09078, "stage0_h": 0.06404, "stage1_loss_instance_mil": 0.07753, "stage1_bag_acc": 99.11126, "stage1_neg_loss": 0.03696, "stage1_mean_ious": 0.06888, "stage1_s": 0.0, "stage1_m": 0.03151, "stage1_l": 0.091, "stage1_h": 0.06185, "loss": 0.12739, "grad_norm": 4.51597, "time": 1.72696}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 18767, "data_time": 0.02647, "stage0_loss_instance_mil": 0.01094, "stage0_bag_acc": 99.5268, "stage0_mean_ious": 0.08026, "stage0_s": 0.00466, "stage0_m": 0.03529, "stage0_l": 0.1056, "stage0_h": 0.07167, "stage1_loss_instance_mil": 0.08228, "stage1_bag_acc": 99.31391, "stage1_neg_loss": 0.03932, "stage1_mean_ious": 0.07663, "stage1_s": 0.00331, "stage1_m": 0.03509, "stage1_l": 0.10136, "stage1_h": 0.0681, "loss": 0.13254, "grad_norm": 4.14572, "time": 1.75338}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 1e-05, "memory": 18767, "data_time": 0.07564, "stage0_loss_instance_mil": 0.01274, "stage0_bag_acc": 99.45963, "stage0_mean_ious": 0.08037, "stage0_s": 0.0, "stage0_m": 0.04402, "stage0_l": 0.10131, "stage0_h": 0.07255, "stage1_loss_instance_mil": 0.08221, "stage1_bag_acc": 99.35437, "stage1_neg_loss": 0.03787, "stage1_mean_ious": 0.07713, "stage1_s": 0.0, "stage1_m": 0.04359, "stage1_l": 0.09915, "stage1_h": 0.06915, "loss": 0.13282, "grad_norm": 4.37425, "time": 1.77565}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 18767, "data_time": 0.02566, "stage0_loss_instance_mil": 0.0067, "stage0_bag_acc": 99.63137, "stage0_mean_ious": 0.08047, "stage0_s": 0.00468, "stage0_m": 0.02931, "stage0_l": 0.09256, "stage0_h": 0.07335, "stage1_loss_instance_mil": 0.077, "stage1_bag_acc": 99.55445, "stage1_neg_loss": 0.03651, "stage1_mean_ious": 0.07745, "stage1_s": 0.00555, "stage1_m": 0.0283, "stage1_l": 0.09109, "stage1_h": 0.07037, "loss": 0.12022, "grad_norm": 4.52786, "time": 1.75238}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 1e-05, "memory": 18767, "data_time": 0.02603, "stage0_loss_instance_mil": 0.01101, "stage0_bag_acc": 99.47976, "stage0_mean_ious": 0.07742, "stage0_s": 0.0, "stage0_m": 0.0252, "stage0_l": 0.09915, "stage0_h": 0.07102, "stage1_loss_instance_mil": 0.07837, "stage1_bag_acc": 99.43409, "stage1_neg_loss": 0.04122, "stage1_mean_ious": 0.07373, "stage1_s": 0.0, "stage1_m": 0.02357, "stage1_l": 0.09217, "stage1_h": 0.06811, "loss": 0.13059, "grad_norm": 4.71929, "time": 1.73501}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 18767, "data_time": 0.07753, "stage0_loss_instance_mil": 0.00798, "stage0_bag_acc": 99.46702, "stage0_mean_ious": 0.08159, "stage0_s": 0.0, "stage0_m": 0.03239, "stage0_l": 0.10526, "stage0_h": 0.07556, "stage1_loss_instance_mil": 0.08378, "stage1_bag_acc": 99.6829, "stage1_neg_loss": 0.03553, "stage1_mean_ious": 0.07766, "stage1_s": 0.0, "stage1_m": 0.02967, "stage1_l": 0.09886, "stage1_h": 0.07222, "loss": 0.1273, "grad_norm": 4.68302, "time": 1.8038}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 18767, "data_time": 0.02669, "stage0_loss_instance_mil": 0.00686, "stage0_bag_acc": 99.59286, "stage0_mean_ious": 0.07693, "stage0_s": 0.00468, "stage0_m": 0.01745, "stage0_l": 0.0987, "stage0_h": 0.0691, "stage1_loss_instance_mil": 0.07724, "stage1_bag_acc": 99.8114, "stage1_neg_loss": 0.03579, "stage1_mean_ious": 0.07244, "stage1_s": 0.00556, "stage1_m": 0.01752, "stage1_l": 0.09327, "stage1_h": 0.06499, "loss": 0.11988, "grad_norm": 4.3239, "time": 1.75852}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 18767, "data_time": 0.02619, "stage0_loss_instance_mil": 0.00753, "stage0_bag_acc": 99.43336, "stage0_mean_ious": 0.0794, "stage0_s": 0.0, "stage0_m": 0.0339, "stage0_l": 0.10119, "stage0_h": 0.07289, "stage1_loss_instance_mil": 0.08311, "stage1_bag_acc": 99.54447, "stage1_neg_loss": 0.03676, "stage1_mean_ious": 0.07639, "stage1_s": 0.0, "stage1_m": 0.03288, "stage1_l": 0.09401, "stage1_h": 0.07045, "loss": 0.1274, "grad_norm": 4.54938, "time": 1.72363}
{"mode": "val", "epoch": 12, "iter": 150, "lr": 0.0, "eval_iter_num": 90, "bbox_mAP": 0.007, "bbox_mAP_50": 0.028, "bbox_mAP_75": 0.012, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.007 0.028 0.012 0.004 0.003 0.001"}
